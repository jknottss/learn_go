1
00:00:00,000 --> 00:00:05,916
[БЕЗ_ЗВУКА] В

2
00:00:05,916 --> 00:00:11,680
предыдущем видео мы рассматривали упаковку
и запаковку json'а на примере структуры,

3
00:00:11,680 --> 00:00:15,068
у которой чётко определена структура.

4
00:00:15,068 --> 00:00:17,220
И мы всегда её знаем.

5
00:00:17,220 --> 00:00:21,636
Но что делать,
если мы хотим поработать с json'ом,

6
00:00:21,636 --> 00:00:25,060
у которого не определена структура,
либо мы не знаем,

7
00:00:25,060 --> 00:00:29,210
либо она каждый раз меняется,
а залезть нам в неё всё-таки надо.

8
00:00:29,210 --> 00:00:35,421
Мы тоже можем с этим работать в Go,

9
00:00:35,421 --> 00:00:42,753
используя стандартный пакет json,
и на помощь нам придёт пустой интерфейс.

10
00:00:42,753 --> 00:00:47,606
Вот в коде у меня определённый json.

11
00:00:47,606 --> 00:00:54,775
Это массив из двух объектов
в терминологии json'а.

12
00:00:54,775 --> 00:00:56,113
Причём объектов разных.

13
00:00:56,113 --> 00:01:01,075
Это не абсолютно идентичные объекты,
просто с разными полями, в первом есть id,

14
00:01:01,075 --> 00:01:08,480
username, phone, во втором id есть,
но уже поля другие: адрес и компания.

15
00:01:08,480 --> 00:01:10,514
Как это распаковать?

16
00:01:10,514 --> 00:01:14,160
Почти точно так же, как со структурой.

17
00:01:14,160 --> 00:01:21,570
Я создаю переменную user1,
которая имеет тип «пустой интерфейс».

18
00:01:21,570 --> 00:01:26,716
Дальше при распаковке я ей передаю
ссылку на эту переменную, говорю, что,

19
00:01:26,716 --> 00:01:32,090
пожалуйста, распакуй мне вот сюда.

20
00:01:32,090 --> 00:01:36,160
И что он мне распаковал?

21
00:01:36,160 --> 00:01:40,382
[ЗВУК] И

22
00:01:40,382 --> 00:01:46,050
распаковал мне всё это в интерфейс.

23
00:01:46,050 --> 00:01:53,594
Итак, у меня массив, в котором объекты
и внутри объектов какие-то поля.

24
00:01:53,594 --> 00:02:00,440
Распаковал он мне это в
слайс пустых интерфейсов.

25
00:02:00,440 --> 00:02:05,330
Первый объект — это map[string]interface,

26
00:02:05,330 --> 00:02:10,110
id — 17, username, phone.

27
00:02:10,110 --> 00:02:15,512
Второй объект — это тоже
map[string]interface, id — 17, причём,

28
00:02:15,512 --> 00:02:20,759
обратите внимание, тут — это int,
а тут — это строка,

29
00:02:20,759 --> 00:02:25,130
потому что данные внутри разные,
адрес и компания.

30
00:02:25,130 --> 00:02:29,765
Да, вам, конечно, придётся довольно
много делать преобразований интерфейсов

31
00:02:29,765 --> 00:02:36,050
туда-сюда для того, чтобы добраться до
этих данных, но другой возможности нет.

32
00:02:36,050 --> 00:02:42,070
Точно так же вы можете запаковать

33
00:02:42,070 --> 00:02:49,089
любое значение через пустой интерфейс,
да и просто без интерфейса.

34
00:02:49,089 --> 00:02:54,640
Например, я создал какую-то
map[string]interface,

35
00:02:54,640 --> 00:02:56,726
там определил значение.

36
00:02:56,726 --> 00:03:01,190
Сейчас это user2,
сейчас map[string]interface.

37
00:03:01,190 --> 00:03:05,440
Я могу сериализовать
напрямую это значение,

38
00:03:05,440 --> 00:03:10,230
могу присвоить это в какое-то другое
значение, которое вообще любое,

39
00:03:10,230 --> 00:03:12,940
то есть user2, и это пустой интерфейс.

40
00:03:12,940 --> 00:03:15,547
Теперь сериализую его.

41
00:03:15,547 --> 00:03:17,040
Что получаю?

42
00:03:17,040 --> 00:03:23,880
Ну и получаю нормальный валидный json,

43
00:03:23,880 --> 00:03:30,650
который уже может принять
любая другая программа.