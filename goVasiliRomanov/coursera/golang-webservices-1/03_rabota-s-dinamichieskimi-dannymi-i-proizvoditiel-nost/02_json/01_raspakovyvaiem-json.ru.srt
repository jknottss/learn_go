1
00:00:00,000 --> 00:00:09,423
[БЕЗ_ЗВУКА] Здесь давайте
поговорим про json.

2
00:00:09,423 --> 00:00:13,360
json — это де факто стандарт
передачи данных между

3
00:00:13,360 --> 00:00:18,145
client-side и server-side
в современном вебе.

4
00:00:18,145 --> 00:00:23,962
Конечно, в go имеется встроенный
упаковщик и распаковщик go, json,

5
00:00:23,962 --> 00:00:31,135
и процесс упаковки-распаковки
вообще каких-либо

6
00:00:31,135 --> 00:00:36,623
данных в go называется
маршалингом и анмаршалингом.

7
00:00:36,623 --> 00:00:40,220
Давайте посмотрим, как это работает.

8
00:00:40,220 --> 00:00:42,538
Итак, у нас есть программа.

9
00:00:42,538 --> 00:00:47,100
Мы для начала импортируем
вообще пакет для работы с json.

10
00:00:47,100 --> 00:00:54,692
Есть какая-то структура пользователь: Id,
Username, телефон.

11
00:00:54,692 --> 00:01:02,090
Есть запакованный json,
в котором есть эти поля.

12
00:01:02,090 --> 00:01:04,985
И теперь мы хотим распаковать.

13
00:01:04,985 --> 00:01:06,379
Что мы делаем?

14
00:01:06,379 --> 00:01:12,190
Для начала мы преобразуем эту
строку с json к слайсу byte,

15
00:01:12,190 --> 00:01:17,030
Дело в том, что распаковщик, он работает
со слайсом byte, не со строками.

16
00:01:17,030 --> 00:01:21,730
Дальше мы создадим юзера,
для начала пустого,

17
00:01:21,730 --> 00:01:26,339
а теперь вызовем функцию json.Unmarshal,

18
00:01:26,339 --> 00:01:32,660
которая принимает слайс byte,
в котором должен лежать json,

19
00:01:32,660 --> 00:01:37,240
и переменную,
куда нам нужно записать результат.

20
00:01:37,240 --> 00:01:42,200
И выведем.

21
00:01:42,200 --> 00:01:49,160
После этого я хочу изменить телефон у
этой структуры и обратно запаковать ее.

22
00:01:49,160 --> 00:01:51,743
Для этого есть функция Marshal.

23
00:01:51,743 --> 00:01:57,431
То есть я вызываю функцию Marshal из
пакета json и передаю туда структуру.

24
00:01:57,431 --> 00:02:00,410
Она мне возвращает ошибку и результат.

25
00:02:00,410 --> 00:02:05,820
Давайте все-таки ошибку будем явно
обрабатывать, не надо учиться плохому.

26
00:02:05,820 --> 00:02:14,190
[ЗВУК] [ЗВУК] Вот.

27
00:02:14,190 --> 00:02:21,750
Ну и запустим.

28
00:02:21,750 --> 00:02:28,284
Я успешно распаковал структуру,
то есть появился User(ID:42,

29
00:02:28,284 --> 00:02:33,481
Username: "rvasily" и
почему-то пустой телефон.

30
00:02:33,481 --> 00:02:40,073
При этом, когда я запаковал структуру,
там вообще нет поля «телефон».

31
00:02:40,073 --> 00:02:41,994
Почему так происходит?

32
00:02:41,994 --> 00:02:44,930
Посмотрим еще раз на нашу структуру.

33
00:02:44,930 --> 00:02:50,922
Поле «телефон», оно приватное,
оно начинается с маленькой буквы.

34
00:02:50,922 --> 00:02:56,520
То есть доступ к этому полю
могут иметь только те методы,

35
00:02:56,520 --> 00:03:03,990
те функции, которые объявлены в том же
самом пакете, в котором и эта структура.

36
00:03:03,990 --> 00:03:05,783
А у меня пакет main.

37
00:03:05,783 --> 00:03:11,984
Соответственно, пакет encoding/json
не может иметь к ним доступа и

38
00:03:11,984 --> 00:03:17,040
он не может туда ни записать данные,
ни прочитать оттуда данных при запаковке.

39
00:03:17,040 --> 00:03:21,080
Имейте это в виду.

40
00:03:21,080 --> 00:03:26,498
В предыдущем видео мы видели,
что я упаковываю

41
00:03:26,498 --> 00:03:32,340
и запаковываю поля с каким-то
определенным именем.

42
00:03:32,340 --> 00:03:36,557
А что,
если вдруг мне надо сменить это имя,

43
00:03:36,557 --> 00:03:39,980
при этом я не хочу менять имя структуры?

44
00:03:39,980 --> 00:03:43,490
Для этого тоже есть способ.

45
00:03:43,490 --> 00:03:48,840
В go у структур

46
00:03:48,840 --> 00:03:54,710
может быть какая-то метаинформация,
это называется тегами структуры.

47
00:03:54,710 --> 00:03:59,000
Объявляется это вот так,

48
00:03:59,000 --> 00:04:04,250
в бэктиках после определения

49
00:04:04,250 --> 00:04:08,040
типа поля структуры.

50
00:04:08,040 --> 00:04:13,381
И тут мы можем написать: json,
то есть к какому...

51
00:04:13,381 --> 00:04:16,090
ну какой-то префикс, к чему это относится.

52
00:04:16,090 --> 00:04:17,620
json.

53
00:04:17,620 --> 00:04:23,047
Первым полем json ожидает увидеть имя,

54
00:04:23,047 --> 00:04:28,418
с которым мы будем работать, то есть либо
из которого ему нужно распаковывать,

55
00:04:28,418 --> 00:04:32,439
либо в который ему нужно записывать.

56
00:04:32,439 --> 00:04:39,268
И дальше — тип данных,
в который он должен записать этот тип.

57
00:04:39,268 --> 00:04:41,590
Какие еще есть примеры?

58
00:04:41,590 --> 00:04:43,505
Вот поле Address.

59
00:04:43,505 --> 00:04:47,574
Тут идет сначала запятая, это значит,

60
00:04:47,574 --> 00:04:52,560
что имя как было, так и остается,
я не хочу его переопределять,

61
00:04:52,560 --> 00:04:57,328
ну а дальше идет поле,
называется omitempty, это значит,

62
00:04:57,328 --> 00:05:02,173
что если поле пустое, там,
например, значение по умолчанию,

63
00:05:02,173 --> 00:05:08,800
то его не нужно писать в
результат при запаковке.

64
00:05:08,800 --> 00:05:13,330
Минус, он же дефис, означает,
что поле вообще не нужно

65
00:05:13,330 --> 00:05:18,322
сериализовывать и
десериализовывать при json.

66
00:05:18,322 --> 00:05:24,390
Итак, когда мы познакомились с тэгами
структур, нужно что-то записать.

67
00:05:24,390 --> 00:05:29,919
Я создал юзера, у него ID:42,
Username, адрес, компания.

68
00:05:29,919 --> 00:05:31,740
И теперь запакуем.

69
00:05:31,740 --> 00:05:35,830
Надо посмотреть, что получилось.

70
00:05:35,830 --> 00:05:41,830
[ЗВУК] Итак,

71
00:05:41,830 --> 00:05:47,175
я запаковал нашу структуру через "user_id"

72
00:05:47,175 --> 00:05:51,250
: "42" и "Username" : "rvasily".

73
00:05:51,250 --> 00:05:56,350
Другие поля,
они вообще не фигурируют в результатах.

74
00:05:56,350 --> 00:05:59,150
Еще раз, почему это произошло.

75
00:05:59,150 --> 00:06:02,950
У меня есть поле ID,
оно является типом int,

76
00:06:02,950 --> 00:06:07,070
однако я говорю,
что его нужно сериализовать,

77
00:06:07,070 --> 00:06:12,860
используя ключ "user_id" и
сериализовать это, как строку.

78
00:06:12,860 --> 00:06:16,271
Username я сериализую, как есть.

79
00:06:16,271 --> 00:06:17,300
Address.

80
00:06:17,300 --> 00:06:20,900
Адрес не надо сериализовать,
если он пустой.

81
00:06:20,900 --> 00:06:25,960
Компанию вообще не надо
сериализовать никогда.

82
00:06:25,960 --> 00:06:33,137
Если я напишу в адресе что-то,
то он должен сериализоваться.

83
00:06:33,137 --> 00:06:35,150
Запустим еще раз.

84
00:06:35,150 --> 00:06:39,360
И теперь у нас появился адрес,
потому что это не пустое поле.

85
00:06:39,360 --> 00:06:44,614
С тегами структуры вы будете
сталкиваться очень часто.

86
00:06:44,614 --> 00:06:51,950
Не только json имеет свои теги,
но и очень много других пакетов.