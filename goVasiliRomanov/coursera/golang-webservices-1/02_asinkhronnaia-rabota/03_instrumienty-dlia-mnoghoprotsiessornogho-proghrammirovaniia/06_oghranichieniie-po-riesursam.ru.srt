1
00:00:00,000 --> 00:00:09,008
[БЕЗ_ЗВУКА] Ну,
и напоследок поговорим про rate-лимиты.

2
00:00:09,008 --> 00:00:14,213
Довольно часто бывает так, что нам нужно
каким-либо образом затормозить нашу

3
00:00:14,213 --> 00:00:19,377
программу, например,
в зависимости от утилизации процессора,

4
00:00:19,377 --> 00:00:23,200
либо дисковой подсистемы,
нам нужно уменьшить нагрузки на эти части.

5
00:00:23,200 --> 00:00:28,622
В Go мы можем организовать это,
используя буферизированные каналы.

6
00:00:28,622 --> 00:00:33,060
Прежде чем мы будем смотреть код, давайте
посмотрим, как это выглядит визуально.

7
00:00:33,060 --> 00:00:37,070
Смотрите.

8
00:00:37,070 --> 00:00:42,160
Мы запустили пять горутин,
которые выполняют по шесть операций.

9
00:00:42,160 --> 00:00:47,450
И при этом наш rate-лимит — это 2.

10
00:00:47,450 --> 00:00:51,436
Посмотрите, как стройно выходит.

11
00:00:51,436 --> 00:00:55,847
Сначала горутины за
номером 0 и 1 выполняются,

12
00:00:55,847 --> 00:00:59,501
после этого горутины за номером 2 и 3,

13
00:00:59,501 --> 00:01:03,810
и после этого горутина за номером 4.

14
00:01:03,810 --> 00:01:08,060
А теперь давайте смотреть код.

15
00:01:08,060 --> 00:01:12,875
Создаем WaitGroup, для того чтобы
контролировать работу горутин.

16
00:01:12,875 --> 00:01:19,074
После этого основная тема данного
видео — это канал с квотой.

17
00:01:19,074 --> 00:01:22,332
Канал с квотой — это
буферизированный канал,

18
00:01:22,332 --> 00:01:27,490
где размер буфера как раз
и является нашим лимитом.

19
00:01:27,490 --> 00:01:32,471
Мы создали канал просто из пустых
структур, хотя тут ничего не мешает,

20
00:01:32,471 --> 00:01:33,256
чтобы быть...

21
00:01:33,256 --> 00:01:34,460
Просто пустая структура.

22
00:01:34,460 --> 00:01:35,780
Не занимает никакого места.

23
00:01:35,780 --> 00:01:40,543
Ну, дальше мы передаем канал
с квотой уже в наш Worker,

24
00:01:40,543 --> 00:01:42,942
который выполняется в отдельной горутине.

25
00:01:42,942 --> 00:01:44,590
А что происходит в Worker'е?

26
00:01:44,590 --> 00:01:49,350
Смотрите, прежде чем вообще начать

27
00:01:49,350 --> 00:01:54,110
выполнять какую-то полезную работу,
Worker пытается взять слот на эту работу.

28
00:01:54,110 --> 00:02:01,007
В данном случае мы пытаемся
положить пустую структуру в канал.

29
00:02:01,007 --> 00:02:05,079
Если в канале уже лежат,

30
00:02:05,079 --> 00:02:09,369
то есть если буфер канала уже заполнен,
значит,

31
00:02:09,369 --> 00:02:15,470
уже два Worker'а работают, то есть уже два
места заняты, там уже лежит две структуры.

32
00:02:15,470 --> 00:02:19,940
И мы блокируемся,
до тех пор пока там не освободится место.

33
00:02:19,940 --> 00:02:26,100
Таким образом мы не
позволяем расти сверх квоты.

34
00:02:26,100 --> 00:02:30,052
После этого мы выполняем уже
непосредственно нашу работу.

35
00:02:30,052 --> 00:02:34,736
В данном случае это просто печать
результата какого-то текста,

36
00:02:34,736 --> 00:02:38,770
ну и даем возможность
поработать другим горутинам.

37
00:02:38,770 --> 00:02:46,360
После этого мы опускаем квоту,
то есть возвращаем слот на работу.

38
00:02:46,360 --> 00:02:47,740
Все свое мы закончили.

39
00:02:47,740 --> 00:02:53,537
Это значит,
что мы теперь читаем из этого канала,

40
00:02:53,537 --> 00:02:58,795
то есть мы освобождаем там место,
для того чтобы какая-то

41
00:02:58,795 --> 00:03:04,180
другая горутина положила
туда свой слот в этот канал.

42
00:03:04,180 --> 00:03:04,995
Вот.

43
00:03:04,995 --> 00:03:08,606
Теперь давайте немножко
изменим нашу программу,

44
00:03:08,606 --> 00:03:13,509
для того чтобы возвращать квоту
обратно на каждой второй итерации.

45
00:03:13,509 --> 00:03:16,100
Раскомментируем этот блок.

46
00:03:16,100 --> 00:03:20,070
И посмотрим,
как изменилась наша программа.

47
00:03:20,070 --> 00:03:25,040
Смотрите, если

48
00:03:25,040 --> 00:03:30,134
раньше мы выполняли

49
00:03:30,134 --> 00:03:37,556
все итерации только двух горутин подряд,
например, вот так,

50
00:03:37,556 --> 00:03:43,194
то теперь у нас стало работать немножко
по-другому, теперь у нас более плавно.

51
00:03:43,194 --> 00:03:44,014
Смотрите.

52
00:03:44,014 --> 00:03:47,836
Выполнилось по две итерации
от одной части горутин,

53
00:03:47,836 --> 00:03:52,810
по две итерации от другой,
по две итерации от третьей и так далее.

54
00:03:52,810 --> 00:03:56,875
То есть теперь Worker не полностью

55
00:03:56,875 --> 00:04:02,070
захватывает квоту и выполняет
всю свою работу до конца,

56
00:04:02,070 --> 00:04:07,135
но он дает возможность выполнять
ее каким-то другим Worker'ам,

57
00:04:07,135 --> 00:04:13,298
то есть делится, скажем так, пропускной
способностью, ресурсами вашей программы.

58
00:04:13,298 --> 00:04:17,560
При этом обратите внимание,
что по-прежнему выполняются наши условия

59
00:04:17,560 --> 00:04:21,320
rate-лимита, чтобы одновременно
работало не более двух горутин.

60
00:04:21,320 --> 00:04:24,695
Это довольно мощный механизм.

61
00:04:24,695 --> 00:04:26,570
Пользуйтесь им.