1
00:00:00,000 --> 00:00:07,423
[БЕЗ_ЗВУКА] А теперь
рассмотрим пул воркеров.

2
00:00:07,423 --> 00:00:10,962
Довольно часто в архитектуре
встречаются случаи,

3
00:00:10,962 --> 00:00:14,380
когда работа осуществляется
через какие-то очереди,

4
00:00:14,380 --> 00:00:19,730
с которыми работают какие-то
офлайновые уже «разгребаторы».

5
00:00:19,730 --> 00:00:20,245
Вот.

6
00:00:20,245 --> 00:00:24,780
Часто для этих целей есть
«форкающиеся демоны»,

7
00:00:24,780 --> 00:00:29,137
но в Go можно поступить гораздо проще.

8
00:00:29,137 --> 00:00:33,682
Мы можем создать сразу
просто несколько горутин,

9
00:00:33,682 --> 00:00:37,220
которые будут читать из какого-то канала.

10
00:00:37,220 --> 00:00:43,000
И если нам приходит какая-то задача,
мы просто будем писать ее в этот канал.

11
00:00:43,000 --> 00:00:45,219
А там воркеры уже дальше сами разберутся.

12
00:00:45,219 --> 00:00:46,950
Давайте посмотрим это в работе.

13
00:00:46,950 --> 00:00:53,920
Вот смотрите:

14
00:00:53,920 --> 00:00:57,231
вы видите результат.

15
00:00:57,231 --> 00:01:04,473
У нас есть три воркера,
которые просто выводят что-то на экран.

16
00:01:04,473 --> 00:01:07,896
Я также показал номер
горутины и ту задачу,

17
00:01:07,896 --> 00:01:11,630
которую они получили; в данном
случае это просто времена месяцев.

18
00:01:11,630 --> 00:01:14,402
Как это работает внутри?

19
00:01:14,402 --> 00:01:15,662
Смотрите.

20
00:01:15,662 --> 00:01:20,717
Для начала мы просто имеем
какое-то количество горутин,

21
00:01:20,717 --> 00:01:24,609
и мы, используя в запуск горутины
функцию go, просто запускаем воркер,

22
00:01:24,609 --> 00:01:26,040
просто запускаем функцию.

23
00:01:26,040 --> 00:01:31,780
Внутри этой функции она просто
начинает читать из канала, и всё.

24
00:01:31,780 --> 00:01:33,886
Вот и вся работа.

25
00:01:33,886 --> 00:01:40,303
При этом если вдруг нам нужно
завершить этот пул воркеров,

26
00:01:40,303 --> 00:01:46,430
например, он отработал свою задачу,
то мы можем просто закрыть этот канал,

27
00:01:46,430 --> 00:01:50,830
и тогда цикл, в котором крутится
внутри воркер, закончится.

28
00:01:50,830 --> 00:01:54,860
При этом если вдруг не закрыть этот канал,

29
00:01:54,860 --> 00:02:00,100
то давайте посмотрим, что произойдет.

30
00:02:00,100 --> 00:02:08,319
Мы не

31
00:02:08,319 --> 00:02:12,769
дождались окончания работы воркера.

32
00:02:12,769 --> 00:02:17,820
Смотрите: после того как воркер
заканчивает свою работу,

33
00:02:17,820 --> 00:02:19,726
он пишет нам какой-то текст.

34
00:02:19,726 --> 00:02:23,767
Вот, например: «Я номер такой-то,
я закончил».

35
00:02:23,767 --> 00:02:26,978
В данном случае мы этого текста не видим.

36
00:02:26,978 --> 00:02:28,280
Что произошло?

37
00:02:28,280 --> 00:02:34,750
Произошло то, что наша программа, наша
функция main, она завершила свою работу,

38
00:02:34,750 --> 00:02:39,510
при этом она не стала ждать
каких-то других горутин,

39
00:02:39,510 --> 00:02:42,655
и поэтому воркер не завершился корректно.

40
00:02:42,655 --> 00:02:47,616
В каких-то других случаях это может
привести к утечкам горутин либо

41
00:02:47,616 --> 00:02:48,713
же к дедлоку.

42
00:02:48,713 --> 00:02:50,270
Будьте осторожны.

43
00:02:50,270 --> 00:02:55,330
Это был пул воркеров.