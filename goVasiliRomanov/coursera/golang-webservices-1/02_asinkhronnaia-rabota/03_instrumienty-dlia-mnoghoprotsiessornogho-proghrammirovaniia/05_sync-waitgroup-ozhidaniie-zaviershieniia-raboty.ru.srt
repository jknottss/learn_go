1
00:00:00,000 --> 00:00:06,617
[БЕЗ_ЗВУКА] А теперь рассмотрим,

2
00:00:06,617 --> 00:00:10,670
каким образом можно дождаться
окончания работы нескольких горутин,

3
00:00:10,670 --> 00:00:13,088
кроме использования каналов, конечно.

4
00:00:13,088 --> 00:00:18,347
В первом видео, как вы помните,
я использовал функцию Scanln()

5
00:00:18,347 --> 00:00:23,110
из пакета fmt для того, чтобы
дождаться какого-то ввода из консоли.

6
00:00:23,110 --> 00:00:26,129
Это удобно для демонстрации
во время курса,

7
00:00:26,129 --> 00:00:29,790
однако не подойдёт для
применения в реальной работе.

8
00:00:29,790 --> 00:00:33,450
Там дожидаться нужно
каким-то другим образом.

9
00:00:33,450 --> 00:00:39,478
Для этого в Go в пакете sync
есть специальная структура,

10
00:00:39,478 --> 00:00:41,720
называется WaitGroup().

11
00:00:41,720 --> 00:00:46,638
WaitGroup() — это довольно простая вещь.

12
00:00:46,638 --> 00:00:53,840
Вы добавляете туда в счётчик какое-то
количество worker'ов либо ещё чего-то,

13
00:00:53,840 --> 00:00:59,112
что будет уменьшаться в процессе работы,
а после этого

14
00:00:59,112 --> 00:01:04,921
вы говорите: wg — в данном случае
так называется моя wait-группа,

15
00:01:04,921 --> 00:01:10,190
wait, то есть «подожди,
пока этот счётчик не уменьшится в ноль».

16
00:01:10,190 --> 00:01:13,405
Давайте посмотрим ещё детальнее.

17
00:01:13,405 --> 00:01:17,671
Смотрите, я создал ссылку на wait group.

18
00:01:17,671 --> 00:01:23,436
В связи с реализацией эту структуру
не надо копировать после создания,

19
00:01:23,436 --> 00:01:26,490
то есть всегда создавайте её по указателю.

20
00:01:26,490 --> 00:01:31,460
Теперь я начинаю запускать свои горутины.

21
00:01:31,460 --> 00:01:36,920
Перед запуском горутины я
обязательно кладу её в wait-группу,

22
00:01:36,920 --> 00:01:39,100
то есть делаю wg.Add(1).

23
00:01:39,100 --> 00:01:44,280
Почему это нужно сделать там,
где вы запускаете горутину,

24
00:01:44,280 --> 00:01:48,810
а не в самой горутине,
что вроде бы было бы логично?

25
00:01:48,810 --> 00:01:56,105
Дело в том, что горутина может не
запуститься до того, как завершится цикл.

26
00:01:56,105 --> 00:01:59,980
Она может уже после этого
начать выполняться.

27
00:01:59,980 --> 00:02:05,561
А я при этом дойду до wg.Wait(), и увижу,
что там ещё никого нет, и завершу работу.

28
00:02:05,561 --> 00:02:08,082
Это будет немножко не то, что вы ожидаете.

29
00:02:08,082 --> 00:02:10,742
Поэтому добавлять в wait-группу нужно там,

30
00:02:10,742 --> 00:02:15,593
где вы запускаете корутину,
перед запуском её.

31
00:02:15,593 --> 00:02:23,373
Итак, я добавил что-то, добавил единицу
в wait-группу, запустил worker.

32
00:02:23,373 --> 00:02:29,867
Внутри worker'а я сразу же делаю defer,
отложенный вызов,

33
00:02:29,867 --> 00:02:35,576
и вызываю функцию,
вызываю метод Done у структуры WaitGroup.

34
00:02:35,576 --> 00:02:39,280
Метод Done просто
уменьшает счётчик внутри.

35
00:02:39,280 --> 00:02:42,844
Через defer,
через отложенное выполнение я знаю,

36
00:02:42,844 --> 00:02:48,190
что я выполню его в любом случае,
когда моя горутина завершится.

37
00:02:48,190 --> 00:02:53,275
Таким образом, когда worker отрабатывает
своё, выполняется wg.Done(),

38
00:02:53,275 --> 00:02:56,781
счётчик уменьшается на единицу,
и в итоге сходится к нулю.

39
00:02:56,781 --> 00:02:58,842
Давайте посмотрим, как это работает.

40
00:02:58,842 --> 00:03:02,310
Хотя ничего нового вы не увидите
по сравнению с первой программой.

41
00:03:02,310 --> 00:03:11,200
[ЗВУК] [ЗВУК] Смотрите,

42
00:03:11,200 --> 00:03:15,164
отработали все наши горутины,

43
00:03:15,164 --> 00:03:21,301
и программа автоматически завершилась,
без того чтобы я нажимал какую-то клавишу.

44
00:03:21,301 --> 00:03:23,270
Это называется WaitGroup.