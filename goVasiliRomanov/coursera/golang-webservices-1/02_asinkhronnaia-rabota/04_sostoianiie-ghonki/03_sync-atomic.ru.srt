1
00:00:00,000 --> 00:00:05,364
[БЕЗ_ЗВУКА] В

2
00:00:05,364 --> 00:00:12,440
предыдущем примере мы разобрали mutex
как средство для избегания гонки,

3
00:00:12,440 --> 00:00:19,268
когда мы работаем с одной переменной
из разных системных потоков.

4
00:00:19,268 --> 00:00:24,365
В этом примере мы разберем
примитив под названием atomic.

5
00:00:24,365 --> 00:00:29,470
Дело в том, что mutex — это такой большой,
«жирный» примитив,

6
00:00:29,470 --> 00:00:36,990
большая, «жирная» конструкция
для синхронизации мощных кусков.

7
00:00:36,990 --> 00:00:40,152
Но иногда нам бывает нужно всего лишь

8
00:00:40,152 --> 00:00:44,315
атомарно инкрементировать
просто переменную.

9
00:00:44,315 --> 00:00:46,510
Давайте начнем с примера.

10
00:00:46,510 --> 00:00:50,262
У нас есть программа,
которая запускает тысячу горутин.

11
00:00:50,262 --> 00:00:53,270
Каждая горутина просто
увеличивает счетчик.

12
00:00:53,270 --> 00:01:00,840
Мы ожидаем, что по результатам работы
программы в нашем счетчике будет 1000.

13
00:01:00,840 --> 00:01:02,478
Однако из-за того,

14
00:01:02,478 --> 00:01:07,850
что счетчики инкрементируются из
разных горутин, это будет не так.

15
00:01:07,850 --> 00:01:12,980
Для начала давайте запустим.

16
00:01:12,980 --> 00:01:18,110
Итак, у нас получилось всего 950,
хотя горутин была вызвана тысяча.

17
00:01:18,110 --> 00:01:23,815
Получилось это потому, что,
как я уже говорил, мы инкрементировали

18
00:01:23,815 --> 00:01:27,470
этот счетчик их разных горутин и
попали как раз на состояние гонки.

19
00:01:27,470 --> 00:01:32,240
Как сделать атомарный счетчик?

20
00:01:32,240 --> 00:01:41,467
Для этого пользуемся атомиком из пакета,
как ни странно, sync/atomic.

21
00:01:41,467 --> 00:01:46,640
Итак, нам нужно подрубить этот пакет,
и теперь

22
00:01:46,640 --> 00:01:52,017
мы уже не инкрементируем счетчик напрямую,

23
00:01:52,017 --> 00:01:56,890
а используем функцию из этого пакета,
то есть из пакета atomic.

24
00:01:56,890 --> 00:02:01,263
Мы вызываем функцию AddInt32,
куда передаем адрес нашей

25
00:02:01,263 --> 00:02:05,655
переменной и то значение,
на которое мы хотим увеличить.

26
00:02:05,655 --> 00:02:08,700
Больше ничем программа не отличается.

27
00:02:08,700 --> 00:02:13,359
Давайте ее запустим.

28
00:02:13,359 --> 00:02:15,570
Отлично!

29
00:02:15,570 --> 00:02:19,498
Мы получили ожидаемый результат,
что количество операций,

30
00:02:19,498 --> 00:02:22,620
которое выдала нам программа, равно 1000.

31
00:02:22,620 --> 00:02:26,850
Atomic быстрее мьютекса.

32
00:02:26,850 --> 00:02:34,096
На самом деле внутри мьютекса встроен
atomic как более низкоуровневый примитив.

33
00:02:34,096 --> 00:02:38,440
В пакете atomic довольно
много разных функций

34
00:02:38,440 --> 00:02:43,815
для атомарных

35
00:02:43,815 --> 00:02:50,340
операций со счетчиками либо
для сравнения и замены.

36
00:02:50,340 --> 00:02:55,689
Если вы активно занимаетесь
многопроцессорной разработкой,

37
00:02:55,689 --> 00:02:59,210
то очень рекомендуется посмотреть и знать,
что он может.