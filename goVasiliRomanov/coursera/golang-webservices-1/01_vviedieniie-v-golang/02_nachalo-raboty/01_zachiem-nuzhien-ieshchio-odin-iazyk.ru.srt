1
00:00:00,000 --> 00:00:05,577
[БЕЗ_ЗВУКА] Итак,

2
00:00:05,577 --> 00:00:09,960
прежде, чем мы перейдём
непосредственно к языку,

3
00:00:09,960 --> 00:00:14,782
стоит понять,
для чего вообще нужно было делать ещё один

4
00:00:14,782 --> 00:00:19,832
язык программирования и для
каких задач его разрабатывали.

5
00:00:19,832 --> 00:00:22,210
Начнём с небольшой истории.

6
00:00:22,210 --> 00:00:25,675
Язык Go был разработан Кеном Томпсоном,

7
00:00:25,675 --> 00:00:30,130
которых известен вам по
операционной системе UNIX,

8
00:00:30,130 --> 00:00:34,701
и также он является одним из соавторов
кодировки UTF-8, Робом Пайком,

9
00:00:34,701 --> 00:00:38,050
который тоже принимал
участие в разработке UTF-8,

10
00:00:38,050 --> 00:00:42,760
а также участвовал в разработке
операционных система Plan9 и Inferno.

11
00:00:42,760 --> 00:00:47,602
И Роберт Гризмер,
который занимался Java HotSpot'ом,

12
00:00:47,602 --> 00:00:52,155
языком Swazall и распределёнными
системами в Google.

13
00:00:52,155 --> 00:00:57,148
Первая версия языка была
доступна публике в 2009 году,

14
00:00:57,148 --> 00:01:02,830
и в 2012 году вышла версия 1.0,
то есть это очень молодой язык.

15
00:01:02,830 --> 00:01:07,540
Go разрабатывался с
прицелом на эффективность.

16
00:01:07,540 --> 00:01:12,130
Во-первых, это эффективность работы
непосредственно самой программы.

17
00:01:12,130 --> 00:01:18,563
В первую очередь, это эффективная
утилизация многопроцессорных систем.

18
00:01:18,563 --> 00:01:23,440
Дело в том, что в начале нулевых годов
количество физических ядер в процессорах

19
00:01:23,440 --> 00:01:24,680
сильно выросло.

20
00:01:24,680 --> 00:01:29,780
При этом очень многие языки,
которые проектировались в 90-х годах,

21
00:01:29,780 --> 00:01:35,540
они были нацелены на работу в условиях,
когда у вас есть только одно ядро.

22
00:01:35,540 --> 00:01:38,526
В этом плане Go очень хорош,

23
00:01:38,526 --> 00:01:43,574
потому что он очень хорошо
масштабируется по ядрам процессора,

24
00:01:43,574 --> 00:01:47,700
что позволяет писать очень эффективные,
очень нагруженные сервисы.

25
00:01:47,700 --> 00:01:51,620
Также в Go встроена
эффективность прямо из коробки.

26
00:01:51,620 --> 00:01:54,620
То есть она основана не на Callback'ах.

27
00:01:54,620 --> 00:01:58,508
Ну и Go вообще проектировался для
обработки большого количества

28
00:01:58,508 --> 00:02:00,070
конкурентных запросов.

29
00:02:00,070 --> 00:02:05,010
Конкурентный запрос — это значит
много маленьких запросов, которые

30
00:02:05,010 --> 00:02:09,040
идут одновременно в вашу программу,
но которые абсолютно независимы.

31
00:02:09,040 --> 00:02:16,000
Вторая задача при разработке Go
стояла в эффективности программиста.

32
00:02:16,000 --> 00:02:21,050
В Go очень простой синтаксис,
очень мало магии и синтаксического сахара.

33
00:02:21,050 --> 00:02:26,985
Это позволяет писать
очень простые программы,

34
00:02:26,985 --> 00:02:33,860
простые в плане понимания последующего,
и несколько уменьшить груз legacy,

35
00:02:33,860 --> 00:02:38,240
потому что программы, как правило,
живут гораздо дольше, чем мы думаем.

36
00:02:38,240 --> 00:02:43,870
Также именно для этих целей в Go задан
жёсткий стиль форматирования кода,

37
00:02:43,870 --> 00:02:47,840
и создан инструмент для
автоматического форматирования.

38
00:02:47,840 --> 00:02:52,856
Как правило, этот инструмент
встраивается прямо в среду разработки,

39
00:02:52,856 --> 00:02:57,378
и при сохранении файла он сразу
приводит стиль к нужному виду.

40
00:02:57,378 --> 00:02:59,820
В Go очень быстрая компиляция.

41
00:02:59,820 --> 00:03:04,022
Это значит, что для того чтобы проверить,
работает программа или нет,

42
00:03:04,022 --> 00:03:06,900
программисту не придётся ждать 20 минут,
пока она соберётся.

43
00:03:06,900 --> 00:03:12,635
В Go очень удобная работа с зависимостями.

44
00:03:12,635 --> 00:03:18,370
Весь код лежит в одном месте и при сборке
собирается в статический бинарник,

45
00:03:18,370 --> 00:03:22,240
что позволяет ему не зависеть
от каких-то внешних пакетов,

46
00:03:22,240 --> 00:03:27,860
и это позволяет избежать
конфликтов с другими программами.

47
00:03:27,860 --> 00:03:33,640
Ну и вообще в каких сферах применяется Go?

48
00:03:33,640 --> 00:03:40,050
По опросам главного совета Go,
проведённого в 2016 году

49
00:03:40,050 --> 00:03:45,900
основными сферами применения Go являются
web-разработка, то есть любые web-сервисы,

50
00:03:45,900 --> 00:03:51,450
также системы мониторинга и
разного рода системные утилиты.

51
00:03:51,450 --> 00:03:56,451
Go может плохо подойти в тех местах,

52
00:03:56,451 --> 00:04:00,331
где вам нужен очень жёсткий
контроль над памятью и недопустимы

53
00:04:00,331 --> 00:04:04,690
практически никакие паузы, потому что
Go — это язык со сборщиком мусора.

54
00:04:04,690 --> 00:04:08,840
Конечно, там нет таких пауз,
как stop-the-world,

55
00:04:08,840 --> 00:04:13,453
которые вообще надолго вешают всё,
однако они там есть,

56
00:04:13,453 --> 00:04:18,200
поэтому в системах реального времени
Go вам будет тяжело применить.

57
00:04:18,200 --> 00:04:21,252
Также если у вас очень мало памяти,
например,

58
00:04:21,252 --> 00:04:25,390
это какие-то встраиваемые устройства,
Internet of Things,

59
00:04:25,390 --> 00:04:30,065
то Go, возможно,
будет не самым лучшим выбором.

60
00:04:30,065 --> 00:04:35,015
Но для web'а Go — это очень хороший выбор.

61
00:04:35,015 --> 00:04:38,892
Ну а теперь давайте перейдём
к технике и посмотрим,

62
00:04:38,892 --> 00:04:41,570
как выглядит ваша первая программа в Go.