1
00:00:00,000 --> 00:00:05,315
[БЕЗ СЛОВ] В этом

2
00:00:05,315 --> 00:00:11,087
видео мы проговорим про
систему пакетов в go,

3
00:00:11,087 --> 00:00:16,565
а также про область видимости
ваших переменных в этих пакетах.

4
00:00:16,565 --> 00:00:20,480
Итак, давайте сначала
рассмотрим базовую структуру.

5
00:00:20,480 --> 00:00:24,860
Go работает с так называемой
системной переменной go pass.

6
00:00:24,860 --> 00:00:29,498
Это адрес директории, внутри которой

7
00:00:29,498 --> 00:00:34,714
должны находиться некоторые
специализированные директории.

8
00:00:34,714 --> 00:00:37,830
Первая из них — это папка bin,

9
00:00:37,830 --> 00:00:43,580
в нее кладутся собранные бинарники,
то есть либо .exe, либо l-файлы.

10
00:00:43,580 --> 00:00:48,581
pkg, в pkg кладутся
временные объектные файлы,

11
00:00:48,581 --> 00:00:57,090
а src непосредственно содержит
исходники вашей программы.

12
00:00:57,090 --> 00:01:01,875
Например, весь курс у меня

13
00:01:01,875 --> 00:01:06,050
лежит в папке coursera.

14
00:01:06,050 --> 00:01:11,994
Также если вы вдруг клонируете
какой-то пакет, какую-то библиотеку,

15
00:01:11,994 --> 00:01:19,550
например, с github,
то она также будет копироваться в src.

16
00:01:19,550 --> 00:01:23,825
Например, github, rvasily и examplerepo

17
00:01:23,825 --> 00:01:28,100
положатся вот по этому пути
в соответствующую папку.

18
00:01:28,100 --> 00:01:32,635
Но вот давайте теперь рассмотрим
непосредственно область видимости.

19
00:01:32,635 --> 00:01:37,170
У меня есть папка coursera,
visibility и в ней пакет person,

20
00:01:37,170 --> 00:01:40,933
там лежит два файла: person.go,
func.go и main,

21
00:01:40,933 --> 00:01:44,370
который непосредственно
собирает программу.

22
00:01:44,370 --> 00:01:50,207
Файл main имеет package main,
потому что тот пакет,

23
00:01:50,207 --> 00:01:54,570
который собирается,
у него жестко зафиксировано имя.

24
00:01:54,570 --> 00:02:00,475
person уже находится в
папке в пакете person.

25
00:02:00,475 --> 00:02:04,890
Обратите внимание,
вот так называется пакет — person.

26
00:02:04,890 --> 00:02:10,929
То есть вы не должны прописывать
весь путь, нет, только person,

27
00:02:10,929 --> 00:02:15,371
вот он выделен,
поэтому мой пакет называется person,

28
00:02:15,371 --> 00:02:18,630
и в нем есть какие-то переменные,
какая-то структура.

29
00:02:18,630 --> 00:02:21,980
Итак, в go очень простое правило.

30
00:02:21,980 --> 00:02:26,905
Если переменная,
структура, поле структуры,

31
00:02:26,905 --> 00:02:32,883
константа, функция начинается
с заглавной буквы,

32
00:02:32,883 --> 00:02:36,280
это значит,
что эта сущность экспортируемая,

33
00:02:36,280 --> 00:02:40,228
то есть она доступна для
обращения из других пакетов.

34
00:02:40,228 --> 00:02:43,965
Если же она начинается со строчной,
это значит,

35
00:02:43,965 --> 00:02:47,710
что эта сущность принадлежит
только этому пакету.

36
00:02:47,710 --> 00:02:50,149
Обратите внимание.

37
00:02:50,149 --> 00:02:54,524
Пакет состоит не из файла,
а из директорий.

38
00:02:54,524 --> 00:03:00,410
То есть одна директория, одна директория,
person, это и есть пакет.

39
00:03:00,410 --> 00:03:04,238
Следовательно, все,
что я объявлю в файле person.go,

40
00:03:04,238 --> 00:03:10,260
будет доступно и из файла func.go,
потому что они составляют один пакет.

41
00:03:10,260 --> 00:03:12,214
Давайте посмотрим.

42
00:03:12,214 --> 00:03:17,835
Вот у меня экспортируемая переменная,
вот неэкспортируемая.

43
00:03:17,835 --> 00:03:21,320
Она доступна только внутри этой программы.

44
00:03:21,320 --> 00:03:27,158
Вот структура person, ID и name
эти поля структуры экспортируемы.

45
00:03:27,158 --> 00:03:31,250
То есть вы можете обратиться
к ним из другой программы,

46
00:03:31,250 --> 00:03:35,700
из другого пакета,
а secret — это приватное поле,

47
00:03:35,700 --> 00:03:40,110
вы не можете обращаться к
нему из других пакетов,

48
00:03:40,110 --> 00:03:44,535
только из функций этого пакета.

49
00:03:44,535 --> 00:03:48,960
Даже не методов этой структуры,
а вообще любых функций этого пакета.

50
00:03:48,960 --> 00:03:53,735
Вот, например,
UpdateSecret может обновить секрет.

51
00:03:53,735 --> 00:03:58,510
В функциях у меня лежит функция
для создания новой персоны,

52
00:03:58,510 --> 00:03:59,874
и получение secret.

53
00:03:59,874 --> 00:04:06,562
Обратите внимание: get secret не является
методом персоны, это просто функция,

54
00:04:06,562 --> 00:04:12,106
но тем не менее я могу
обратиться к приватному полю.

55
00:04:12,106 --> 00:04:13,890
Так же импорты.

56
00:04:13,890 --> 00:04:17,228
Импорт распространяется на файл.

57
00:04:17,228 --> 00:04:22,336
То есть, если я напишу импорт
в person.go вот здесь,

58
00:04:22,336 --> 00:04:25,077
моя программа не соберется,

59
00:04:25,077 --> 00:04:30,360
потому что у меня есть
неиспользуемый импорт fmt.

60
00:04:30,360 --> 00:04:34,888
Я не могу оставлять
неиспользуемые импорты.

61
00:04:34,888 --> 00:04:37,910
Импорт определяется на файл.

62
00:04:37,910 --> 00:04:42,600
То есть, если я хочу пользоваться fmt, то
я должен определить его строго в func.go

63
00:04:42,600 --> 00:04:48,840
При попытке обращения к приватным полям,
ваша программа просто не скомпилируется.

64
00:04:48,840 --> 00:04:58,257
Например, смотрите,

65
00:04:58,257 --> 00:05:02,938
visibility\main.go secret
unidentified (cannot

66
00:05:02,938 --> 00:05:05,350
refer to unexported field or method).

67
00:05:05,350 --> 00:05:09,569
То есть я даже никак не
могу туда достучаться.

68
00:05:09,569 --> 00:05:13,985
Поэтому придется
воспользоваться вспомогательной

69
00:05:13,985 --> 00:05:17,930
функцией GetSecret,
которая мне его получит.

70
00:05:17,930 --> 00:05:23,966
Еще хочется отметить,

71
00:05:23,966 --> 00:05:31,507
что в go не принято дробить вашу программу
на миллион маленьких пакетов внутри,

72
00:05:31,507 --> 00:05:35,780
чтобы внутри пакета лежал
всего лишь один файл.

73
00:05:35,780 --> 00:05:42,660
Правильным подходом считается,
что у вас большие пакеты.

74
00:05:42,660 --> 00:05:48,660
Не то чтобы вы вообще сваливаете
всю-всю-всю вашу программу в пакет main,

75
00:05:48,660 --> 00:05:53,442
хотя такое тоже бывает, но тем не
менее бесконечно дробить не надо,

76
00:05:53,442 --> 00:05:56,970
это будет не так удобно,
и в целом не приветствуется.

77
00:05:56,970 --> 00:06:02,600
[БЕЗ СЛОВ] Также в go в последнее

78
00:06:02,600 --> 00:06:08,470
время набирает оборот,
что когда вы работаете с проектом,

79
00:06:08,470 --> 00:06:13,290
у вас скорее всего не один проект,
и там будет не один go pass.

80
00:06:13,290 --> 00:06:17,659
Поэтому там используется Vendor, папка,

81
00:06:17,659 --> 00:06:22,562
в которой лежат ваши зависимости,
и используется специальный инструмент,

82
00:06:22,562 --> 00:06:27,074
например, gb, либо dep,
которые занимаются управлением этих

83
00:06:27,074 --> 00:06:31,270
зависимостей и подтягивают
их в соответствующую папку.

84
00:06:31,270 --> 00:06:36,180
Но это мы будет рассматривать позже.