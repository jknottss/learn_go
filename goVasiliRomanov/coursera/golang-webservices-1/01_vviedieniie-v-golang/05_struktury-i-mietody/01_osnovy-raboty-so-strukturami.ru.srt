1
00:00:00,000 --> 00:00:06,080
[БЕЗ_ЗВУКА] В этом видео

2
00:00:06,080 --> 00:00:11,246
мы рассмотрим такой тип составных данных,
как структуры.

3
00:00:11,246 --> 00:00:15,847
По мере роста вашей программы бывает
неудобно моделировать сущности набором

4
00:00:15,847 --> 00:00:18,622
скаляр, хочется объединить
их как-то плотнее,

5
00:00:18,622 --> 00:00:21,088
чтобы они представляли
собой единую сущность.

6
00:00:21,088 --> 00:00:23,380
Структуры — это как раз такое объединение.

7
00:00:23,380 --> 00:00:27,670
Давайте рассмотрим, как они объявляются.

8
00:00:27,670 --> 00:00:31,961
Структуры, как и все остальные типы в Go,
объявляются через ключевое слово type,

9
00:00:31,961 --> 00:00:36,555
потом идёт имя этого типа struct,

10
00:00:36,555 --> 00:00:40,600
ключевое слово, и в фигурных скобках
объявляются поля этой структуры.

11
00:00:40,600 --> 00:00:44,677
Полями структуры может
быть абсолютно любой тип,

12
00:00:44,677 --> 00:00:49,595
который есть в Go, например,
даже string, даже функция,

13
00:00:49,595 --> 00:00:54,043
либо другая структура,
например, Person на строчке 15.

14
00:00:54,043 --> 00:00:57,321
Давайте посмотрим,
как инициализируются структуры.

15
00:00:57,321 --> 00:00:59,984
Для того чтобы инициализировать структуры,

16
00:00:59,984 --> 00:01:04,578
мы можем воспользоваться либо
полным форматом объявлений,

17
00:01:04,578 --> 00:01:09,390
когда в фигурных скобках мы
указываем нужные нам поля,

18
00:01:09,390 --> 00:01:13,214
при этом мы можем
пропустить какие-то поля,

19
00:01:13,214 --> 00:01:16,480
и тогда они примут значения по умолчанию.

20
00:01:16,480 --> 00:01:21,609
Либо же мы можем воспользоваться
краткой формой объявления,

21
00:01:21,609 --> 00:01:26,048
когда нам не нужно указывать все поля
структуры, имена всех полей структуры,

22
00:01:26,048 --> 00:01:30,150
но при этом нам нужно указать все поля
структуры, мы не можем их пропускать.

23
00:01:30,150 --> 00:01:33,202
Обращение к полям структуры
происходит через точку.

24
00:01:33,202 --> 00:01:37,570
Давайте посмотрим,
что нам выведет эта программа.

25
00:01:37,570 --> 00:01:43,710
[ЗВУК] Смотрите.

26
00:01:43,710 --> 00:01:47,810
Изначально мы инициализировали структуру,

27
00:01:47,810 --> 00:01:53,470
у которой поле Owner не было указано.

28
00:01:53,470 --> 00:01:58,158
И оно получилось значением по умолчанию,
то есть эта структура,

29
00:01:58,158 --> 00:02:01,750
у которой все её поля имеют
значение по умолчанию.

30
00:02:01,750 --> 00:02:04,251
Ноль для целых чисел и пустые строки.

31
00:02:04,251 --> 00:02:07,780
Потом позже мы инициализировали
её уже полноценно.

32
00:02:07,780 --> 00:02:12,616
Иногда бывает так,

33
00:02:12,616 --> 00:02:17,650
что мы хотим больше композиции.

34
00:02:17,650 --> 00:02:21,624
В Go нет ООП в классическом понимании,

35
00:02:21,624 --> 00:02:28,262
однако вся работа с объектами
в Go построена на композиции.

36
00:02:28,262 --> 00:02:31,970
Например, мы можем встроить
одну структуру в другую.

37
00:02:31,970 --> 00:02:37,430
Делается это так.

38
00:02:37,430 --> 00:02:40,342
В чем отличие Owner от Person?

39
00:02:40,342 --> 00:02:46,200
Дело в том, что Owner — это
какое-то свойство структуры,

40
00:02:46,200 --> 00:02:51,105
а встроенный, заэмбедженный Person —

41
00:02:51,105 --> 00:02:55,430
это уже не свойство структуры,
а часть самой структуры.

42
00:02:55,430 --> 00:03:00,240
И все поля Person являются
частью структуры Account.

43
00:03:00,240 --> 00:03:02,301
Давайте посмотрим.

44
00:03:02,301 --> 00:03:08,850
Например, вы можете обращаться
к этим полям непосредственно.

45
00:03:08,850 --> 00:03:15,390
Аккаунт, адрес.

46
00:03:15,390 --> 00:03:20,444
То есть Address является частью
поля структуры Person, но,

47
00:03:20,444 --> 00:03:25,040
поскольку мы встроили Person в Account,

48
00:03:25,040 --> 00:03:29,380
то мы можем обращаться к полям
Person непосредственно напрямую.

49
00:03:29,380 --> 00:03:34,860
Смотрите.

50
00:03:34,860 --> 00:03:40,340
У нас не объявлен Person,
давайте его объявим.

51
00:03:40,340 --> 00:03:45,420
А при объявлении Person'а
встроенной структуры,

52
00:03:45,420 --> 00:03:50,254
вам всё равно нужно
объявлять её через префикс.

53
00:03:50,254 --> 00:03:51,200
Вот так.

54
00:03:51,200 --> 00:03:59,200
[ЗВУК]

55
00:03:59,200 --> 00:04:03,885
Moscow.

56
00:04:03,885 --> 00:04:08,570
Москва.

57
00:04:08,570 --> 00:04:14,140
Теперь давайте выведем.

58
00:04:14,140 --> 00:04:16,660
Запятая.

59
00:04:16,660 --> 00:04:20,300
Вот вывелось.

60
00:04:20,300 --> 00:04:21,088
Москва.

61
00:04:21,088 --> 00:04:26,409
То есть вывелось поле встроенной
структуры, причём без того,

62
00:04:26,409 --> 00:04:31,413
чтобы я обращался к ней по префиксу.

63
00:04:31,413 --> 00:04:35,900
Но если у нас есть какие-то

64
00:04:35,900 --> 00:04:40,891
общие поля у структуры,
в которую встраиваем,

65
00:04:40,891 --> 00:04:45,970
и встраиваемые структуры,
то никакого конфликта не будет.

66
00:04:45,970 --> 00:04:49,200
Оба поля сохранятся.

67
00:04:49,200 --> 00:04:54,069
При этом при обращении к этому

68
00:04:54,069 --> 00:05:01,380
полю [ЗВУК]

69
00:05:01,380 --> 00:05:06,210
приоритет будет к

70
00:05:06,210 --> 00:05:12,255
наиболее верхнему полю структуры.

71
00:05:12,255 --> 00:05:18,300
rvasily — это

72
00:05:18,300 --> 00:05:24,144
поле Account, не поле Person,
а поле Account.

73
00:05:24,144 --> 00:05:27,529
Теперь, если же мы хотим
всё-таки обратиться

74
00:05:27,529 --> 00:05:32,310
к полю встроенной структуры Person,
мы должны явно это указать.

75
00:05:32,310 --> 00:05:39,406
[ЗВУК] Теперь вывелся Василий.

76
00:05:39,406 --> 00:05:42,650
Давайте ещё раз посмотрим, в чём отличие.

77
00:05:42,650 --> 00:05:48,090
[ЗВУК] Сначала

78
00:05:48,090 --> 00:05:53,872
у нас выводится поле,
которое мы объявили в типе Account,

79
00:05:53,872 --> 00:05:59,778
затем у нас выводится поле Name,
которое мы объявили в структуре Person.

80
00:05:59,778 --> 00:06:05,340
При этом наша структура Account
содержит оба этих поля.

81
00:06:05,340 --> 00:06:10,778
Если бы в нашей структуре
Account не было поля, например,

82
00:06:10,778 --> 00:06:16,230
вот так, то тогда обращение

83
00:06:16,230 --> 00:06:23,920
к этому полю сразу вело бы
к встроенной структуре.