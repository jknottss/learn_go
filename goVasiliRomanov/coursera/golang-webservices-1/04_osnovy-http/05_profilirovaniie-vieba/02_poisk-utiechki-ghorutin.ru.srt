1
00:00:00,000 --> 00:00:09,514
[БЕЗ_ЗВУКА] Еще один мощный инструмент,
который предоставляет метод pprof,

2
00:00:09,514 --> 00:00:13,010
это возможность снять стек-трейс всех
горутин, которые есть в программе.

3
00:00:13,010 --> 00:00:17,560
Давайте рассмотрим это на
примере утечки горутин.

4
00:00:17,560 --> 00:00:21,451
У нас есть уже знакомая
вам структура Post,

5
00:00:21,451 --> 00:00:26,568
есть функция getPost,
которая в цикле делает слайс этих

6
00:00:26,568 --> 00:00:32,367
структур и записывает их в канал,
который нам приходит извне.

7
00:00:32,367 --> 00:00:38,675
Есть handle, который запускает
горутину для получения этих постов.

8
00:00:38,675 --> 00:00:42,810
Но, обратите внимание,
он не вычитывает их,

9
00:00:42,810 --> 00:00:47,963
то есть в этом случае горутина
начнет бесконечно ожидать,

10
00:00:47,963 --> 00:00:53,987
пока из нее кто-то вычитает,
и это может привести к утечке памяти.

11
00:00:53,987 --> 00:00:57,486
В случае, если у вас вдруг
программа может начать расти,

12
00:00:57,486 --> 00:01:00,011
и вы подозреваете где-то утечку горутин,
например,

13
00:01:00,011 --> 00:01:03,180
у вас есть график, который показывает,
что горутины растут,

14
00:01:03,180 --> 00:01:08,409
можно попробовать снять стек-трейс
всех горутин и узнать, чего они ждут.

15
00:01:08,409 --> 00:01:11,750
Давайте попробуем это сделать.

16
00:01:11,750 --> 00:01:17,300
Сначала дадим небольшую нагрузку,
чтобы у нас натекло.

17
00:01:17,300 --> 00:01:19,205
Итак, запустили.

18
00:01:19,205 --> 00:01:20,213
Отлично!

19
00:01:20,213 --> 00:01:26,200
Теперь я выполняю снятие трейса горутин,

20
00:01:26,200 --> 00:01:32,238
то есть я обращаюсь к URL
debug/pprof/goroutine с параметрами

21
00:01:32,238 --> 00:01:36,800
debug=2, чтобы получить полный стек-трейс,
и записываю их в файлик goroutines.

22
00:01:36,800 --> 00:01:39,234
Запустили, он быстро все скачал.

23
00:01:39,234 --> 00:01:41,920
Теперь открываем этот файл и смотрим.

24
00:01:41,920 --> 00:01:46,009
Что-то там есть, есть,
есть, есть, есть и — пошло,

25
00:01:46,009 --> 00:01:50,087
посмотрите: абсолютно одинаковые записи,

26
00:01:50,087 --> 00:01:55,244
прямо совсем одинаковые и очень много.

27
00:01:55,244 --> 00:01:57,297
Что тут написано?

28
00:01:57,297 --> 00:02:02,476
Горутина номер такой-то ожидает
отправки в канал на какой-то строчке.

29
00:02:02,476 --> 00:02:06,415
Это находится на строчке 24 и дальше, 29.

30
00:02:06,415 --> 00:02:09,277
Что находится на строчке 29?

31
00:02:09,277 --> 00:02:10,550
HandleLeak.

32
00:02:10,550 --> 00:02:17,465
На строчке 29 как раз у нас
вызов функций наших handleLeak.

33
00:02:17,465 --> 00:02:18,820
А на строчке 24?

34
00:02:18,820 --> 00:02:22,899
А на строчке 24 как раз канал,

35
00:02:22,899 --> 00:02:26,800
как раз запись в канал,
на котором эта горутина висит.

36
00:02:26,800 --> 00:02:32,341
То есть используя полный стек-трейс,
мы можем найти утечку опять-таки

37
00:02:32,341 --> 00:02:38,270
без синтетической нагрузки,
прямо во время реальной боевой нагрузки.