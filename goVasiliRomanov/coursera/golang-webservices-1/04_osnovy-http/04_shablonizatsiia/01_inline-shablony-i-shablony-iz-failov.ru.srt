1
00:00:00,000 --> 00:00:04,576
[БЕЗ_ЗВУКА] В

2
00:00:04,576 --> 00:00:08,930
этом видео мы рассмотрим
работу с шаблонами,

3
00:00:08,930 --> 00:00:13,950
которые предоставляет
стандартная библиотека Go.

4
00:00:13,950 --> 00:00:18,411
Шаблонизация в виде отдельного
шаблона — это давно...

5
00:00:18,411 --> 00:00:20,908
ну как бы признак хорошего тона.

6
00:00:20,908 --> 00:00:27,007
Уже никто не мешает код вместе с логикой
и не выводит его построчно по одному тегу

7
00:00:27,007 --> 00:00:33,966
на экран, как это было давным-давно
в темные времена веб-разработки.

8
00:00:33,966 --> 00:00:40,297
Итак, шаблоны в Go есть
в нескольких вариантах.

9
00:00:40,297 --> 00:00:43,645
Первый, из которых мы
рассмотрим — это text/template.

10
00:00:43,645 --> 00:00:46,049
text/template — это простые шаблоны.

11
00:00:46,049 --> 00:00:48,730
Они все выводят, как есть,
как мы им скажем.

12
00:00:48,730 --> 00:00:53,490
Для начала давайте определим
параметры шаблонизатора.

13
00:00:53,490 --> 00:01:00,625
Вот у меня такие параметры,
там есть URL и Browser, обе строчки.

14
00:01:00,625 --> 00:01:02,536
Сам шаблон,

15
00:01:02,536 --> 00:01:07,763
в котором я вывожу непосредственно
браузер и URL, который передали.

16
00:01:07,763 --> 00:01:10,689
Для доступа к переменным мне нужно...

17
00:01:10,689 --> 00:01:14,510
я использую двойные
фигурные скобки и точку.

18
00:01:14,510 --> 00:01:19,700
Точка — это текущий элемент,
с которым мы работаем.

19
00:01:19,700 --> 00:01:24,327
В данном случае текущий элемент — это
непосредственно вот этот tplParams,

20
00:01:24,327 --> 00:01:25,751
который я передам.

21
00:01:25,751 --> 00:01:29,505
В случае, если у нас будет
какой-то цикл по значениям,

22
00:01:29,505 --> 00:01:32,140
то точка будет являться элементом цикла.

23
00:01:32,140 --> 00:01:36,810
Итак, теперь давайте скомпилируем.

24
00:01:36,810 --> 00:01:40,200
В этом месте мы компилируем шаблон.

25
00:01:40,200 --> 00:01:41,760
Мы делаем это не очень быстро,

26
00:01:41,760 --> 00:01:46,292
потому что компилируем его на каждый вызов
http реквеста, но для примера нам хватит.

27
00:01:46,292 --> 00:01:50,430
Теперь создадим параметры, используя то,
что нам пришло из браузера.

28
00:01:50,430 --> 00:01:58,337
И непосредственно запустим,
«экспанднем» шаблон.

29
00:01:58,337 --> 00:02:02,932
Тут я передаю ResponseWriter туда,
то есть результат экспана

30
00:02:02,932 --> 00:02:07,806
шаблона будет передан сразу в браузер,
и параметры.

31
00:02:07,806 --> 00:02:09,150
Запускаем.

32
00:02:09,150 --> 00:02:18,330
[ЗВУК] Запустилось.

33
00:02:18,330 --> 00:02:19,146
Пробуем.

34
00:02:19,146 --> 00:02:19,962
Отлично.

35
00:02:19,962 --> 00:02:23,548
Он мне вывел браузер,
какой у меня есть, и URL,

36
00:02:23,548 --> 00:02:26,115
на котором я нахожусь,
в данном случае корень.

37
00:02:26,115 --> 00:02:29,320
Если я попробую какой-то другой URL,
например, вот так,

38
00:02:29,320 --> 00:02:33,250
то он уже будет иметь другое значение.

39
00:02:33,250 --> 00:02:37,510
Но это простые текстовые шаблоны,

40
00:02:37,510 --> 00:02:42,950
которые хороши в случаях, когда нам не
надо ничего эскейпить и нет возможности

41
00:02:42,950 --> 00:02:47,900
передать какие-то лишние данные
в шаблон от пользователя.

42
00:02:47,900 --> 00:02:51,122
В этом примере мы
рассмотрим http/template.

43
00:02:51,122 --> 00:02:55,880
http/template, он несколько более сложен,
чем text/template,

44
00:02:55,880 --> 00:03:00,392
потому что он добавляет необходимое
экранирование к вводимым символам,

45
00:03:00,392 --> 00:03:04,703
причем он знает, где это,
какое экранирование должно быть.

46
00:03:04,703 --> 00:03:09,657
То есть в URL-ах он сделает URL escape,

47
00:03:09,657 --> 00:03:13,123
в HTML он заэскейпит все HTML сущности,

48
00:03:13,123 --> 00:03:18,343
чтобы нельзя было сделать какой-нибудь
XSS Ну и также давайте мы

49
00:03:18,343 --> 00:03:23,677
будем экспандить не из
подготовленного куска

50
00:03:23,677 --> 00:03:28,670
внутри нашего кода, а из внешнего файла.

51
00:03:28,670 --> 00:03:32,630
Итак, вот у нас есть функция main.

52
00:03:32,630 --> 00:03:34,325
В данном...

53
00:03:34,325 --> 00:03:36,471
На строчке 16 мы парсим шаблон.

54
00:03:36,471 --> 00:03:40,721
Мы парсим его один раз при старте сервера,
users.html.

55
00:03:40,721 --> 00:03:43,400
Создаем пользователей.

56
00:03:43,400 --> 00:03:47,850
Ну, у нас будет какой-то небольшой кусок,
небольшой объем пользователей,

57
00:03:47,850 --> 00:03:52,300
то есть юзер имеет ID,
имя и флаг, он активен или нет.

58
00:03:52,300 --> 00:03:53,378
Вот.
Итак,

59
00:03:53,378 --> 00:03:59,388
обратите внимание: на строчке 20 у
Ивана имя заключено в тег какой-то.

60
00:03:59,388 --> 00:04:03,570
По идее, это должно отобразиться,
но это будет не так.

61
00:04:03,570 --> 00:04:08,680
Ну и теперь мы уже будем
экспандить этот шаблон.

62
00:04:08,680 --> 00:04:12,028
Вот наша функция,
которая будет вызываться.

63
00:04:12,028 --> 00:04:12,999
Что мы делаем?

64
00:04:12,999 --> 00:04:17,845
Мы говорим: tmpl.Execute, что нужно
сделать шаблон из того, что мы передали,

65
00:04:17,845 --> 00:04:21,191
передаем туда Writer,
в качестве параметра я не использую

66
00:04:21,191 --> 00:04:25,050
заранее подготовленную структуру,
а определяю прямо на месте.

67
00:04:25,050 --> 00:04:26,120
Вот здесь.

68
00:04:26,120 --> 00:04:31,480
То есть и сразу же создаю
экземпляр этой структуры вот тут,

69
00:04:31,480 --> 00:04:33,858
куда передаю наших пользователей.

70
00:04:33,858 --> 00:04:36,240
Теперь давайте рассмотрим шаблон.

71
00:04:36,240 --> 00:04:44,620
Это простой шаблон, в котором я просто иду
по всем пользователям и вывожу его имя.

72
00:04:44,620 --> 00:04:49,410
Обратите внимание: тут
я иду по пользователям,

73
00:04:49,410 --> 00:04:54,606
то есть пользователи — это, скажем так,

74
00:04:54,606 --> 00:04:59,310
элемент первого уровня, который я туда
передал, элемент поля базовой структуры.

75
00:04:59,310 --> 00:05:00,578
Вот.

76
00:05:00,578 --> 00:05:07,991
А name, name — это уже поле
конкретного пользователя,

77
00:05:07,991 --> 00:05:12,700
то есть поле той структуры,
которая находится в данном итерации цикле.

78
00:05:12,700 --> 00:05:16,670
if — какие же шаблоны без условий?

79
00:05:16,670 --> 00:05:18,130
Вот.
Это шаблон.

80
00:05:18,130 --> 00:05:20,050
Теперь надо запустить.

81
00:05:20,050 --> 00:05:29,380
[ЗВУК] [ЗВУК] Запустили.

82
00:05:29,380 --> 00:05:36,069
Итак, вывелись на экран наши пользователи.

83
00:05:36,069 --> 00:05:37,301
Это заголовок.

84
00:05:37,301 --> 00:05:39,590
Василий активен, Иван...

85
00:05:39,590 --> 00:05:46,192
Обратите внимание: теги заменились
на HTML-сущности, то есть

86
00:05:46,192 --> 00:05:51,950
это не является тегом, это просто текст, и
он не активен, Ну и Дмитрий тоже активен.

87
00:05:51,950 --> 00:05:52,616
Вот.

88
00:05:52,616 --> 00:05:56,750
Это что касается простых шаблонов.