1
00:00:00,000 --> 00:00:05,208
[БЕЗ_ЗВУКА] В этом видео

2
00:00:05,208 --> 00:00:13,144
мы начнем рассматривать возможности Go для
построения уже каких-то реальных систем.

3
00:00:13,144 --> 00:00:18,239
Начнем мы с работы с сетью и будем

4
00:00:18,239 --> 00:00:23,850
слушать tcp socket и обрабатывать входящие
команды, которые туда кто-то будет слать.

5
00:00:23,850 --> 00:00:28,780
Итак, с чего мы начинаем?

6
00:00:28,780 --> 00:00:32,378
Начинаем мы с того, что мы создаем объект,

7
00:00:32,378 --> 00:00:38,334
который будет собственно слушать
socket tcp на порту 88...

8
00:00:38,334 --> 00:00:39,540
8080.

9
00:00:39,540 --> 00:00:43,890
И дальше начнем обрабатывать
входящие соединения.

10
00:00:43,890 --> 00:00:46,521
Каким образом это происходит?

11
00:00:46,521 --> 00:00:53,363
Вызывается функция accept,
и как только кто-то подключается,

12
00:00:53,363 --> 00:00:58,620
мы в отдельной горутине начинаем
обрабатывать это соединение.

13
00:00:58,620 --> 00:01:01,441
Каким образом мы его обрабатываем?

14
00:01:01,441 --> 00:01:02,988
Давайте смотреть.

15
00:01:02,988 --> 00:01:07,874
Итак, для начала мы пытаемся
получить имя удаленного соединения,

16
00:01:07,874 --> 00:01:10,090
просто его адрес для удобства.

17
00:01:10,090 --> 00:01:14,030
Печатаем нам в консоль,
что кто-то соединился.

18
00:01:14,030 --> 00:01:20,414
Печатаем тому, кто соединился, «Здрасьте».

19
00:01:20,414 --> 00:01:21,689
Как печатаем?

20
00:01:21,689 --> 00:01:27,710
Дело в том, что net.Conn, вот эта
вот структура, которая нам приходит,

21
00:01:27,710 --> 00:01:34,857
она реализует интерфейс io.Writer,
и не только его, то есть это значит,

22
00:01:34,857 --> 00:01:40,330
что мы можем туда писать какие-то данные,
используя slice byte.

23
00:01:40,330 --> 00:01:42,372
Что мы делаем?

24
00:01:42,372 --> 00:01:47,090
Дальше для defer мы указываем,
что соединение

25
00:01:47,090 --> 00:01:52,280
закрыть на всякий случай,
чтобы не было никаких утечек.

26
00:01:52,280 --> 00:01:58,920
Дальше мы создаем scanner, который
будет нам ожидать ввода пустой строки.

27
00:01:58,920 --> 00:02:03,890
И пока к нам что-то приходит,
мы будем смотреть, что это приходит,

28
00:02:03,890 --> 00:02:05,684
и обрабатывать.

29
00:02:05,684 --> 00:02:13,760
Если нам ввели exit, то мы попрощаемся с
соединением и прекратим его обработку.

30
00:02:13,760 --> 00:02:17,670
То есть сработает defer,
соединение закроется, и все.

31
00:02:17,670 --> 00:02:21,700
Ну, если нам придет какой-то непустой
text, мы его выведем на экран.

32
00:02:21,700 --> 00:02:23,030
Давайте это запустим.

33
00:02:23,030 --> 00:02:27,155
Запустили.

34
00:02:27,155 --> 00:02:28,530
Все хорошо.

35
00:02:28,530 --> 00:02:31,280
Теперь откроем консоль.

36
00:02:31,280 --> 00:02:35,958
И подключимся по telnet к

37
00:02:35,958 --> 00:02:40,880
нашему сервису.

38
00:02:40,880 --> 00:02:46,130
Опа!

39
00:02:46,130 --> 00:02:51,900
Нам напечатало, что такой-то соединился,

40
00:02:51,900 --> 00:02:56,450
напечатало приветствие в это соединение,

41
00:02:56,450 --> 00:02:59,850
отлично.

42
00:02:59,850 --> 00:03:05,720
[ЗВУК] Вот You enter Test.

43
00:03:05,720 --> 00:03:07,151
You enter Hello World!

44
00:03:07,151 --> 00:03:12,302
это уже работа нашей программы,
которая нам в консоль пишет,

45
00:03:12,302 --> 00:03:17,841
что такой-то ввел Test,
такой-то ввел Hello World.

46
00:03:17,841 --> 00:03:22,960
При этом за счет того что мы обрабатываем
каждое соединение в отдельной горутине,

47
00:03:22,960 --> 00:03:27,680
мы можем подключиться к
этому серверу еще раз,

48
00:03:27,680 --> 00:03:31,330
что и сделаем.

49
00:03:31,330 --> 00:03:36,295
[ЗВУК] Отлично.

50
00:03:36,295 --> 00:03:37,351
Смотрите.

51
00:03:37,351 --> 00:03:39,360
У нас уже другой порт.

52
00:03:39,360 --> 00:03:44,857
8781 При

53
00:03:44,857 --> 00:03:49,250
этом здесь мы тоже это видим.

54
00:03:49,250 --> 00:03:52,920
Ну и мы можем отсоединиться.

55
00:03:52,920 --> 00:03:57,524
Все, мы отсоединились, с нами попрощались.

56
00:03:57,524 --> 00:03:59,942
Соединение разорвано.

57
00:03:59,942 --> 00:04:02,932
8781 отконнектился.

58
00:04:02,932 --> 00:04:08,555
То есть, смотрите,
мы буквально десятью строчками

59
00:04:08,555 --> 00:04:13,260
создали tcp-сервер,
с которым уже можно работать.

60
00:04:13,260 --> 00:04:18,844
Такого рода сервер, такого рода механизм

61
00:04:18,844 --> 00:04:23,770
лежит в основе практически
любого tcp-сервера,

62
00:04:23,770 --> 00:04:27,326
и, собственно,

63
00:04:27,326 --> 00:04:32,586
это само сердце любого сетевого сервиса.

64
00:04:32,586 --> 00:04:36,952
Давайте посмотрим, а что будет,
если убрать вот это.

65
00:04:36,952 --> 00:04:42,420
Что будет, если убрать обработку
каждого соединения в отдельном сервисе?

66
00:04:42,420 --> 00:04:44,889
Уберем.

67
00:04:44,889 --> 00:04:49,830
Тут всё почистим.

68
00:04:49,830 --> 00:04:52,272
И тут всё почистим.

69
00:04:52,272 --> 00:04:52,990
Так.

70
00:04:52,990 --> 00:04:55,625
Теперь давайте запустим это еще раз.

71
00:04:55,625 --> 00:05:00,958
Напоминаю, мы сейчас не обрабатываем
соединение в отдельной горутине.

72
00:05:00,958 --> 00:05:02,090
Запустили.

73
00:05:02,090 --> 00:05:05,420
Подключаемся с первой консоли.

74
00:05:05,420 --> 00:05:11,880
[ЗВУК] Подключились.

75
00:05:11,880 --> 00:05:13,580
Работает.

76
00:05:13,580 --> 00:05:16,670
Теперь попробуем подключиться
из второй консоли.

77
00:05:16,670 --> 00:05:19,118
Не работает.

78
00:05:19,118 --> 00:05:20,750
Почему?

79
00:05:20,750 --> 00:05:28,651
Потому что мы крутим здесь
вот этот цикл все время.

80
00:05:28,651 --> 00:05:34,013
Мы работаем внутри горутины main и,
пока одно из соединений, то есть первое,

81
00:05:34,013 --> 00:05:39,202
которое мы приняли, оно не прекратит
работу, пока мы находимся внутри вот этой

82
00:05:39,202 --> 00:05:44,315
функции handleConnection, мы не сможем
попробовать никакие другие соединения.

83
00:05:44,315 --> 00:05:47,446
То есть это однопоточный
получается сервер.

84
00:05:47,446 --> 00:05:51,520
Теперь давайте отсюда выйдем вот так.

85
00:05:51,520 --> 00:05:59,800
И мы сразу же смогли подключиться вторым
соединением, как только вышли из первого.

86
00:05:59,800 --> 00:06:05,004
[ЗВУК] Поэтому

87
00:06:05,004 --> 00:06:12,620
вот буквально одной командой мы делаем
наш сервер сразу же многопоточным.

88
00:06:12,620 --> 00:06:13,917
Но это просто tcp.

89
00:06:13,917 --> 00:06:17,081
tcp-сервер — это на
самом деле очень важно,

90
00:06:17,081 --> 00:06:19,850
это первое, с чего начинается сервер.

91
00:06:19,850 --> 00:06:26,996
Но обычно нас интересует более прикладной
характер и интересует http-сервер.

92
00:06:26,996 --> 00:06:34,160
В go есть встроенный http-сервер, который
мы рассмотрим позднее, в отдельном видео.