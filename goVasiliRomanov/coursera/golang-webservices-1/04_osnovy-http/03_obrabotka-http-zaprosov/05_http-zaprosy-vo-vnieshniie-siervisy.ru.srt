1
00:00:00,000 --> 00:00:05,870
[НЕТ ЗВУКА] В

2
00:00:05,870 --> 00:00:10,609
предыдущих видео мы рассматривали то,
каким образом нам ответить на

3
00:00:10,609 --> 00:00:16,293
http-запрос и обработать какие-то
входящие параметры в него.

4
00:00:16,293 --> 00:00:21,340
Однако отправить http-запрос на
какой-то внешний другой сервис —

5
00:00:21,340 --> 00:00:26,226
это тоже очень частая операция,
и это видео посвящено

6
00:00:26,226 --> 00:00:30,415
как раз тому,
каким образом её можно провести.

7
00:00:30,415 --> 00:00:35,967
Рассмотрим следующий код:
у нас есть какой-то url,

8
00:00:35,967 --> 00:00:40,116
и мы хотим просто дернуть
Get-запрос: дай мне,

9
00:00:40,116 --> 00:00:44,280
пожалуйста, вот, вот это.

10
00:00:44,280 --> 00:00:46,445
Ну всё очень просто.

11
00:00:46,445 --> 00:00:51,220
В Go для этого в пакете http —
Net.http — есть функция Get.

12
00:00:51,220 --> 00:00:51,831
Вот.

13
00:00:51,831 --> 00:00:56,674
Куда вы можете передать url
и вам вернется респонс.

14
00:00:56,674 --> 00:00:59,973
Респонс — это довольно большая структура,

15
00:00:59,973 --> 00:01:03,730
там есть много всяких данных,
хедеры там, статус ответа, тело.

16
00:01:03,730 --> 00:01:06,844
Вот.
Тело, конечно, нужно закрывать всегда,

17
00:01:06,844 --> 00:01:08,260
если у вас нет ошибки.

18
00:01:08,260 --> 00:01:13,147
Ну в данном случае я просто
дёргаю через Get какой-то url и

19
00:01:13,147 --> 00:01:16,370
дальше просто вывожу вам его на экран.

20
00:01:16,370 --> 00:01:22,280
url сам этот обслуживается на самом
деле той же самой программой,

21
00:01:22,280 --> 00:01:25,780
в ней я просто вывожу на экран то,
что мне пришло.

22
00:01:25,780 --> 00:01:29,330
Вот.

23
00:01:29,330 --> 00:01:35,256
Но бывает так, что просто Get-запрос,
просто url дёрнуть недостаточно иногда.

24
00:01:35,256 --> 00:01:40,264
Мы хотим отправить туда больше данных,
например, какие-то хедеры туда

25
00:01:40,264 --> 00:01:45,884
проставить или, например,
постзапрос отправить с данными.

26
00:01:45,884 --> 00:01:47,738
Как это сделать?

27
00:01:47,738 --> 00:01:53,137
Ну http.Get — это просто обёртка,
хедер для того, чтобы обратиться,

28
00:01:53,137 --> 00:01:58,738
используя дефолтный http-клиент,
и сразу создать

29
00:01:58,738 --> 00:02:04,602
просто очень простой http Request
и пульнуть его во внешний сервис.

30
00:02:04,602 --> 00:02:10,089
Допустим, если вам нужно создать
какой-то уже более крупный метод.

31
00:02:10,089 --> 00:02:15,589
Вы можете создать Request, да,
создать структуру данного типа.

32
00:02:15,589 --> 00:02:19,010
Вот в данном случае я указываю метод Get,

33
00:02:19,010 --> 00:02:22,760
указываю какие-то хедеры: вот
User-Agent coursera\golang.

34
00:02:22,760 --> 00:02:25,451
Да.
После этого дела мне нужно указать там

35
00:02:25,451 --> 00:02:28,564
url, хотя я тоже могу их
сразу указать в Request'e.

36
00:02:28,564 --> 00:02:30,850
Но я воспользуюсь функцией url.Parse.

37
00:02:30,850 --> 00:02:34,347
Она мне распарсит url — это, кстати,
тоже достаточно частая операция,

38
00:02:34,347 --> 00:02:37,080
если вы хотите из url'а
какие-то параметры выдернуть.

39
00:02:37,080 --> 00:02:39,708
Вот.
Распаршу url, сразу же его воткну в

40
00:02:39,708 --> 00:02:45,026
Request, и после этого обращусь

41
00:02:45,026 --> 00:02:50,945
к уже внутреннему полю url'a

42
00:02:50,945 --> 00:02:56,243
— Values,
и там выставлю ещё какое-то значение.

43
00:02:56,243 --> 00:02:59,617
Вот я выставлю user,
и который равен rvasily.

44
00:02:59,617 --> 00:03:05,310
То есть это аналогично тому, что бы я
вот тут написал User равно и так далее.

45
00:03:05,310 --> 00:03:05,952
Вот.

46
00:03:05,952 --> 00:03:13,507
Теперь я использую дефолтный клиент,
то есть если раньше я вообще полностью...

47
00:03:13,507 --> 00:03:16,560
мне весь реквест оборачивался в хелпер,

48
00:03:16,560 --> 00:03:20,208
то тут я уже использую дефолтный
клиент и обращаюсь к его методу Do,

49
00:03:20,208 --> 00:03:23,350
который выполняет мне запрос,
уходит на другой сервер.

50
00:03:23,350 --> 00:03:27,129
Я сразу же проверяю ошибку,

51
00:03:27,129 --> 00:03:32,490
делаю в defer закрытие Body — это
очень важно, не течём в этих местах!

52
00:03:32,490 --> 00:03:36,780
Вычитываю весь Body и как строчку
его также вывожу на экран.

53
00:03:36,780 --> 00:03:40,530
Хорошо.

54
00:03:40,530 --> 00:03:45,714
Вот тут я использовал дефолтный клиент,
в предыдущем пункте использовал дефолтный

55
00:03:45,714 --> 00:03:50,441
клиент, на самом деле
дефолтный клиент — это плохо.

56
00:03:50,441 --> 00:03:51,320
Почему?

57
00:03:51,320 --> 00:03:55,025
Дело в том, что в дефолтном клиенте нет

58
00:03:55,025 --> 00:03:59,640
никаких таймаутов на
время ожидания ответа.

59
00:03:59,640 --> 00:04:04,769
Иногда это может быть очень большой
проблемой, когда какой-то внешний сервис,

60
00:04:04,769 --> 00:04:08,531
куда вы ходите,
он ушёл на какое-нибудь обслуживание,

61
00:04:08,531 --> 00:04:12,760
или просто его завалили DDOS'ом,
или там сломалось что-то.

62
00:04:12,760 --> 00:04:16,635
И ваша программа также
висит и ничего не делает.

63
00:04:16,635 --> 00:04:21,461
Вот.
Соответственно, хочется иметь таймауты.

64
00:04:21,461 --> 00:04:26,143
Поэтому вы можете не всегда
использовать дефолтный клиент.

65
00:04:26,143 --> 00:04:28,560
Точнее, лучше никогда его не используйте.

66
00:04:28,560 --> 00:04:32,502
А для этого есть транспорт.

67
00:04:32,502 --> 00:04:35,809
То есть можно создать
структуру транспорта,

68
00:04:35,809 --> 00:04:41,655
у которого есть куча всяких параметров,
например, какие-то вы там ходите таймауты,

69
00:04:41,655 --> 00:04:46,474
какие keepalive'ы, сколько у вас коннектов
до удалённого сервиса должно быть...

70
00:04:46,474 --> 00:04:51,180
может быть установлено, и когда они
будут протухать, через какое время.

71
00:04:51,180 --> 00:04:55,600
Потом вы, используя этот транспорт,
создаёте уже клиента,

72
00:04:55,600 --> 00:04:57,933
и у него тоже есть таймаут.

73
00:04:57,933 --> 00:05:02,235
Там очень много опций,
их все стоит лучше изучить в документации.

74
00:05:02,235 --> 00:05:04,330
Вот.
Хорошо, я тут создал транспорт,

75
00:05:04,330 --> 00:05:06,773
и в этом же примере мы рассмотрим,

76
00:05:06,773 --> 00:05:11,810
каким образом отправить пост-запрос вместе
с какими-то данными на удалённый сервис.

77
00:05:11,810 --> 00:05:17,110
Вот, допустим, у меня есть какие-то
данные, и я хочу их отправить.

78
00:05:17,110 --> 00:05:21,420
Ну для начала я создаю из них io.Reader.

79
00:05:21,420 --> 00:05:25,089
Используя вот такую вот
нехитрую конструкцию,

80
00:05:25,089 --> 00:05:28,050
и вот на такой url я буду их отправлять.

81
00:05:28,050 --> 00:05:33,458
В данном случае я могу тоже не
пользоваться прям совсем составлением

82
00:05:33,458 --> 00:05:40,076
запроса с нуля, а воспользоваться тоже
хелпером, который уже вернёт мне запрос.

83
00:05:40,076 --> 00:05:45,650
Если Get он сразу отправлял этот запрос,
то NewRequest, он мне его просто вернёт.

84
00:05:45,650 --> 00:05:51,152
Итак, я создаю новый Request
методом Post указываю url,

85
00:05:51,152 --> 00:05:55,030
указываю Body для него,
указываю для него опять-таки Content-Type,

86
00:05:55,030 --> 00:05:59,303
Content-Length — сколько я туда хочу
данных передать — и вызываю уже

87
00:05:59,303 --> 00:06:03,150
метод моего клиента,
уже не дефолтного клиента, а уже моего.

88
00:06:03,150 --> 00:06:08,315
Вызываю метод Do и куда я передаю Request,
который у меня тут создался.

89
00:06:08,315 --> 00:06:09,195
Вот.
Всё.

90
00:06:09,195 --> 00:06:14,630
Дальше — как обычно: проверяю ошибку,
закрываю Body, и в defer'e,

91
00:06:14,630 --> 00:06:19,895
то есть она, вот эта строчка,
выполнится после того,

92
00:06:19,895 --> 00:06:24,851
как функция завершит работу,
в конце работы функции.

93
00:06:24,851 --> 00:06:25,351
Вот.

94
00:06:25,351 --> 00:06:29,060
Вычитываю Body и также
вывожу его на экран.

95
00:06:29,060 --> 00:06:30,666
Вот.
Ну хорошо бы это

96
00:06:30,666 --> 00:06:32,988
теперь продемонстрировать.

97
00:06:32,988 --> 00:06:37,142
Открываем консоль, запускаем сервер, Вот.

98
00:06:37,142 --> 00:06:41,440
Тут вывелось сразу всё.

99
00:06:41,440 --> 00:06:42,814
Я поднял сервер.

100
00:06:42,814 --> 00:06:47,860
Теперь вот мой getHandler,
он вывел мне весь входящий Request.

101
00:06:47,860 --> 00:06:51,250
Вот прям все-все его данные.

102
00:06:51,250 --> 00:06:57,170
Вот, например, User-Agent Go-http-client
дефолтный, совсем не такой.

103
00:06:57,170 --> 00:07:00,475
Так.
А вот запрос, который я отправлял уже сам,

104
00:07:00,475 --> 00:07:04,110
конструируя этот запрос и
сам передавая туда данные.

105
00:07:04,110 --> 00:07:09,030
Вот, например, User-Agent,
который я передал, coursera/golang.

106
00:07:09,030 --> 00:07:11,680
А вот параметры.

107
00:07:11,680 --> 00:07:15,220
Вот они все здесь есть.

108
00:07:15,220 --> 00:07:21,209
И теперь в конце пост-запрос.

109
00:07:21,209 --> 00:07:28,650
Тут я ввожу просто тело запроса,
Вот он есть raw body, id 42, user rvasily.

110
00:07:28,650 --> 00:07:31,685
Вот тот json, который я передал.

111
00:07:31,685 --> 00:07:36,587
То есть теперь я могу,
мог бы его там уже распаковать и этот.

112
00:07:36,587 --> 00:07:41,640
Вот таким образом можно делать
http-запросы во всякие внешние сервисы.

113
00:07:41,640 --> 00:07:45,904
Это тоже не тяжело, тоже не больно,
и всё это есть в стандартной библиотеке,

114
00:07:45,904 --> 00:07:48,050
вам не нужно нигде ничего доставлять.

115
00:07:48,050 --> 00:07:49,052
Хорошо.

116
00:07:49,052 --> 00:07:54,070
Ещё один момент,
который стоит рассмотреть.

117
00:07:54,070 --> 00:07:58,460
Тут я поднимал целый сервер для этого,

118
00:07:58,460 --> 00:08:04,191
прям своей программы,
чтобы куда-то отправить эти все запросы.

119
00:08:04,191 --> 00:08:10,984
Иногда бывает так,
что нам надо покрыть тестами какую-то

120
00:08:10,984 --> 00:08:16,313
функцию, и хорошо бы иметь
тестовый функционал для этого.

121
00:08:16,313 --> 00:08:19,250
Об этом мы и поговорим в следующем видео.