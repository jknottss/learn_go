1
00:00:00,000 --> 00:00:06,887
[БЕЗ_ЗВУКА] В

2
00:00:06,887 --> 00:00:09,801
этом видео мы рассмотрим
загрузку файлов из формы и то,

3
00:00:09,801 --> 00:00:13,650
каким образом работать с ними,
используя стандартную библиотеку в go.

4
00:00:13,650 --> 00:00:15,819
Рассмотрим следующий код.

5
00:00:15,819 --> 00:00:22,054
У меня есть очень простая форма,
в которой только один input file и submit.

6
00:00:22,054 --> 00:00:26,860
Я, не стесняясь,
просто сразу ее вывожу на экран.

7
00:00:26,860 --> 00:00:28,875
Вот как это выглядит.

8
00:00:28,875 --> 00:00:30,995
Вот моя форма и кнопка.

9
00:00:30,995 --> 00:00:34,320
Выберем файл и загрузим.

10
00:00:34,320 --> 00:00:39,090
В данном случае мы видим
какую-то информацию,

11
00:00:39,090 --> 00:00:40,995
которую я вывел по этому файлу.

12
00:00:40,995 --> 00:00:47,020
Это имя самого файла,
заголовки MIMEHeader-а и MD5 от файла.

13
00:00:47,020 --> 00:00:52,380
Теперь рассмотрим код,
который эту информацию выводит.

14
00:00:52,380 --> 00:00:59,450
Вот наша функция,
которая работает с этим обработчиком.

15
00:00:59,450 --> 00:01:06,810
Итак, в go весь запрос, он не
вычитывается, не парсится по умолчанию.

16
00:01:06,810 --> 00:01:10,885
Вам нужно либо самим его сказать,

17
00:01:10,885 --> 00:01:15,810
что загрузи и обработай, либо он будет
загружен по умолчанию при первом обращении

18
00:01:15,810 --> 00:01:20,628
к каким-то определенным
фолям и функциям реквеста.

19
00:01:20,628 --> 00:01:25,329
Итак, в данном случае я занимаюсь
парсингом формы, говорю,

20
00:01:25,329 --> 00:01:28,957
что мне, пожалуйста,
распарсь только пять мегабайт,

21
00:01:28,957 --> 00:01:33,918
и если что-то там остается,
оно будет положено во временные файлы.

22
00:01:33,918 --> 00:01:37,848
После этого у реквеста
есть функция FormFile,

23
00:01:37,848 --> 00:01:42,946
где я обращаюсь к своему файлу и получаю,
собственно,

24
00:01:42,946 --> 00:01:47,340
сами данные и какие-то заголовки от файла.

25
00:01:47,340 --> 00:01:51,960
Дело в том, что там Multipart,
и этим занимается MIME парсер.

26
00:01:51,960 --> 00:01:52,510
Вот.

27
00:01:52,510 --> 00:01:57,800
После я, конечно же,
файл сразу закрываю через defer,

28
00:01:57,800 --> 00:02:01,204
это надо, чтобы не текли ресурсы и прочее.

29
00:02:01,204 --> 00:02:03,690
Вот.
Ну и печатаю это на экран.

30
00:02:03,690 --> 00:02:06,631
Вот в данном случае я печатаю имя,

31
00:02:06,631 --> 00:02:11,386
дальше я печатаю MIME заголовок,
который шел в форме.

32
00:02:11,386 --> 00:02:16,610
После этого я пытаюсь как-то
посчитать MD5 от этого файла.

33
00:02:16,610 --> 00:02:22,780
Я создаю новый объект из пакета crypto/md5

34
00:02:22,780 --> 00:02:27,590
и туда скармливаю, собственно, свой файл.

35
00:02:27,590 --> 00:02:33,385
Этот алгоритм хеширования, ну,
в данном случае это структура такая,

36
00:02:33,385 --> 00:02:39,891
туда можно скопировать прямо данные, он
принимает его ридер, и он посчитает MD5.

37
00:02:39,891 --> 00:02:41,580
И вот тут я его вывожу.

38
00:02:41,580 --> 00:02:47,224
В hasher.Sum то есть уже сами данные,
nil я передаю — это значит,

39
00:02:47,224 --> 00:02:51,725
что я хочу не передать туда
и посчитать сразу, а то,

40
00:02:51,725 --> 00:02:54,310
что я туда налил через ее код.

41
00:02:54,310 --> 00:02:54,840
Вот.

42
00:02:54,840 --> 00:03:02,050
Это когда у вас файлов много, и вы хотите
их распарсить и сразу иметь все данные.

43
00:03:02,050 --> 00:03:08,370
Еще одна достаточно частая операция, когда
у вас в POST-запросе приходят данные,

44
00:03:08,370 --> 00:03:11,910
которые вы не хотите парсить через MIME,
то есть это не...

45
00:03:11,910 --> 00:03:19,355
не multipart/form-data, а,
например, application/json.

46
00:03:19,355 --> 00:03:24,826
В этом случае вы тоже можете просто
считать весь реквест в свой код, да?

47
00:03:24,826 --> 00:03:28,790
Прямо вот как он есть, нераспаршенный вид.

48
00:03:28,790 --> 00:03:32,549
И что-то с ним сделать.

49
00:03:32,549 --> 00:03:35,234
Рассмотрим код.

50
00:03:35,234 --> 00:03:39,322
Вот я паршу реквест напрямую,
я не пользуюсь никакими

51
00:03:39,322 --> 00:03:44,657
вспомогательными функциями,
я просто читаю все, что есть в body.

52
00:03:44,657 --> 00:03:49,210
Вот он у меня есть,
сразу же его в defer закрываю.

53
00:03:49,210 --> 00:03:50,672
После этого я...

54
00:03:50,672 --> 00:03:56,606
да, данные я буду передавать вот такие,
то есть просто json, прямо, как есть.

55
00:03:56,606 --> 00:04:01,515
Дальше я создаю структуру и
паршу json в эту структуру.

56
00:04:01,515 --> 00:04:06,180
Есть какая-то ошибка, я отвечаю 500,
ну а дальше вывожу Content-Type и то,

57
00:04:06,180 --> 00:04:07,890
что я туда распарсил.

58
00:04:07,890 --> 00:04:09,870
Рассмотрим это в работе.

59
00:04:09,870 --> 00:04:14,491
Вот мой запрос, то есть я его загружаю
через POST, указываю Content-Type

60
00:04:14,491 --> 00:04:18,560
application/json, дальше я его не
проверяю, но вы можете на это смотреть.

61
00:04:18,560 --> 00:04:21,779
Вот.
Вот тут сами данные, которые я передаю,

62
00:04:21,779 --> 00:04:23,480
и адрес, куда мне идти.

63
00:04:23,480 --> 00:04:24,860
Нажимаем Enter.

64
00:04:24,860 --> 00:04:26,700
Отлично, все прошло.

65
00:04:26,700 --> 00:04:33,519
Content-Type application/json, который
я передал, а вот результа парсинга,

66
00:04:33,519 --> 00:04:38,460
то есть params, params &main и ID:2,
User: "rvasily".

67
00:04:38,460 --> 00:04:39,370
Вот.

68
00:04:39,370 --> 00:04:44,019
Так можно парсить формы и получать файлы,

69
00:04:44,019 --> 00:04:47,560
которые вы загружаете,
используя стандартную библиотеку в go.