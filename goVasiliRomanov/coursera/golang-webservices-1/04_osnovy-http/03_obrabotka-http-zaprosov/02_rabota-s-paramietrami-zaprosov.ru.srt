1
00:00:00,000 --> 00:00:05,696
[БЕЗ_ЗВУКА] В этом

2
00:00:05,696 --> 00:00:11,890
видео мы рассмотрим работу с входящими
параметрами запроса, с теми параметрами,

3
00:00:11,890 --> 00:00:16,260
которые вы можете получить от
пользователя тем или иным образом.

4
00:00:16,260 --> 00:00:21,970
Никакая работа с динамическими данными
невозможна без обработки этих параметров.

5
00:00:21,970 --> 00:00:24,856
Давайте рассмотрим следующую функцию.

6
00:00:24,856 --> 00:00:28,240
В ней мы будем просто
получать get-параметры.

7
00:00:28,240 --> 00:00:33,340
Получить параметры можно
несколькими образами.

8
00:00:33,340 --> 00:00:39,690
Первым является непосредственно
получение из url,

9
00:00:39,690 --> 00:00:43,235
то есть get-параметров,
которые приходят к нам в запросе.

10
00:00:43,235 --> 00:00:46,040
В данном случае мы из url
получаем объект query,

11
00:00:46,040 --> 00:00:51,280
а у него уже получаем параметр
с незамысловатым именем param.

12
00:00:51,280 --> 00:00:55,410
Если такого параметра нет,
этот метод возвращает пустоту.

13
00:00:55,410 --> 00:01:00,130
Мы проверяем, что если параметр не пуст,
мы выводим его на экран.

14
00:01:00,130 --> 00:01:04,841
Вторым способом является
использование функции

15
00:01:04,841 --> 00:01:09,807
FormValue из объекта request и
через неё мы получаем функцию key.

16
00:01:09,807 --> 00:01:14,340
При помощи этой функции можно также
получать параметры из post-запросов.

17
00:01:14,340 --> 00:01:18,770
Мы тоже выводим эту функцию на экран.

18
00:01:18,770 --> 00:01:21,481
А теперь это надо запустить.

19
00:01:21,481 --> 00:01:23,220
Она уже запущена.

20
00:01:23,220 --> 00:01:28,330
Итак, вот вывод нашей программы.

21
00:01:28,330 --> 00:01:31,270
mParam = 1 и key = 2.

22
00:01:31,270 --> 00:01:34,800
Теперь это можно изменить.

23
00:01:34,800 --> 00:01:42,930
[БЕЗ_ЗВУКА] Итак,

24
00:01:42,930 --> 00:01:48,490
mParam теперь тест, а key теперь hello.

25
00:01:48,490 --> 00:01:50,878
Но это были get-параметры.

26
00:01:50,878 --> 00:01:52,410
А как насчёт post?

27
00:01:52,410 --> 00:01:57,688
Итак, теперь давайте
рассмотрим post-параметры.

28
00:01:57,688 --> 00:02:02,826
У нас есть handler mainPage,
который проверяет, что, если метод,

29
00:02:02,826 --> 00:02:09,050
с которым мы пришли, не post,
то мы рисуем форму логина.

30
00:02:09,050 --> 00:02:13,780
Форму логина я записал руками,
просто как html.

31
00:02:13,780 --> 00:02:19,465
А если мы пришли через post,
то мы можем получить доступ к параметрам.

32
00:02:19,465 --> 00:02:25,150
Мы можем руками распарсить форму,
когда нам надо,

33
00:02:25,150 --> 00:02:30,320
r.ParseForm, и обратиться
к ней за нашими данными.

34
00:02:30,320 --> 00:02:34,745
Либо мы можем использовать короткое
обращение, используя FormValue,

35
00:02:34,745 --> 00:02:41,485
которая всю эту работу сделает за нас
и вернет нам первый нужный параметр.

36
00:02:41,485 --> 00:02:45,951
Причем функция FormValue будет возвращать
параметры вообще всего запроса,

37
00:02:45,951 --> 00:02:47,720
не только из get, но и из post.

38
00:02:47,720 --> 00:02:51,870
При этом, конечно же,
из post будет иметь приоритет.

39
00:02:51,870 --> 00:02:57,500
Мы выведем на экран тот параметр,
который мы ввели.

40
00:02:57,500 --> 00:03:04,536
Запросили сервер, отлично.

41
00:03:04,536 --> 00:03:08,320
Теперь он меня просит
ввести логин и пароль.

42
00:03:08,320 --> 00:03:14,707
[БЕЗ_ЗВУКА] Жмем

43
00:03:14,707 --> 00:03:20,130
логин и теперь программа вывела,
что я вел rvasily.

44
00:03:20,130 --> 00:03:23,473
Так обрабатываются post-параметры.

45
00:03:23,473 --> 00:03:27,410
Еще одним входящим
параметром являются куки.

46
00:03:27,410 --> 00:03:29,120
Куки — это значение,

47
00:03:29,120 --> 00:03:34,065
которое постоянно в рамках HTPC
пользователя для того, чтобы, например,

48
00:03:34,065 --> 00:03:37,860
запоминать уже авторизационные данные
на сервер, чтобы иметь какой-то ключ.

49
00:03:37,860 --> 00:03:42,730
Итак, давайте посмотрим,
как же нам работать с куками.

50
00:03:42,730 --> 00:03:44,950
Зарегистрируем три функции.

51
00:03:44,950 --> 00:03:48,200
Функцию login, logout и главную страницу.

52
00:03:48,200 --> 00:03:51,440
Что делает главная страница?

53
00:03:51,440 --> 00:03:56,627
Главная страница получает куку, используя

54
00:03:56,627 --> 00:04:02,745
метод cookie из объекта request,
и дальше мы проверяем,

55
00:04:02,745 --> 00:04:07,570
что если такая кука есть, мы считаем,
что пользователь залогинен.

56
00:04:07,570 --> 00:04:11,476
Если куки нет, мы считаем,
что ему нужно логиниться.

57
00:04:11,476 --> 00:04:15,610
Итак, если он залогинен,
то мы даем ссылку на logout,

58
00:04:15,610 --> 00:04:18,810
и пишем значение куки session.Value.

59
00:04:18,810 --> 00:04:22,040
Session — это как раз таки наша кука.

60
00:04:22,040 --> 00:04:25,171
Противным образом,
если пользователь не залогинен,

61
00:04:25,171 --> 00:04:27,240
то мы ему предлагаем залогиниться.

62
00:04:27,240 --> 00:04:29,801
Что делает функция login?

63
00:04:29,801 --> 00:04:35,508
Функция login просто выставляет куку
с заранее заданными значениями,

64
00:04:35,508 --> 00:04:38,016
это не многопользовательский сервер.

65
00:04:38,016 --> 00:04:39,500
Итак, у куки есть имя.

66
00:04:39,500 --> 00:04:45,330
Кука представляет собой
структуру в пакете http.

67
00:04:45,330 --> 00:04:50,255
У неё есть имя, value, дата протухания,

68
00:04:50,255 --> 00:04:55,180
и для того, чтобы поставить куку, есть в
пакете http специальная функция SetCookie.

69
00:04:55,180 --> 00:05:00,500
Итого, я передаю туда response writer
и куку, которую я хочу поставить.

70
00:05:00,500 --> 00:05:01,662
Всё хорошо.

71
00:05:01,662 --> 00:05:05,790
Дальше я делаю redirect
на главную страницу.

72
00:05:05,790 --> 00:05:11,230
Функция logout просто удаляет куку.

73
00:05:11,230 --> 00:05:14,919
Я теперь смотрю,
что пытаюсь получить куку.

74
00:05:14,919 --> 00:05:20,264
Если ее нет, я сразу redirect на главную,
если она есть, я оставлю дату в прошлое.

75
00:05:20,264 --> 00:05:25,070
Таким образом, я говорю серверу, что это
кука больше не валидная, ее нужно удалить.

76
00:05:25,070 --> 00:05:26,924
И тоже делаю redirect.

77
00:05:26,924 --> 00:05:30,640
Теперь давайте посмотрим,
как это работает.

78
00:05:30,640 --> 00:05:33,104
Запустим наш сервер.

79
00:05:33,104 --> 00:05:34,531
Запустили.

80
00:05:34,531 --> 00:05:40,644
Откроем консоль, чтобы смотреть,
что нам выставляется сервером.

81
00:05:40,644 --> 00:05:45,820
Итак, главная страница, которая проверила,
что куки нет, и нам нужно ее получить.

82
00:05:45,820 --> 00:05:50,510
Жмем на логин.

83
00:05:50,510 --> 00:05:59,620
Итак, вот наш логин.

84
00:05:59,620 --> 00:06:04,832
Вот было выставление куки
имя cookies session_id,

85
00:06:04,832 --> 00:06:08,362
значение rvasily, и дата протухания.

86
00:06:08,362 --> 00:06:10,711
Теперь мы с редиректа на главную.

87
00:06:10,711 --> 00:06:15,576
Если мы попробуем выйти,
нажмем на кнопку logout, то нам тоже

88
00:06:15,576 --> 00:06:21,050
выставилась кука,
но с датой уже в прошлое.

89
00:06:21,050 --> 00:06:26,000
Куки в основном используются

90
00:06:26,000 --> 00:06:30,279
для запоминания каких-то значений,
которые не очень секьюрные,

91
00:06:30,279 --> 00:06:33,801
потому что браузерный JavaScript
может получать к ним доступ.

92
00:06:33,801 --> 00:06:38,278
Очень часто куки используются для того,
чтобы запомнить идентификатор сессии

93
00:06:38,278 --> 00:06:42,820
пользователя, чтобы эти секретные
значения уже определять на сервере.

94
00:06:42,820 --> 00:06:45,479
Ещё очень важная информация,

95
00:06:45,479 --> 00:06:50,600
которая находится в http request,
это заголовки header.

96
00:06:50,600 --> 00:06:57,100
Header могут быть как выставлены,
так и получены из запроса.

97
00:06:57,100 --> 00:06:59,685
В этом примере я покажу,
как с этим работать.

98
00:06:59,685 --> 00:07:04,114
Для того, чтобы выставить header,
мы должны получить объект header из

99
00:07:04,114 --> 00:07:08,561
response writer, из w,
и указать в нем функцию set,

100
00:07:08,561 --> 00:07:15,860
в которой с параметрами мы передадим
само название header и значение.

101
00:07:15,860 --> 00:07:19,787
В данном случае я указываю какое-то
случайное значение, которое каким-либо

102
00:07:19,787 --> 00:07:23,380
образом предполагается идентифицирует
мой запрос, возможно в логах.

103
00:07:23,380 --> 00:07:27,440
Далее я хочу получить
теперь значения какие-то.

104
00:07:27,440 --> 00:07:35,637
Для получения header с UserAgent есть
сокращение у http request сразу UserAgent.

105
00:07:35,637 --> 00:07:38,264
Для того чтобы получить
какие-то другие header,

106
00:07:38,264 --> 00:07:42,490
мне нужно обратиться к структуре header и
вызвать у нее метод gets нужным header.

107
00:07:42,490 --> 00:07:46,570
Давайте запустим.

108
00:07:46,570 --> 00:07:50,650
Запустили сервер.

109
00:07:50,650 --> 00:07:52,889
Итак, смотрим.

110
00:07:52,889 --> 00:07:57,966
Вот мой браузер, которым я записываю.

111
00:07:57,966 --> 00:08:01,661
А вот accept, значение header accept,

112
00:08:01,661 --> 00:08:05,790
который был передан моим
браузером на сервер.

113
00:08:05,790 --> 00:08:10,746
Теперь для того чтобы
посмотреть header response,

114
00:08:10,746 --> 00:08:15,888
обратимся к инспектору,
найдем response header и вот

115
00:08:15,888 --> 00:08:20,990
наш Requestid, то значение,
которое мы прокинули.