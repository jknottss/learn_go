1
00:00:00,000 --> 00:00:09,045
[БЕЗ_ЗВУКА] Если

2
00:00:09,045 --> 00:00:16,910
уж вы дошли до оптимизации роутеров
и вам важна его производительность,

3
00:00:16,910 --> 00:00:21,980
то весьма вероятно, что следующим шагом

4
00:00:21,980 --> 00:00:27,437
вас не устроит производительность
стандартного http-сервера,

5
00:00:27,437 --> 00:00:32,385
который поставляется из коробки,
и вы захотите что-то пооптимальнее.

6
00:00:32,385 --> 00:00:35,450
Например, запросов у
вас просто очень много.

7
00:00:35,450 --> 00:00:39,890
И даже то количество памяти,

8
00:00:39,890 --> 00:00:44,330
которое ест стандартный http-сервер,
вас будет не устраивать.

9
00:00:44,330 --> 00:00:47,690
И вы захотите искать что-то еще.

10
00:00:47,690 --> 00:00:51,681
В этом видео мы поговорим
как раз про «что-то еще».

11
00:00:51,681 --> 00:00:55,943
Есть веб-сервер,
который называется fasthttp.

12
00:00:55,943 --> 00:01:00,260
Это альтернативная
реализация http-сервера.

13
00:01:00,260 --> 00:01:02,640
Она гораздо быстрее.

14
00:01:02,640 --> 00:01:08,256
Обратите внимание,
гораздо меньше памяти тратится

15
00:01:08,256 --> 00:01:14,596
на запрос и гораздо меньше памяти
аллоцируется на каждый запрос.

16
00:01:14,596 --> 00:01:17,180
За счет чего это происходит?

17
00:01:17,180 --> 00:01:22,173
Происходит это за счет
активного переиспользования

18
00:01:22,173 --> 00:01:27,544
всех структур веб-сервера: данных ответа,

19
00:01:27,544 --> 00:01:30,550
контекста и прочего.

20
00:01:30,550 --> 00:01:36,819
Поскольку это отдельный
абсолютно веб-сервер,

21
00:01:36,819 --> 00:01:42,226
он не предоставляет своего мультиплексора,

22
00:01:42,226 --> 00:01:45,510
однако уже есть под него порты других.

23
00:01:45,510 --> 00:01:50,475
Например, fasthttprouter — это
порт под fasthttp — роутера,

24
00:01:50,475 --> 00:01:55,600
который мы рассматривали в
предыдущем видео, httprouter.

25
00:01:55,600 --> 00:02:01,100
То есть хотя бы мы можем базовые
вещи делать, которые нам нужны.

26
00:02:01,100 --> 00:02:05,200
Также у него полностью
отличается сигнатура функций,

27
00:02:05,200 --> 00:02:10,403
полностью отличается
работа с данными запроса.

28
00:02:10,403 --> 00:02:14,485
Например, у него нет
привычного нам реквеста,

29
00:02:14,485 --> 00:02:18,240
у него есть контекст — и там есть все.

30
00:02:18,240 --> 00:02:24,450
Соответственно, установка всего-всего
происходит через контекст.

31
00:02:24,450 --> 00:02:30,210
То есть оно накапливается в памяти,

32
00:02:30,210 --> 00:02:36,179
накапливается в буфере,
если вы хотите тело ответа.

33
00:02:36,179 --> 00:02:41,246
И вы можете даже, например,

34
00:02:41,246 --> 00:02:47,910
хедера заменить уже после того,
как вы вроде бы установили body.

35
00:02:47,910 --> 00:02:51,888
И body вы тоже можете заменить
и вывести что-то еще другое.

36
00:02:51,888 --> 00:02:53,690
В итоге останется вот это.

37
00:02:53,690 --> 00:03:00,222
Также, что стоит отметить про fasthttp,

38
00:03:00,222 --> 00:03:08,162
что часто мы после завершения работы
обрабатываем что-то в отдельной горутине.

39
00:03:08,162 --> 00:03:14,155
В случае с myfunc(ctx),

40
00:03:14,155 --> 00:03:19,832
в случае с fasthttp-сервером вот так
делать нельзя, потому что контекст после

41
00:03:19,832 --> 00:03:24,910
завершения функции возвращается в пул и
будет переиспользован другим запросом.

42
00:03:24,910 --> 00:03:30,120
Поэтому эта операция уже будет крайне
небезопасна и подвержена рейсам.

43
00:03:30,120 --> 00:03:35,500
То есть про это стоит упомянуть сразу,

44
00:03:35,500 --> 00:03:38,422
чтобы вы не наступали на эти грабли.

45
00:03:38,422 --> 00:03:43,348
Но, в целом, это очень быстрый
сервер и много кто его использует.

46
00:03:43,348 --> 00:03:45,630
Под него есть свои фреймворки.

47
00:03:45,630 --> 00:03:50,084
В общем, он полноценен.

48
00:03:50,084 --> 00:03:54,808
Однако вам стоит дважды подумать,
прежде чем использовать его.

49
00:03:54,808 --> 00:03:59,539
Если вы действительно не упираетесь
в производительность стандартного

50
00:03:59,539 --> 00:04:02,760
http-сервера, то, скорее всего,

51
00:04:02,760 --> 00:04:07,026
не стоит рваться вкручивать
все самое-самое быстрое.

52
00:04:07,026 --> 00:04:10,850
Лучше заняться бизнес-логикой
вашей программы.