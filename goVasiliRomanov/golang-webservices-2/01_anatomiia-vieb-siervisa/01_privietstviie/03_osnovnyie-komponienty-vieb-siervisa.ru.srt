1
00:00:00,000 --> 00:00:06,192
[БЕЗ_ЗВУКА] В

2
00:00:06,192 --> 00:00:11,222
этом видео мы поговорим о том,
какие компоненты вообще и чаще всего есть

3
00:00:11,222 --> 00:00:16,565
в современном веб-сервисе, которые

4
00:00:16,565 --> 00:00:20,910
не пишутся зачастую руками разработчиков,
а используются готовые компоненты.

5
00:00:20,910 --> 00:00:23,843
Итак, начнем с роутинга.

6
00:00:23,843 --> 00:00:28,738
Роутер — это код,
который преобразует запрос,

7
00:00:28,738 --> 00:00:34,384
который к вам пришел,
в вызов нужной вам функции.

8
00:00:34,384 --> 00:00:39,293
В базовом, базовой поставке в
Go довольно простой роутер,

9
00:00:39,293 --> 00:00:44,221
и мы рассмотрим более богатые
на возможности варианты,

10
00:00:44,221 --> 00:00:48,553
в частности, Gorilla Mux и HTTP Router.

11
00:00:48,553 --> 00:00:53,771
Далее, почти в каждом сервере есть
авторизация и аутентификация.

12
00:00:53,771 --> 00:00:54,604
Мы же не хотим,

13
00:00:54,604 --> 00:01:00,490
чтобы пользователь редактировал личную
информацию о других пользователях?

14
00:01:00,490 --> 00:01:05,332
Конечно, для работы с сессиями
и для проверки пароля в

15
00:01:05,332 --> 00:01:07,372
Go тоже есть инструменты.

16
00:01:07,372 --> 00:01:08,354
Логирование.

17
00:01:08,354 --> 00:01:11,680
Логирование — очень важная
часть любого сервера.

18
00:01:11,680 --> 00:01:16,320
Без логирования в случае аварии
вы не поймете, что происходит,

19
00:01:16,320 --> 00:01:20,064
на каком внешнем ресурсе была ошибка,

20
00:01:20,064 --> 00:01:24,720
либо это где-то у вас что-то неправильно
отрабатывается, и просходит паника.

21
00:01:24,720 --> 00:01:27,787
Какие инструменты для
логирования есть в Go,

22
00:01:27,787 --> 00:01:33,140
и какие компоненты можно поставить
дополнительно, тоже мы будем разбирать.

23
00:01:33,140 --> 00:01:34,510
Обработка ошибок.

24
00:01:34,510 --> 00:01:40,900
Очень много где в коде я делаю вот так,
как делать не надо,

25
00:01:40,900 --> 00:01:45,430
а как надо, еще не очень понятно.

26
00:01:45,430 --> 00:01:49,258
И как вообще обрабатывать ошибки
нормально, как доставать оттуда нужную вам

27
00:01:49,258 --> 00:01:53,018
информацию, как не просто прокидывать
ее наверх либо паниковать,

28
00:01:53,018 --> 00:01:55,150
будет рассказано в следующих видео.

29
00:01:55,150 --> 00:01:57,902
Валидация входных параметров.

30
00:01:57,902 --> 00:02:02,290
Естественно, мы ждем, что в каких-то
параметрах нам будут приходить целые

31
00:02:02,290 --> 00:02:05,326
числа, в каких-то параметрах
будут приходить строки,

32
00:02:05,326 --> 00:02:10,126
в каких-то — более сложные
структуры данных, например, EML.

33
00:02:10,126 --> 00:02:16,600
Также мы не всегда хотим парсить все
это руками из GET или POST-параметров.

34
00:02:16,600 --> 00:02:19,866
Хорошо было бы иметь компонент,

35
00:02:19,866 --> 00:02:25,630
куда можно все скормить,
и он заполнит нам поля структуры.

36
00:02:25,630 --> 00:02:28,753
Я расскажу вам, какие компоненты
можно для этого использовать,

37
00:02:28,753 --> 00:02:29,990
и через что они работают.

38
00:02:29,990 --> 00:02:32,744
Шаблонизация.

39
00:02:32,744 --> 00:02:39,345
В Go довольно мощная система
шаблонов в стандартной библиотеке,

40
00:02:39,345 --> 00:02:43,780
но работает она на рефлексии,
и иногда хочется чего-то больше.

41
00:02:43,780 --> 00:02:48,110
Я расскажу про компилируемые шаблоны
и их преимущества и недостатки.

42
00:02:48,110 --> 00:02:50,069
Конфигурирование.

43
00:02:50,069 --> 00:02:54,906
Очень редко какой сервер
работает сразу «из коробки».

44
00:02:54,906 --> 00:02:59,690
Очень часто нам нужно что-то настраивать,
хотя бы указать порт,

45
00:02:59,690 --> 00:03:05,031
который мы будем слушать,
на котором мы будем принимать запросы.

46
00:03:05,031 --> 00:03:08,739
Гораздо чаще там есть очень
много других параметров.

47
00:03:08,739 --> 00:03:13,239
Я буду рассказывать, каким образом
можно использовать стандартную

48
00:03:13,239 --> 00:03:18,380
библиотеку для этого, либо же как
реализовать онлайн-конфигурирование,

49
00:03:18,380 --> 00:03:22,915
которое позволяет менять параметры
сервера без перезагрузки.

50
00:03:22,915 --> 00:03:24,320
Далее мониторинг.

51
00:03:24,320 --> 00:03:31,559
Если логирование позволяет вам узнать,
что произошло, когда оно уже произошло,

52
00:03:31,559 --> 00:03:36,820
мониторинг позволяет «с высоты
птичьего полета» охватить всю картину,

53
00:03:36,820 --> 00:03:43,311
для того чтобы узнать,
у вас все ОК или не ОК, и вы вообще живы?

54
00:03:43,311 --> 00:03:48,454
Я расскажу, что в Go есть для этого: какие
есть стандартные средства, какие внешние

55
00:03:48,454 --> 00:03:54,267
библиотеки можно использовать, как
реализовать базовый мониторинг сервера.

56
00:03:54,267 --> 00:03:56,435
Middleware и фреймворки.

57
00:03:56,435 --> 00:04:01,377
Middleware — в русском языке нет
красивого названия — переводится

58
00:04:01,377 --> 00:04:03,254
как «промежуточный код».

59
00:04:03,254 --> 00:04:08,115
Большая часть вышеописанных компонентов
как раз реализуется при помощи

60
00:04:08,115 --> 00:04:13,258
промежуточного кода, потому что в
каждой функции писать каждый раз

61
00:04:13,258 --> 00:04:18,963
обработку авторизации,
access log и обработку паники утомляет.

62
00:04:18,963 --> 00:04:21,520
Естественно, хочется все
это обернуть красиво.

63
00:04:21,520 --> 00:04:27,136
Ну а фреймворк — это уже готовый набор
плотно интегрированных компонентов,

64
00:04:27,136 --> 00:04:32,395
который предоставляет сразу, «из коробки»,
вам очень много возможностей.

65
00:04:32,395 --> 00:04:36,170
Ну и, наконец, работа с базами
и разного рода хранилищами.

66
00:04:36,170 --> 00:04:41,443
Большая часть веб-систем основана на том,
что нам нужно принять от пользователя

67
00:04:41,443 --> 00:04:46,810
данные и положить их в базу, либо
достать из базы и показать пользователю.

68
00:04:46,810 --> 00:04:51,579
Я расскажу вам, как работать в Go с SQL и

69
00:04:51,579 --> 00:04:56,147
NoSQL-хранилищами, а
также системами очередей.