[БЕЗ_ЗВУКА] В этом видео мы поговорим о том,
какие компоненты вообще и чаще всего есть в современном веб-сервисе, которые не пишутся зачастую руками разработчиков,
а используются готовые компоненты. Итак, начнем с роутинга. Роутер — это код,
который преобразует запрос, который к вам пришел,
в вызов нужной вам функции. В базовом, базовой поставке в
Go довольно простой роутер, и мы рассмотрим более богатые
на возможности варианты, в частности, Gorilla Mux и HTTP Router. Далее, почти в каждом сервере есть
авторизация и аутентификация. Мы же не хотим, чтобы пользователь редактировал личную
информацию о других пользователях? Конечно, для работы с сессиями
и для проверки пароля в Go тоже есть инструменты. Логирование. Логирование — очень важная
часть любого сервера. Без логирования в случае аварии
вы не поймете, что происходит, на каком внешнем ресурсе была ошибка, либо это где-то у вас что-то неправильно
отрабатывается, и просходит паника. Какие инструменты для
логирования есть в Go, и какие компоненты можно поставить
дополнительно, тоже мы будем разбирать. Обработка ошибок. Очень много где в коде я делаю вот так,
как делать не надо, а как надо, еще не очень понятно. И как вообще обрабатывать ошибки
нормально, как доставать оттуда нужную вам информацию, как не просто прокидывать
ее наверх либо паниковать, будет рассказано в следующих видео. Валидация входных параметров. Естественно, мы ждем, что в каких-то
параметрах нам будут приходить целые числа, в каких-то параметрах
будут приходить строки, в каких-то — более сложные
структуры данных, например, EML. Также мы не всегда хотим парсить все
это руками из GET или POST-параметров. Хорошо было бы иметь компонент, куда можно все скормить,
и он заполнит нам поля структуры. Я расскажу вам, какие компоненты
можно для этого использовать, и через что они работают. Шаблонизация. В Go довольно мощная система
шаблонов в стандартной библиотеке, но работает она на рефлексии,
и иногда хочется чего-то больше. Я расскажу про компилируемые шаблоны
и их преимущества и недостатки. Конфигурирование. Очень редко какой сервер
работает сразу «из коробки». Очень часто нам нужно что-то настраивать,
хотя бы указать порт, который мы будем слушать,
на котором мы будем принимать запросы. Гораздо чаще там есть очень
много других параметров. Я буду рассказывать, каким образом
можно использовать стандартную библиотеку для этого, либо же как
реализовать онлайн-конфигурирование, которое позволяет менять параметры
сервера без перезагрузки. Далее мониторинг. Если логирование позволяет вам узнать,
что произошло, когда оно уже произошло, мониторинг позволяет «с высоты
птичьего полета» охватить всю картину, для того чтобы узнать,
у вас все ОК или не ОК, и вы вообще живы? Я расскажу, что в Go есть для этого: какие
есть стандартные средства, какие внешние библиотеки можно использовать, как
реализовать базовый мониторинг сервера. Middleware и фреймворки. Middleware — в русском языке нет
красивого названия — переводится как «промежуточный код». Большая часть вышеописанных компонентов
как раз реализуется при помощи промежуточного кода, потому что в
каждой функции писать каждый раз обработку авторизации,
access log и обработку паники утомляет. Естественно, хочется все
это обернуть красиво. Ну а фреймворк — это уже готовый набор
плотно интегрированных компонентов, который предоставляет сразу, «из коробки»,
вам очень много возможностей. Ну и, наконец, работа с базами
и разного рода хранилищами. Большая часть веб-систем основана на том,
что нам нужно принять от пользователя данные и положить их в базу, либо
достать из базы и показать пользователю. Я расскажу вам, как работать в Go с SQL и NoSQL-хранилищами, а
также системами очередей.