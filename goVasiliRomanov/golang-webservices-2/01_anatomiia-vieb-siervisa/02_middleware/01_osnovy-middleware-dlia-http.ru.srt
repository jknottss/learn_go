1
00:00:00,000 --> 00:00:09,631
[БЕЗ_ЗВУКА] В этом видео мы
поговорим про Middleware.

2
00:00:09,631 --> 00:00:14,733
Middleware это промежуточный код,
который располагается между реальным

3
00:00:14,733 --> 00:00:19,480
оригинальным запросом и
вашей бизнес-логикой.

4
00:00:19,480 --> 00:00:22,766
То есть в общем случае Middleware
является любой фреймворк,

5
00:00:22,766 --> 00:00:28,128
потому что он осуществляет какой-то
набор общих операций, общих проверок.

6
00:00:28,128 --> 00:00:34,930
Но мы поговорим о том, каким образом можно
реализовать базовый функционал Middleware,

7
00:00:34,930 --> 00:00:39,650
используя стандартную библиотеку и
без каких-либо внешних зависимостей.

8
00:00:39,650 --> 00:00:42,290
Для начала рассмотрим этот код.

9
00:00:42,290 --> 00:00:48,830
У нас есть функция pageWithAllChecks,
в начале функции мы обрабатываем панику.

10
00:00:48,830 --> 00:00:53,013
Если вдруг у нас что-то где-то
спаниковало в глубине, такого, конечно,

11
00:00:53,013 --> 00:00:59,550
у вас быть не должно, то нам нужно это
перехватить, чтобы процесс не упал.

12
00:00:59,550 --> 00:01:03,270
Панику надо обрабатывать всегда.

13
00:01:03,270 --> 00:01:09,071
Дальше у нас идет печать accessLog,
мы печатаем,

14
00:01:09,071 --> 00:01:13,330
какой тип запроса, url, с какого адреса
он пришел, сколько времени занял.

15
00:01:13,330 --> 00:01:19,370
AccessLog тоже нужен всегда, мы же
хотим понимать, что у нас происходит.

16
00:01:19,370 --> 00:01:22,713
Дальше у нас идет такая проверка
авторизации, в кавычках,

17
00:01:22,713 --> 00:01:25,410
потому что мы просто
проверяем наличие cookie.

18
00:01:25,410 --> 00:01:26,405
Вот.

19
00:01:26,405 --> 00:01:31,380
Вроде бы весь этот код нужен.

20
00:01:31,380 --> 00:01:36,155
Однако, если вы будете копипастить
его из функции в функцию,

21
00:01:36,155 --> 00:01:40,239
и вам потребуется что-то изменить, то
скорее всего где-то вы изменить забудете,

22
00:01:40,239 --> 00:01:42,480
пропустите, и будет ошибка.

23
00:01:42,480 --> 00:01:47,288
Теперь рассмотрим,
каким образом можно избавиться от этого

24
00:01:47,288 --> 00:01:49,910
дублирования и сделать
эти проверки общими.

25
00:01:49,910 --> 00:01:53,340
Рассмотрим Handler.

26
00:01:53,340 --> 00:01:58,050
Итак, сначала у нас есть

27
00:01:58,050 --> 00:02:02,175
админский мультиплексор какой-либо.

28
00:02:02,175 --> 00:02:02,938
Вот.

29
00:02:02,938 --> 00:02:10,030
Он обрабатывает страницу админа и
обрабатывает демо-страницу с паникой.

30
00:02:10,030 --> 00:02:13,600
В нем, в этом,

31
00:02:13,600 --> 00:02:19,200
в этих страницах по этому префиксу
admin нам нужна авторизация.

32
00:02:19,200 --> 00:02:24,615
Поэтому мы завернем его
в adminAuthMiddleware.

33
00:02:24,615 --> 00:02:26,192
Что мы сделаем?

34
00:02:26,192 --> 00:02:33,430
Мы передадим в него наш мультиплексор,
а вернет нам это функция Handler.

35
00:02:33,430 --> 00:02:35,713
Теперь пойдем дальше.

36
00:02:35,713 --> 00:02:39,030
Сделаем еще один мультиплексор.

37
00:02:39,030 --> 00:02:45,120
Теперь это будет уже корневой
мультплексор запросов.

38
00:02:45,120 --> 00:02:48,498
Теперь смотрите,
мы в него админом передадим уже handler,

39
00:02:48,498 --> 00:02:51,030
который будет идти с авторизацией.

40
00:02:51,030 --> 00:02:55,370
Дальше у нас будут
страницы login и logout,

41
00:02:55,370 --> 00:02:59,455
и в конце мы установим еще какой-то

42
00:02:59,455 --> 00:03:04,532
middleware для печати
accessLog и печати panic.

43
00:03:04,532 --> 00:03:08,967
Это siteHandler и в конце уже в
непосредственно вебсервер мы передадим

44
00:03:08,967 --> 00:03:11,730
sitehandler, который будет
обрабатывать запросы.

45
00:03:11,730 --> 00:03:14,040
То есть что происходит?

46
00:03:14,040 --> 00:03:19,177
Смотрите, сначала у нас
отрабатывает panicMiddleware,

47
00:03:19,177 --> 00:03:22,990
после этого отрабатывает
accessLogMiddleware,

48
00:03:22,990 --> 00:03:28,230
а после у нас есть эта админская страница,
обрабатывает еще третий запрос,

49
00:03:28,230 --> 00:03:32,820
adminAuthMiddleware, то есть мы
построили такую цепочку функций,

50
00:03:32,820 --> 00:03:35,240
которая вызывается одна за другой.

51
00:03:35,240 --> 00:03:38,981
Обратите внимание, panic вызывается
последней, потому что выполняться они

52
00:03:38,981 --> 00:03:44,540
будут в обратном порядке по добавлению, то
есть сначала будет panic, потом accessLog.

53
00:03:44,540 --> 00:03:48,540
Теперь давайте смотреть,
каким образом это устроено.

54
00:03:48,540 --> 00:03:53,750
Начнем мы с panicMiddleware.

55
00:03:53,750 --> 00:03:57,917
Мы туда передаем http.Handler
во входящей функции,

56
00:03:57,917 --> 00:04:01,538
то есть это может быть Handler func любая,

57
00:04:01,538 --> 00:04:06,660
либо это может быть
мультиплексор запросов.

58
00:04:06,660 --> 00:04:07,570
Итак.

59
00:04:07,570 --> 00:04:09,413
И что происходит дальше?

60
00:04:09,413 --> 00:04:12,020
Мы возвращаем тоже http.Handler.

61
00:04:12,020 --> 00:04:18,700
И тут уже происходит вся магия.

62
00:04:18,700 --> 00:04:23,210
Вот здесь мы возвращаем функцию,

63
00:04:23,210 --> 00:04:28,701
которая как раз принимает
входящий запрос в себя,

64
00:04:28,701 --> 00:04:32,672
то есть сначала будет
отрабатывать эта функция.

65
00:04:32,672 --> 00:04:35,600
В ней мы сделаем в defer обработку паники,

66
00:04:35,600 --> 00:04:40,873
а потом сделаем следующую функцию, то есть
наша функция будет вызываться цепочкой,

67
00:04:40,873 --> 00:04:45,316
да, у нас их будет много, но тем не менее
они будут вызываться одна за другой.

68
00:04:45,316 --> 00:04:50,500
То есть смотрите, я сделал общую
функцию и обернул мой обработчик в нее,

69
00:04:50,500 --> 00:04:55,810
теперь по сути все мои обработчики
будут проходить через panicMiddleware.

70
00:04:55,810 --> 00:04:59,720
И в каждой из них будет свой
defer с обработкой panic.

71
00:04:59,720 --> 00:05:02,280
Рассмотрим дальше.

72
00:05:02,280 --> 00:05:05,270
accessLogMiddleware.

73
00:05:05,270 --> 00:05:07,942
Та же самая история.

74
00:05:07,942 --> 00:05:12,949
Мы оборачиваем функцию,
мы возвращаем функцию...

75
00:05:12,949 --> 00:05:16,430
мы принимаем http.Handler
и возвращаем http.Handler.

76
00:05:16,430 --> 00:05:21,760
http.Handler мы получаем тем,
что оборачиваем все это дело в функцию,

77
00:05:21,760 --> 00:05:24,720
мы печатаем какую-то информацию,

78
00:05:24,720 --> 00:05:28,842
какую Middleware отработал,
засекаем время начала запроса,

79
00:05:28,842 --> 00:05:32,650
потом идем дальше, вызываем следующую
функцию, которая идет там глубже.

80
00:05:32,650 --> 00:05:38,430
Когда эта функция отработала,
мы уже печатаем что-то на экран.

81
00:05:38,430 --> 00:05:42,060
Ну и теперь adminAuthMiddleware.

82
00:05:42,060 --> 00:05:44,305
Опять та же самая история.

83
00:05:44,305 --> 00:05:50,060
То есть мы принимаем функцию и
возвращаем функцию ровно того же типа.

84
00:05:50,060 --> 00:05:55,992
При этом мы делаем там свою обертку над
ней, для того чтобы проверить наличие

85
00:05:55,992 --> 00:06:00,762
куки, если куки нет, мы средиректим
и сделаем return из этой функции,

86
00:06:00,762 --> 00:06:05,920
то есть мы не пойдем дальше
в уже нашу бизнес-логику,

87
00:06:05,920 --> 00:06:10,560
в которой будет вызываться по
[НЕРАЗБОРЧИВО] сервер http.

88
00:06:10,560 --> 00:06:15,950
То есть таким образом мы
сделали цепочку функций,

89
00:06:15,950 --> 00:06:19,640
то есть по сути мы обернули
в некий декоратор,

90
00:06:19,640 --> 00:06:24,510
который будет вызываться
одна за другой и дальше уже

91
00:06:24,510 --> 00:06:28,840
внутри не будет каждый раз
копипаст этого функционала.

92
00:06:28,840 --> 00:06:33,410
Теперь давайте посмотрим на
сами функции с бизнес-логикой.

93
00:06:33,410 --> 00:06:40,010
Например, страница паники.

94
00:06:40,010 --> 00:06:42,475
Я здесь просто вызываю сразу панику.

95
00:06:42,475 --> 00:06:43,785
Список админский.

96
00:06:43,785 --> 00:06:47,880
Вот этот вот adminindex он должен
идти сразу за авторизацией.

97
00:06:47,880 --> 00:06:52,230
Обратите внимание,
здесь я ничего для авторизации не делаю,

98
00:06:52,230 --> 00:06:54,700
я просто печатаю что-то на экран.

99
00:06:54,700 --> 00:07:00,130
logout, login и список.

100
00:07:00,130 --> 00:07:05,438
То есть все довольно просто и довольно

101
00:07:05,438 --> 00:07:10,756
компактно выходит,
мне не нужно уже копипастить.

102
00:07:10,756 --> 00:07:14,527
Конечно, вы можете пробросить

103
00:07:14,527 --> 00:07:19,470
из этой функции дальше вглубь
что-то через контекст.

104
00:07:19,470 --> 00:07:24,391
Давайте посмотрим, как это работает.

105
00:07:24,391 --> 00:07:25,120
Так.

106
00:07:25,120 --> 00:07:32,170
Итак, запускаем наш сервер.

107
00:07:32,170 --> 00:07:37,150
Вот наша страница логина.

108
00:07:37,150 --> 00:07:38,613
Посмотрим код.

109
00:07:38,613 --> 00:07:42,270
Итак, у нас вызвался panicMiddleware,

110
00:07:42,270 --> 00:07:48,208
accessLogMiddleware и accessLogMiddleware
нам напечатал строчку,

111
00:07:48,208 --> 00:07:53,740
что у нас GET-запрос, дальше адрес,
которым он был вызван,

112
00:07:53,740 --> 00:08:00,809
хост, с которого он был вызван, ну это
корень, и ноль секунд времени он занял,

113
00:08:00,809 --> 00:08:04,390
то есть у меня не было никаких внешних
походов, поэтому все очень быстро.

114
00:08:04,390 --> 00:08:11,543
Теперь нажимаем кнопку login, теперь
login мне выставил из кука, смотрим код.

115
00:08:11,543 --> 00:08:12,070
Ага.

116
00:08:12,070 --> 00:08:12,711
Login.

117
00:08:12,711 --> 00:08:18,490
Отлично отработал panic, accessLog
и accessLog нам что-то напечатал.

118
00:08:18,490 --> 00:08:20,963
Ну и средиректил нас в корень.

119
00:08:20,963 --> 00:08:25,820
Теперь зайдем на админскую страницу,
допустим, паника.

120
00:08:25,820 --> 00:08:31,181
Мне сразу же напечатал internal server
error, потому что там сразу паника,

121
00:08:31,181 --> 00:08:34,870
итак, отработал panicMiddleware,
accessLogMiddleware и admin.

122
00:08:34,870 --> 00:08:37,667
На предыдущих страницах
админ не отрабатывал,

123
00:08:37,667 --> 00:08:41,360
потому что он установлен только
для Handler с префиксом admin.

124
00:08:41,360 --> 00:08:45,399
Ну и паника, которая у меня завершилась.

125
00:08:45,399 --> 00:08:48,959
Теперь просто список с админских страниц.

126
00:08:48,959 --> 00:08:50,573
Ну вот общая страница.

127
00:08:50,573 --> 00:08:56,290
Теперь если я, например, сделаю выход,
да, то есть у меня куки нету,

128
00:08:56,290 --> 00:09:00,489
зайду на adminpanic даже,
меня сразу опять средиректнуло на login,

129
00:09:00,489 --> 00:09:05,475
потому что у меня нет авторизации,
нет куки, ну и в логе у меня тоже есть,

130
00:09:05,475 --> 00:09:11,893
я зашел на панику, мне сказано, опять
вызвалась паника и access, и adminAuth, и

131
00:09:11,893 --> 00:09:16,080
adminAuth сказал: друг, у тебя авторизации
нет, я тебя средирекчу обратно.

132
00:09:16,080 --> 00:09:19,120
Также запрос занял одну милисекунду.

133
00:09:19,120 --> 00:09:26,513
Вот таким образом вы можете
строить цепочки с Middleware,

134
00:09:26,513 --> 00:09:31,609
с каким-то промежуточным кодом,
в идеале вы

135
00:09:31,609 --> 00:09:36,734
можете сделать вообще свой роутер,
который или там даже свой фреймворк,

136
00:09:36,734 --> 00:09:40,840
который будет проводить всю цепочку
вплоть до валидации парсинга параметров.

137
00:09:40,840 --> 00:09:46,380
Но скорее всего вы будете
пользоваться каким-либо фреймворком.

138
00:09:46,380 --> 00:09:50,965
Но тем не менее это знание
вам может быть полезным

139
00:09:50,965 --> 00:09:55,550
в каких-либо других местах, в каком-то
другом коде, который вы будете писать.