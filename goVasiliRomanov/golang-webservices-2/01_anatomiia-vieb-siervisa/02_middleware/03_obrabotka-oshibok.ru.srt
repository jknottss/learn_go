1
00:00:00,000 --> 00:00:05,322
[БЕЗ_ЗВУКА] Во

2
00:00:05,322 --> 00:00:12,177
многих предыдущих видео мы часто
возвращали ошибки из наших функций,

3
00:00:12,177 --> 00:00:17,060
иногда выводили их на экран, иногда
обрабатывали, иногда просто игнорировали.

4
00:00:17,060 --> 00:00:21,625
Настало время поговорить немного
подробнее о том, что такое ошибка,

5
00:00:21,625 --> 00:00:24,830
как лучше ее писать,
как лучше ее обрабатывать.

6
00:00:24,830 --> 00:00:29,210
Рассмотрим следующую функцию.

7
00:00:29,210 --> 00:00:34,790
Представим, что у нас есть какой-то
веб-сервис, которых ходит на какой-то

8
00:00:34,790 --> 00:00:40,320
удаленный ресурс по http
и что-то там парсит.

9
00:00:40,320 --> 00:00:44,259
В данном случае неважно что,
результат мы тут использовать не будем,

10
00:00:44,259 --> 00:00:45,450
нам главное ошибка.

11
00:00:45,450 --> 00:00:50,310
У меня есть клиент, http.Client,

12
00:00:50,310 --> 00:00:55,170
в который я устанавливаю очень
маленький тайм-аут — одну миллисекунду.

13
00:00:55,170 --> 00:01:00,710
Плюс я иду на сервис,
где никто не слушает порт.

14
00:01:00,710 --> 00:01:02,931
Почему я не использую дефолтный клиент?

15
00:01:02,931 --> 00:01:07,060
Я уже говорил, когда рассказывал про
http.Client, — там нет таймаутов.

16
00:01:07,060 --> 00:01:10,012
А я хочу получить ошибку очень быстро.

17
00:01:10,012 --> 00:01:14,985
Я вызываю у клиента метод get, передаю
туда url какой-то, который, допустим,

18
00:01:14,985 --> 00:01:17,630
меняется внутри нашего
приложения периодически.

19
00:01:17,630 --> 00:01:20,950
И мне вернулась ошибка.

20
00:01:20,950 --> 00:01:26,890
То есть часто можно встретить
такое: return err сразу.

21
00:01:26,890 --> 00:01:28,550
Почему это плохо?

22
00:01:28,550 --> 00:01:34,680
Точнее, почему это может быть плохо,
почему это может быть хорошо?

23
00:01:34,680 --> 00:01:38,615
Представьте тот сервис, та библиотека,

24
00:01:38,615 --> 00:01:43,500
которые вызывают,
просто вернут вам таймаут.

25
00:01:43,500 --> 00:01:47,030
Просто строчка timed out.

26
00:01:47,030 --> 00:01:47,987
И что?

27
00:01:47,987 --> 00:01:51,820
Окей, вы выведете ее в лог,

28
00:01:51,820 --> 00:01:57,010
и где искать этот таймаут, как вы
вообще поймете, что там есть таймаут?

29
00:01:57,010 --> 00:02:00,410
Допустим, у вас есть access log,
он выведет вам строчку,

30
00:02:00,410 --> 00:02:03,538
что была пятисотка и какую-то
информацию об ошибке.

31
00:02:03,538 --> 00:02:04,560
Окей, таймаут.

32
00:02:04,560 --> 00:02:09,420
Представьте, что у вас поход не на
один внешний ресурс, а на десять.

33
00:02:09,420 --> 00:02:13,830
И какой из этих сервисов
вообще «стаймаутит»?

34
00:02:13,830 --> 00:02:17,287
Поэтому так делать можно,

35
00:02:17,287 --> 00:02:23,430
если вы сможете потом из этой
ошибки как-то вытащить контекст.

36
00:02:23,430 --> 00:02:28,240
Но гораздо чаще делают вот так.

37
00:02:28,240 --> 00:02:33,850
То есть оборачивают эту ошибку еще в одну,

38
00:02:33,850 --> 00:02:36,698
то есть каким-то префиксом.

39
00:02:36,698 --> 00:02:40,321
В данном случае у меня
я написал res error,

40
00:02:40,321 --> 00:02:43,480
могу поставить тут название функции.

41
00:02:43,480 --> 00:02:44,633
И саму ошибку.

42
00:02:44,633 --> 00:02:48,810
Можно ее как строку интерпретировать,
можно вот так,

43
00:02:48,810 --> 00:02:54,010
как полностью тип данных, который в Go.

44
00:02:54,010 --> 00:02:57,600
Это уже лучше.

45
00:02:57,600 --> 00:03:04,288
Однако вам вернется таймаут,
а на каком ресурсе?

46
00:03:04,288 --> 00:03:08,210
Допустим, пользователь может сходить
в несколько разных ресурсов,

47
00:03:08,210 --> 00:03:09,853
передав какой-то параметр.

48
00:03:09,853 --> 00:03:13,391
Хорошо, если этот параметр у вас
залогируется и вы будете знать,

49
00:03:13,391 --> 00:03:14,220
куда вы идете.

50
00:03:14,220 --> 00:03:21,144
Однако бывает так, что непонятно вообще,
на чем мы стаймаутили.

51
00:03:21,144 --> 00:03:26,540
Но хотя бы у нас уже есть какая-то
наводка, что getRemoteResource.

52
00:03:26,540 --> 00:03:31,490
Поэтому этот вариант
тоже не всегда подходит.

53
00:03:31,490 --> 00:03:35,948
Точнее, он имеет место быть,

54
00:03:35,948 --> 00:03:39,740
часто делают именно так, если просто
хотят набрать какую-то пачку значений.

55
00:03:39,740 --> 00:03:42,236
И потом просто в одном месте вывести.

56
00:03:42,236 --> 00:03:48,106
Получается своего рода цепочка,
и в целом можно догадаться уже, что.

57
00:03:48,106 --> 00:03:54,542
Однако лучше, если ошибка содержит
не просто, где она произошла,

58
00:03:54,542 --> 00:04:00,864
res error или getRemoteResource,
не только что случилось,

59
00:04:00,864 --> 00:04:06,624
то есть сам текст ошибки, но еще и
с какими параметрами она произошла.

60
00:04:06,624 --> 00:04:09,830
Например, в данном случае
у меня параметр — это url.

61
00:04:09,830 --> 00:04:14,310
И я его тут ввожу.

62
00:04:14,310 --> 00:04:19,360
Когда вы выведете табло,
у вас сразу будет понятно, что случилось,

63
00:04:19,360 --> 00:04:25,710
что вывелась ошибка на конкретном месте,
для такого-то url.

64
00:04:25,710 --> 00:04:31,570
По крайней мере, по этому вы можете
какую-то статистику уже построить.

65
00:04:31,570 --> 00:04:36,030
И дальше мы в месте,
где мы получаем getRemoteResource,

66
00:04:36,030 --> 00:04:39,455
смотрим: если ошибка не нулевая,

67
00:04:39,455 --> 00:04:44,957
то мы ее просто выводим в
лог и выдаем пятисотку.

68
00:04:44,957 --> 00:04:50,046
То есть последний приведенный пример,

69
00:04:50,046 --> 00:04:54,580
когда я оборачиваю ошибку с указанием,
где она произошла,

70
00:04:54,580 --> 00:04:59,490
для чего она произошла и с самим текстом
ошибки, он уже имеет место для жизни,

71
00:04:59,490 --> 00:05:02,053
им уже можно пользоваться.

72
00:05:02,053 --> 00:05:09,399
Но иногда мы хотим конкретно проверять,
какая ошибка вернулась.

73
00:05:09,399 --> 00:05:12,989
Например, мы хотим точно знать,
что нам вернулся таймаут.

74
00:05:12,989 --> 00:05:16,951
Мы хотим иметь своего рода
типизированную ошибку.

75
00:05:16,951 --> 00:05:19,490
Каким образом это происходит?

76
00:05:19,490 --> 00:05:22,399
Рассмотрим следующий пример.

77
00:05:22,399 --> 00:05:26,302
Тут я использовал пакет errors,
просто errors.

78
00:05:26,302 --> 00:05:29,330
У него есть функция New,
он может создать новую ошибку.

79
00:05:29,330 --> 00:05:34,080
Туда я написал resource error и
присвоил эту ошибку уже в переменную.

80
00:05:34,080 --> 00:05:40,100
Теперь я могу просто вернуть
сразу эту переменную,

81
00:05:40,100 --> 00:05:45,950
а на другой стороне я через встречный
пример я могу эту переменную проверить.

82
00:05:45,950 --> 00:05:50,490
Таким образом я могу определить,
какого типа была ошибка.

83
00:05:50,490 --> 00:05:56,051
И уже в зависимости от этого я
могу либо написать internal error,

84
00:05:56,051 --> 00:06:00,612
как было, либо могу сказать, что это
не просто какая-то непонятная ошибка,

85
00:06:00,612 --> 00:06:06,970
а ошибка парсинга ресурса,
ошибка доступа к удаленному ресурсу.

86
00:06:06,970 --> 00:06:10,797
То есть ошибка у меня уже
принимает какой-то тип.

87
00:06:10,797 --> 00:06:13,920
Однако в этом случае теряется контекст.

88
00:06:13,920 --> 00:06:17,389
Я уже не могу понять,
на каком url оно произошло,

89
00:06:17,389 --> 00:06:21,030
и мне нужно еще это как-то
оборачивать во что-то.

90
00:06:21,030 --> 00:06:26,770
Пойдем дальше.

91
00:06:26,770 --> 00:06:31,550
И тут мы приходим к тому,
что такое вообще ошибка.

92
00:06:31,550 --> 00:06:35,466
Мы везде возвращаем error.

93
00:06:35,466 --> 00:06:43,980
Вот он, error — это интерфейс.

94
00:06:43,980 --> 00:06:49,869
[ЗВУК] У него единственное,

95
00:06:49,869 --> 00:06:55,630
что должно быть, функция error,
всё, которая возвращает строчку.

96
00:06:55,630 --> 00:07:00,085
Любая ваша структура,
которая подойдет под этот интерфейс,

97
00:07:00,085 --> 00:07:02,950
может возвращаться в качестве ошибки.

98
00:07:02,950 --> 00:07:04,911
Почему не сделали стринг?

99
00:07:04,911 --> 00:07:09,771
Потому что стринг часто используется
для приведения какой-то, например,

100
00:07:09,771 --> 00:07:12,340
структуры в строковую
форму для блогирования.

101
00:07:12,340 --> 00:07:16,350
Поэтому стринг не подошел, и у нас error.

102
00:07:16,350 --> 00:07:23,358
Для этого введем нашу отдельную
типизированную ошибку.

103
00:07:23,358 --> 00:07:26,815
Допустим, она будет
называться ResourceError.

104
00:07:26,815 --> 00:07:31,665
У нее будет уже URL как поле структуры

105
00:07:31,665 --> 00:07:35,422
и ошибка,
которая там в реальности произошла.

106
00:07:35,422 --> 00:07:39,983
Функция Error, которая и делает нашу
структуру ошибкой, выводит текст.

107
00:07:39,983 --> 00:07:44,002
Что она говорит: Resource error на
таком-то URL, и такая-то ошибка там

108
00:07:44,002 --> 00:07:49,450
произошла дальше, используя, собственно,
параметры этой самой структуры.

109
00:07:49,450 --> 00:07:55,066
И когда я смогу определить,

110
00:07:55,066 --> 00:08:02,420
что у меня произошла ошибка,
и я хочу вернуть типизированную ошибку.

111
00:08:02,420 --> 00:08:07,360
Это уже будет не просто
именованная какая-то переменная,

112
00:08:07,360 --> 00:08:11,730
а прямо уже целая структура,
которая содержит в себе информацию о том,

113
00:08:11,730 --> 00:08:17,700
на каком месте произошла эта ошибка,
и сам текст ошибки.

114
00:08:17,700 --> 00:08:19,487
Вот как это выглядит.

115
00:08:19,487 --> 00:08:22,320
То есть я делаю return и структуру.

116
00:08:22,320 --> 00:08:25,452
Поскольку это интерфейс,
то он возвращается корректно,

117
00:08:25,452 --> 00:08:29,062
и я всегда могу там дальше уже проверить.

118
00:08:29,062 --> 00:08:30,798
Как проверить?

119
00:08:30,798 --> 00:08:36,110
В этом нам поможет type casting,
то есть я пытаюсь

120
00:08:36,110 --> 00:08:42,250
привести к чему-то интерфейс и
пытаюсь определить, какого он типа.

121
00:08:42,250 --> 00:08:46,592
В данном случае я делаю
switch err.(type) в скобках.

122
00:08:46,592 --> 00:08:50,741
Это мне выдаст тип,
какого рода ошибка у меня есть.

123
00:08:50,741 --> 00:08:56,424
Значит, смотрим: первый кейс —
ошибка имеет тип ResourceError,

124
00:08:56,424 --> 00:08:58,630
как раз та структура.

125
00:08:58,630 --> 00:09:00,655
Теперь что я делаю?

126
00:09:00,655 --> 00:09:04,325
Я привожу ее уже к нужному типу.

127
00:09:04,325 --> 00:09:09,338
И я не могу обратиться по интерфейсу
к полям структуры, то есть

128
00:09:09,338 --> 00:09:13,710
если бы я захотел обратиться к URL или
к этому полю, я бы не смог это сделать,

129
00:09:13,710 --> 00:09:18,982
потому что у интерфейсов этих полей нет,
они есть только у структуры.

130
00:09:18,982 --> 00:09:24,033
То есть я привел к нужному типу,
и теперь я могу уже вывести на

131
00:09:24,033 --> 00:09:28,947
экран не просто, что у меня произошла
какая-то ошибка с удаленным ресурсом,

132
00:09:28,947 --> 00:09:33,890
но я могу вывести URL и собственно сам
текст ошибки, которая там произошла.

133
00:09:33,890 --> 00:09:39,750
И в случае, если там вернулась любая
другая ошибка, я вывожу об этом текст,

134
00:09:39,750 --> 00:09:45,078
о том, что там случилась internal error
— просто какая-то неизвестная ошибка.

135
00:09:45,078 --> 00:09:49,320
Конечно, я могу добавлять
еще и еще кейсов.

136
00:09:49,320 --> 00:09:52,001
Это хорошо.

137
00:09:52,001 --> 00:09:54,239
Но что можно сделать еще?

138
00:09:54,239 --> 00:09:58,534
Иногда хочется стек трейс, иногда хочется
корректно оборачивать ошибку в ошибку,

139
00:09:58,534 --> 00:09:59,080
в ошибку.

140
00:09:59,080 --> 00:10:04,402
Есть пакет pkg/errors на GitHub.

141
00:10:04,402 --> 00:10:08,430
Он не встроен в Go, это внешний пакет,
его нужно поставить через Go get.

142
00:10:08,430 --> 00:10:13,000
И там есть возможность обернуть ошибку,

143
00:10:13,000 --> 00:10:17,410
которая была, в какой-то текст.

144
00:10:17,410 --> 00:10:21,543
Таким образом,
можно не типизировать ошибки,

145
00:10:21,543 --> 00:10:26,109
не сохранять ошибки для
каждого конкретного случая

146
00:10:26,109 --> 00:10:30,144
и иметь какой-то контекст для того,
чтобы определить,

147
00:10:30,144 --> 00:10:34,060
что там внутри произошло,
какого типа там была вообще ошибка.

148
00:10:34,060 --> 00:10:38,684
То есть если я делаю

149
00:10:38,684 --> 00:10:44,935
fmt, [ЗВУК]

150
00:10:44,935 --> 00:10:50,860
error %v вот так.

151
00:10:50,860 --> 00:10:55,457
И если я напишу вот так, то есть Errorf

152
00:10:55,457 --> 00:11:01,844
классическим способом,
то у меня вернется строка.

153
00:11:01,844 --> 00:11:04,836
И потом я с этой строкой уже
сделать ничего не смогу,

154
00:11:04,836 --> 00:11:06,680
разве что руками ее разбирать.

155
00:11:06,680 --> 00:11:08,562
Поэтому errors.Wrap.

156
00:11:08,562 --> 00:11:11,341
errors.Wrap оборачивает ошибки,

157
00:11:11,341 --> 00:11:16,088
то есть он не теряет тот контекст,
который был внутри нее.

158
00:11:16,088 --> 00:11:18,720
Контекст не путайте с пакетом.

159
00:11:18,720 --> 00:11:22,800
Не теряет ту ошибку, которая была внутри.

160
00:11:22,800 --> 00:11:27,570
На самом деле http.Client возвращает
URL error в случае таймаута.

161
00:11:27,570 --> 00:11:32,433
И теперь я могу уже посмотреть,
уже могу привязаться к

162
00:11:32,433 --> 00:11:37,670
этой ошибке для того,
чтобы проверить, что там было внутри.

163
00:11:37,670 --> 00:11:43,940
Итак, раньше мы приводили
нашу саму ошибку к тексту,

164
00:11:43,940 --> 00:11:48,973
а теперь я попробую получить причину этой

165
00:11:48,973 --> 00:11:53,705
ошибки, Cause(err) — это
как раз оригинальный текст,

166
00:11:53,705 --> 00:11:59,046
оригинальная прямо ошибка,
который я туда передал, когда делал wrap.

167
00:11:59,046 --> 00:12:01,740
Я пытаюсь к ней достучаться по type.

168
00:12:01,740 --> 00:12:04,477
И я проверяю ее на url.Error.

169
00:12:04,477 --> 00:12:08,839
До этого я искусно оборачивал
эту ошибку во что-то свое,

170
00:12:08,839 --> 00:12:16,057
на самом деле там возвращается url.Error,
у которого есть поле и URL, и Error.

171
00:12:16,057 --> 00:12:19,950
Итак, теперь я могу вывести это на экран.

172
00:12:19,950 --> 00:12:24,321
И более того,
если я попробую вывести полную ошибку,

173
00:12:24,321 --> 00:12:27,150
то в этом пакете есть стек трейс.

174
00:12:27,150 --> 00:12:32,021
Давайте посмотрим, как это работает.

175
00:12:32,021 --> 00:12:34,460
Запустили сервер.

176
00:12:34,460 --> 00:12:42,091
[ЗВУК] Мне выдало remoteResourceError.

177
00:12:42,091 --> 00:12:42,747
Почему?

178
00:12:42,747 --> 00:12:49,840
Потому что я определил это как urlError.

179
00:12:49,840 --> 00:12:53,653
Итак, смотрим текст: full error.

180
00:12:53,653 --> 00:12:59,210
Значит, Get какой-то url не получился,
потому что

181
00:12:59,210 --> 00:13:04,760
случилось вот такое вот, и текст resource
error, который я сам туда задавал.

182
00:13:04,760 --> 00:13:09,227
И плюс выводится стейк трейс
со всей цепочкой вызова,

183
00:13:09,227 --> 00:13:12,440
каким образом мы дошли до этой ошибки.

184
00:13:12,440 --> 00:13:17,744
А вот это вот уже вывожу
я в отдельной строчке:

185
00:13:17,744 --> 00:13:24,020
resource url не смог выполниться,
потому что ошибка такая-то.

186
00:13:24,020 --> 00:13:30,059
pkg/errors — это довольно распространенный

187
00:13:30,059 --> 00:13:34,940
способ работы с ошибками, он используется
очень многими пакетами в Go,

188
00:13:34,940 --> 00:13:39,390
и он рекомендуется к использованию.