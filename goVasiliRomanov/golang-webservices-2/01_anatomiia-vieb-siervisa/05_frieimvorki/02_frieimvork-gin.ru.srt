1
00:00:00,000 --> 00:00:05,304
[БЕЗ_ЗВУКА] В

2
00:00:05,304 --> 00:00:10,420
этом видео мы рассмотрим еще один
фреймворк под названием Gin.

3
00:00:10,420 --> 00:00:15,282
Он один из самых популярных в Go,
у него очень много звезд на GitHub.

4
00:00:15,282 --> 00:00:22,514
Также он считается одним из самых быстрых
web-фреймворков для данного языка.

5
00:00:22,514 --> 00:00:26,706
В частности, это достигается
благодаря используемому роутеру,

6
00:00:26,706 --> 00:00:29,240
который мы уже рассматривали
— HTTP-роутер.

7
00:00:29,240 --> 00:00:35,580
Благодаря ему ну и благодаря своим
оптимизациям он работает очень быстро.

8
00:00:35,580 --> 00:00:39,838
Теперь давайте посмотрим код.

9
00:00:39,838 --> 00:00:44,097
Gin — он не настолько вещь в себе,

10
00:00:44,097 --> 00:00:49,285
как Beego, хотя тоже у него свой контекст,

11
00:00:49,285 --> 00:00:53,790
через который происходят
все операции с запросом.

12
00:00:53,790 --> 00:00:59,886
Например, чтобы отдать в ответе
какой-то строковый параметр,

13
00:00:59,886 --> 00:01:04,300
мы можем использовать функцию
String прямо из контекста

14
00:01:04,300 --> 00:01:08,080
и написать туда статус
запроса и какой-то текст.

15
00:01:08,080 --> 00:01:15,272
Gin, помимо этого, предоставляет
некоторое количество middleware, то есть,

16
00:01:15,272 --> 00:01:20,250
например, у него из коробки есть логгер,
у него есть восстановление после паники.

17
00:01:20,250 --> 00:01:25,742
Благодаря тому,
что он построен на хорошем роутере,

18
00:01:25,742 --> 00:01:29,040
он сразу может из коробки
принимать параметры в роутах.

19
00:01:29,040 --> 00:01:33,520
У него есть встроенная basic-авторизация.

20
00:01:33,520 --> 00:01:39,210
Можно создавать группу роутов

21
00:01:39,210 --> 00:01:44,120
и на нее навешивать цепочки уже
middleware — те, которые вам нужны.

22
00:01:44,120 --> 00:01:46,614
Давайте по порядку.

23
00:01:46,614 --> 00:01:53,205
Вот пример, в котором я получаю параметр,

24
00:01:53,205 --> 00:01:58,335
ищу его значение в мапе,
параметра из роута, и потом отдаю в json.

25
00:01:58,335 --> 00:02:02,713
Обратите внимание: c — это контекст,
и всего лишь одна функция,

26
00:02:02,713 --> 00:02:06,950
для того чтобы отдать json туда
наверх вместе со статусом ответа.

27
00:02:06,950 --> 00:02:10,240
Рассмотрим это в коде.

28
00:02:10,240 --> 00:02:13,860
User — rvasily.

29
00:02:13,860 --> 00:02:19,420
Так, запустим сервер.

30
00:02:19,420 --> 00:02:23,610
Так, запустили.

31
00:02:23,610 --> 00:02:24,638
Вот.
Мне выдало,

32
00:02:24,638 --> 00:02:28,570
что сейчас никаких значений нет,
потому что их действительно там нет.

33
00:02:28,570 --> 00:02:31,466
При этом у меня в лог записалось,

34
00:02:31,466 --> 00:02:37,104
что произошел запрос на страницу
юзера с такого-то IP-адреса,

35
00:02:37,104 --> 00:02:41,890
занял время нисколько,
получил успешный ответ ну и нет,

36
00:02:41,890 --> 00:02:45,965
то есть очень важная информация
для логирования, действительно.

37
00:02:45,965 --> 00:02:48,917
Давайте посмотрим дальше,
давайте посмотрим,

38
00:02:48,917 --> 00:02:53,540
каким образом воспользоваться
basic-авторизацией.

39
00:02:53,540 --> 00:02:59,125
Так, admin &key=123.

40
00:02:59,125 --> 00:03:02,294
Так, имя пользователя,
какое у меня имя пользователя?

41
00:03:02,294 --> 00:03:03,660
А, да, 100500.

42
00:03:03,660 --> 00:03:09,075
rvasily, 100500, авторизуемся.

43
00:03:09,075 --> 00:03:09,961
И отлично.

44
00:03:09,961 --> 00:03:14,490
Теперь мне выдало большую ошибку
— на самом деле я ее выдал.

45
00:03:14,490 --> 00:03:16,661
Что это за ошибка?

46
00:03:16,661 --> 00:03:18,697
Рассмотрим код.

47
00:03:18,697 --> 00:03:23,645
Дело в том,
что в Gin еще встроен валидатор параметров

48
00:03:23,645 --> 00:03:26,330
— это тоже внешняя библиотека,
как и роутер,

49
00:03:26,330 --> 00:03:31,496
но Gin ее хорошо интегрирует в себя.

50
00:03:31,496 --> 00:03:35,894
Вот у меня есть функция Bind,
у меня есть, собственно,

51
00:03:35,894 --> 00:03:40,396
моя структура с параметрами,
есть ключ из формы,

52
00:03:40,396 --> 00:03:44,570
который я получаю, либо из query,
либо именно из формы, есть из json.

53
00:03:44,570 --> 00:03:48,170
И в binding у меня указано,
что это поле — required,

54
00:03:48,170 --> 00:03:52,250
то есть оно должно быть передано
в запросах действительно.

55
00:03:52,250 --> 00:03:55,676
Если это поле не передано,
я ругаюсь ошибкой — то,

56
00:03:55,676 --> 00:03:58,250
что вы как раз видели сейчас на экране.

57
00:03:58,250 --> 00:04:04,469
Теперь попробуем передать туда уже,
собственно,

58
00:04:04,469 --> 00:04:10,230
user_key — оно у меня имеет тип int,
поэтому я напишу вот так.

59
00:04:10,230 --> 00:04:11,581
Ага, опять ошибка.

60
00:04:11,581 --> 00:04:16,085
То есть я там ожидаю только int,
чтобы мне передали, а он мне говорит,

61
00:04:16,085 --> 00:04:18,946
что ParseInt нет, пожалуйста, int.

62
00:04:18,946 --> 00:04:21,165
Давайте запишем 42 туда.

63
00:04:21,165 --> 00:04:21,872
Отлично.

64
00:04:21,872 --> 00:04:28,900
Теперь мой запрос наконец-таки прошел
валидацию, и 42 выставилось в значении.

65
00:04:28,900 --> 00:04:34,520
Еще раз посмотрим на юзера,
и там значение 42, которое я передал.

66
00:04:34,520 --> 00:04:39,410
Все это прописано как раз через Gin.

67
00:04:39,410 --> 00:04:42,753
Я не буду глубоко останавливаться
на этом фреймворке,

68
00:04:42,753 --> 00:04:45,994
вы можете ознакомиться с документацией,
но в целом,

69
00:04:45,994 --> 00:04:50,250
если вам нужно сделать что-то маленькое
и быстрое, это неплохой выбор.