1
00:00:00,000 --> 00:00:07,280
[БЕЗ_ЗВУКА] В

2
00:00:07,280 --> 00:00:10,400
этом видео мы поговорим про
организацию зависимостей,

3
00:00:10,400 --> 00:00:14,430
то есть внешних пакетов с кодом,
которые требуются вашему приложению.

4
00:00:14,430 --> 00:00:20,429
Во многих других языках зависимости
устанавливаются через разного

5
00:00:20,429 --> 00:00:25,527
рода менеджеры пакетов либо как какие-то
прямо внешние отдельные пакеты,

6
00:00:25,527 --> 00:00:27,294
например rmp или deb.

7
00:00:27,294 --> 00:00:30,965
Либо же используется в Node.js,
например, rmp.

8
00:00:30,965 --> 00:00:34,115
В других языках есть
аналогичные инструменты,

9
00:00:34,115 --> 00:00:38,990
например pip в Python либо RubyGems.

10
00:00:38,990 --> 00:00:44,900
В Go есть тоже встроенный инструмент для
подтягивания внешних пакетов — go get.

11
00:00:44,900 --> 00:00:49,279
Вы уже много раз его видели и
наверняка уже даже пользовались.

12
00:00:49,279 --> 00:00:54,171
Однако есть и большой нюанс: он
устанавливает все эти зависимости в

13
00:00:54,171 --> 00:00:55,630
одну папку GOPATH.

14
00:00:55,630 --> 00:00:58,082
Почему это имеет значение?

15
00:00:58,082 --> 00:01:02,819
Потому что если вы работаете
над несколькими проектами,

16
00:01:02,819 --> 00:01:07,529
у вас могут отличаться зависимости,
которые нужны для этих проектов.

17
00:01:07,529 --> 00:01:10,547
Например, где-то нужны новые возможности,

18
00:01:10,547 --> 00:01:16,072
но там сломана обратная совместимость,
а вы не хотите тратить время на починку

19
00:01:16,072 --> 00:01:20,990
старого проекта — он уже работает
и не стоит там ничего менять.

20
00:01:20,990 --> 00:01:23,284
Как быть, что делать?

21
00:01:23,284 --> 00:01:29,670
Есть первый вариант,
самый такой в лоб — это менять GOPATH.

22
00:01:29,670 --> 00:01:34,642
То есть вы можете в env
переустановить значение этой

23
00:01:34,642 --> 00:01:39,595
переменной, и новый пакет
устанавливать в другое место.

24
00:01:39,595 --> 00:01:44,497
Но это не очень переносимо и требует
для удобства какой-нибудь Makefile,

25
00:01:44,497 --> 00:01:47,590
например, чтобы он там внутри
переопределял все и прочее.

26
00:01:47,590 --> 00:01:48,731
Вот.

27
00:01:48,731 --> 00:01:52,615
Поэтому в рабочей,

28
00:01:52,615 --> 00:01:57,640
в рабочей группе Go работают над тем,
какие инструменты предоставить.

29
00:01:57,640 --> 00:02:01,910
Пока они работают, уже родилось
несколько менеджеров зависимостей,

30
00:02:01,910 --> 00:02:08,096
которые ставят все
зависимости в папку vendor.

31
00:02:08,096 --> 00:02:11,995
И, вообще, работа зависимости
в Go называется vendoring.

32
00:02:11,995 --> 00:02:13,630
Рассмотрим следующий код.

33
00:02:13,630 --> 00:02:17,082
Собственно, сам код не нужен,
тут я использую grpc,

34
00:02:17,082 --> 00:02:19,570
пытаясь запустить какой-то сервер.

35
00:02:19,570 --> 00:02:24,170
go run main — и он мне говорит: оп,

36
00:02:24,170 --> 00:02:30,537
не получается запустить сервер,
потому что нет пакета,

37
00:02:30,537 --> 00:02:34,140
нет grpc установленного,
ни в GOROOT, ни в GOPATH, нигде.

38
00:02:34,140 --> 00:02:35,997
При этом что у меня лежит?

39
00:02:35,997 --> 00:02:39,712
У меня лежит только файл
main и какой-то еще glide.

40
00:02:39,712 --> 00:02:42,857
Поэтому первым — вот,
собственно, мой файл.

41
00:02:42,857 --> 00:02:47,830
И вот glide.md — это первый менеджер
зависимостей, про который мы поговорим.

42
00:02:47,830 --> 00:02:54,826
Что — в нем нет особо
ничего примечательного,

43
00:02:54,826 --> 00:03:00,020
он может просканировать — нет, не хочу.

44
00:03:00,020 --> 00:03:08,095
Он может просканировать ваш ваш
код на предмет тех зависимостей,

45
00:03:08,095 --> 00:03:12,355
которые там используются,
и построить glide-файл.

46
00:03:12,355 --> 00:03:16,180
Например, смотрите,
вот получился мой glide.yaml.

47
00:03:16,180 --> 00:03:20,735
Откроем его, и вот что мои зависимости

48
00:03:20,735 --> 00:03:25,299
требуют — что пакет такой-то требует
зависимости вот такой, grpc.

49
00:03:25,299 --> 00:03:29,261
Теперь я могу сделать установку этих
зависимостей: либо через glide get,

50
00:03:29,261 --> 00:03:32,620
либо через glide install,
который поставит мне все зависимости.

51
00:03:32,620 --> 00:03:35,333
Вот.
Теперь я подожду какое-то время,

52
00:03:35,333 --> 00:03:38,125
пока он подтянет вообще все зависимости.

53
00:03:38,125 --> 00:03:42,698
Он подтянет их,
включая зависимости от вашей зависимости,

54
00:03:42,698 --> 00:03:45,630
то есть всю цепочку, все поддерево.

55
00:03:45,630 --> 00:03:50,150
Куда он их положит и как
это будет запускаться?

56
00:03:50,150 --> 00:03:55,985
Дело в том,
что в Go пришли к такому решению,

57
00:03:55,985 --> 00:04:00,018
что если рядом с вашим кодом,
который вы запускаете,

58
00:04:00,018 --> 00:04:05,037
есть папка vendor — в данный момент
в нее скачиваются зависимости; о,

59
00:04:05,037 --> 00:04:10,739
уже скачались, — то тогда код, который
использует эти зависимости будет искать их

60
00:04:10,739 --> 00:04:15,842
в первую очередь в этой папке,
а не в GOROOT и GOPATH.

61
00:04:15,842 --> 00:04:18,291
Итак, что у нас появилось?

62
00:04:18,291 --> 00:04:21,980
glide.yaml вы уже видели,
появился glide.lock.

63
00:04:21,980 --> 00:04:27,237
glide.lock — там есть все

64
00:04:27,237 --> 00:04:32,853
зависимости, хеш- версия этой зависимости,

65
00:04:32,853 --> 00:04:36,850
гетовая, откуда идет, подпакеты и прочее.

66
00:04:36,850 --> 00:04:41,110
Вот.
И появился, появилась директория vendor,

67
00:04:41,110 --> 00:04:49,460
где все эти зависимости уже скачаны,
уже лежат.

68
00:04:49,460 --> 00:04:55,186
Теперь если я запущу свою программу,
которая ранее мне ругалась на то,

69
00:04:55,186 --> 00:05:00,660
что нет зависимости, она найдет эту
зависимость в папке vendor — напомню,

70
00:05:00,660 --> 00:05:07,170
вот она появилась рядом с моим
файлом — и успешно запустится.

71
00:05:07,170 --> 00:05:15,327
[ШУМ] Вот, запустилась, все хорошо.

72
00:05:15,327 --> 00:05:19,730
То есть теперь мой пакет использует
зависимости из этой папки.

73
00:05:19,730 --> 00:05:26,140
Другие зависимости могут быть найдены
либо опять-таки в этой папке,

74
00:05:26,140 --> 00:05:31,024
либо в общем GOROOT,
в общесистемной папке.

75
00:05:31,024 --> 00:05:33,060
Итак, но есть нюансы.

76
00:05:33,060 --> 00:05:38,250
То есть да, зависимости все подтягиваются,
однако подпакеты, subpkg,

77
00:05:38,250 --> 00:05:43,377
подтянуть не получится — вам
придется использовать полный путь

78
00:05:43,377 --> 00:05:50,306
для обращения к этому пакету там,
где он действительно должен лежать.

79
00:05:50,306 --> 00:05:57,380
Но либо вы можете, конечно, сделать вот
так, но это не очень рекомендуется.

80
00:05:57,380 --> 00:05:58,740
Это был glide.

81
00:05:58,740 --> 00:06:02,510
Менеджеров зависимости довольно много.

82
00:06:02,510 --> 00:06:04,837
Теперь рассмотрим еще один.

83
00:06:04,837 --> 00:06:09,614
Рассмотрим еще один, называется он dep.

84
00:06:09,614 --> 00:06:15,905
dep — это будущий стандартный
менеджер зависимостей,

85
00:06:15,905 --> 00:06:21,690
сейчас он находится в,
скажем так, зачаточном состоянии,

86
00:06:21,690 --> 00:06:25,279
то есть он умеет некоторые вещи,
но не все.

87
00:06:25,279 --> 00:06:29,059
Функционал его похож на glide,
похож на другие менеджеры.

88
00:06:29,059 --> 00:06:33,571
То есть у него тоже есть функция dep init,
которая тоже просканирует ваш код на

89
00:06:33,571 --> 00:06:38,650
предмет того, какие там зависимости нужны,
какие зависимости стоит установить.

90
00:06:38,650 --> 00:06:43,200
Делает он это какое-то время.

91
00:06:43,200 --> 00:06:48,146
И, собственно, от glide он уже не будет

92
00:06:48,146 --> 00:06:53,130
отличаться — ну, будет отличаться,
но не так много, не так сильно.

93
00:06:53,130 --> 00:06:58,330
Он так же хранит список зависимостей,
так же хранит версии этих зависимостей.

94
00:06:58,330 --> 00:06:59,868
А, вот, отлично.

95
00:06:59,868 --> 00:07:03,040
Все нашел, все установил, все скачал.

96
00:07:03,040 --> 00:07:09,530
Посмотрим: уже и папка vendor появилась,
и Gopkg появился.

97
00:07:09,530 --> 00:07:12,109
glide мы закроем.

98
00:07:12,109 --> 00:07:16,545
Вот файл, который создал dep,

99
00:07:16,545 --> 00:07:20,975
вот мои зависимости, grpc.

100
00:07:20,975 --> 00:07:26,290
Вот все версии, которые там лежат
и с хешами всех зависимостей.

101
00:07:26,290 --> 00:07:33,579
dep — инструмент молодой,
там еще нет всех тех возможностей,

102
00:07:33,579 --> 00:07:38,909
которые есть в glide или govendor,
godep, который слитно пишется.

103
00:07:38,909 --> 00:07:44,514
Но это будущий стандартный менеджер
зависимостей и знать по него стоит.

104
00:07:44,514 --> 00:07:45,853
Так, это dep.

105
00:07:45,853 --> 00:07:49,670
То есть все зависимости
теперь лежат у вас.

106
00:07:49,670 --> 00:07:55,520
И еще один менеджер,
который мы рассмотрим, называется gb.

107
00:07:55,520 --> 00:07:59,486
Как вы видели все — давайте
я переключу обратно,

108
00:07:59,486 --> 00:08:04,157
— все предыдущие примеры у
меня были внутри моего GOPATH,

109
00:08:04,157 --> 00:08:07,440
то есть HOME и go, и я жил там.

110
00:08:07,440 --> 00:08:12,311
Но в свое время был разработан
Dave Cheney еще один

111
00:08:12,311 --> 00:08:14,970
менеджер зависимости, называется gb.

112
00:08:14,970 --> 00:08:19,098
gb вот так просто называется,

113
00:08:19,098 --> 00:08:24,970
он внутри себя перекрывает GOPATH
и позволяет вам работать с каждым

114
00:08:24,970 --> 00:08:31,990
из ваших проектов действительно
полноценно в отдельной директории.

115
00:08:31,990 --> 00:08:38,395
Для этого у него есть свои команды,
gb build.

116
00:08:38,395 --> 00:08:40,956
Да, вот смотрите.

117
00:08:40,956 --> 00:08:42,920
Так, сервер.

118
00:08:42,920 --> 00:08:43,634
А, да.

119
00:08:43,634 --> 00:08:49,460
Теперь он не смог найти опять grpc,
я должен поставить его руками.

120
00:08:49,460 --> 00:08:54,640
Он не очень активно развивается, хотя
автор обещает возобновить над ним работы.

121
00:08:54,640 --> 00:08:59,780
Так, теперь я должен поставить grpc,
он еще не умеет сам сканировать

122
00:08:59,780 --> 00:09:04,500
файлы на предмет тех зависимостей,
которые ему нужны.

123
00:09:04,500 --> 00:09:08,973
Ставим, пытаемся выключить рекурсивно все,

124
00:09:08,973 --> 00:09:14,745
что там есть,
и точно так же он записывает их в файл.

125
00:09:14,745 --> 00:09:21,696
Однако он делает немножко по-другому —
он не записывает это в папку vendor,

126
00:09:21,696 --> 00:09:26,390
а у него другой подход — у него
папка vendor, а там уже папка src.

127
00:09:26,390 --> 00:09:29,822
И весь ваш код,
он тоже находится в папке src.

128
00:09:29,822 --> 00:09:34,781
Сейчас он закончит скачиваться,
я вам покажу.

129
00:09:34,781 --> 00:09:38,746
gb — у него тоже есть свои нюансы,
он, например,

130
00:09:38,746 --> 00:09:43,614
не может подтягивать из защищенных,
из защищенных

131
00:09:43,614 --> 00:09:48,802
источников, когда у вас ваш

132
00:09:48,802 --> 00:09:53,900
репозиторий закрыт, не публичный,
а закрыт сертификатом, например.

133
00:09:53,900 --> 00:09:56,745
То есть эти зависимости подтянуть
через него не так просто,

134
00:09:56,745 --> 00:09:59,100
поэтому приходится
прописывать в файле руками.

135
00:09:59,100 --> 00:10:06,916
Да, gb работает не так шустро,

136
00:10:06,916 --> 00:10:13,050
как остальные поэтому мы еще ждем,
мы еще ждем.

137
00:10:13,050 --> 00:10:18,840
Какой плюс есть у gb?

138
00:10:18,840 --> 00:10:21,207
В чем его удобство?

139
00:10:21,207 --> 00:10:29,114
Дело в том,
что в случае gb вы можете нормально,

140
00:10:29,114 --> 00:10:34,470
полноценно использовать subpkg,

141
00:10:34,470 --> 00:10:41,120
то есть те пакеты, которые идут
прямо от корня вашего сервера,

142
00:10:41,120 --> 00:10:45,310
то есть вам не придется писать cousera

143
00:10:45,310 --> 00:10:50,270
или github, что-то там, pkg.

144
00:10:50,270 --> 00:10:57,833
Он будет видеть этот пакет
непосредственно из из корня.

145
00:10:57,833 --> 00:11:02,880
Так, вроде бы почти закончилось.

146
00:11:02,880 --> 00:11:07,519
В связи с этим gb

147
00:11:07,519 --> 00:11:12,745
бывает удобен для совсем
изолированных сервисов,

148
00:11:12,745 --> 00:11:17,270
которые вы не хотите класть в свой,
в свой GOPATH.

149
00:11:17,270 --> 00:11:22,570
Итак, отлично — gb наконец-таки
выкачал все зависимости.

150
00:11:22,570 --> 00:11:23,670
Посмотрим.

151
00:11:23,670 --> 00:11:27,470
Итак, у нас просто появилась папка vendor.

152
00:11:27,470 --> 00:11:34,990
И внутри vendor уже теперь
лежат все зависимости.

153
00:11:34,990 --> 00:11:41,020
Манифест с версиями,
в src лежат сами исходники,

154
00:11:41,020 --> 00:11:47,140
а в папке src,
которая лежит в корне нашего проекта,

155
00:11:47,140 --> 00:11:51,354
лежат уже исходники нашего приложения,
как раз subpkg.

156
00:11:51,354 --> 00:11:58,134
Теперь я могу набрать go build,
gb build простите.

157
00:11:58,134 --> 00:12:04,160
И он соберет мне все мое
приложение уже из этой папки.

158
00:12:04,160 --> 00:12:06,638
Обратите внимание,
у меня появилась директория pkg,

159
00:12:06,638 --> 00:12:09,313
где лежат временные объектные файлы и bin.

160
00:12:09,313 --> 00:12:15,580
Теперь, если я захочу запустить свой
сервер, я запускаю его из из bin.

161
00:12:15,580 --> 00:12:20,410
gb не поддерживает go run,

162
00:12:20,410 --> 00:12:25,645
то есть у него нет такого формата,
просто сразу компиляция.

163
00:12:25,645 --> 00:12:30,880
И, соответственно, я в нем смог
получить доступ к subpkg-пакету

164
00:12:30,880 --> 00:12:34,930
не по полному пути, а прямо из корня.

165
00:12:34,930 --> 00:12:39,925
Вот такое разнообразие
пакетных менеджеров в Go.

166
00:12:39,925 --> 00:12:43,389
Конечно, есть и другие,
это не полный список.

167
00:12:43,389 --> 00:12:47,449
Кому-то понравится glide, кому-то dep,

168
00:12:47,449 --> 00:12:53,580
кто-то выберет gb,
кому-то еще придется по душе govendor.

169
00:12:53,580 --> 00:12:56,343
Это нужно все смотреть
и пробовать на себе.

170
00:12:56,343 --> 00:13:01,949
Но я все-таки жду, когда можно будет
подгружать зависимости прямо из той папки,

171
00:13:01,949 --> 00:13:08,760
где они находятся, без плясок с бубном,
как это сделано в gb.