1
00:00:00,000 --> 00:00:06,126
[НЕТ_ЗВУКА] В этом

2
00:00:06,126 --> 00:00:12,535
видео мы поговорим про
использование MongoDB в Go.

3
00:00:12,535 --> 00:00:16,511
MongoDB относится к
классу Document storage,

4
00:00:16,511 --> 00:00:23,800
то есть это уже не SQL-система,
скорее это поколение no-SQL.

5
00:00:23,800 --> 00:00:27,985
Mongo примечательно тем,
что в базе данных,

6
00:00:27,985 --> 00:00:31,677
которая там есть, нет схемы никакой.

7
00:00:31,677 --> 00:00:37,767
Все данные хранятся в виде BSON —
это байнари такой бинарный JSON.

8
00:00:37,767 --> 00:00:42,738
То есть вы можете добавлять туда
любые поля, удалять любые поля,

9
00:00:42,738 --> 00:00:47,341
при этом вы можете по полям,
которые там есть, строить индекс.

10
00:00:47,341 --> 00:00:51,321
В целом, если у вас очень
много различных атрибутов,

11
00:00:51,321 --> 00:00:55,693
которые абсолютно новые
для разных записей,

12
00:00:55,693 --> 00:01:01,760
то MongoDB вполне видится вариантом.

13
00:01:01,760 --> 00:01:04,831
Рассмотрим, как работать с Mongo.

14
00:01:04,831 --> 00:01:07,510
Вот уже знакомая вам страница.

15
00:01:07,510 --> 00:01:12,190
Единственное, что вместо
красивого автоинкрементного ID тут

16
00:01:12,190 --> 00:01:17,555
монговский встроенный Object ID.

17
00:01:17,555 --> 00:01:21,707
Автоинкремента там из коробки нету,
но есть сторонний модуль,

18
00:01:21,707 --> 00:01:25,716
и можно доставить и будет
тоже автоинкремент.

19
00:01:25,716 --> 00:01:30,230
Поэтому я везде передаю
его прямо в хэш виде.

20
00:01:30,230 --> 00:01:33,890
Попробуем добавить новую запись.

21
00:01:33,890 --> 00:01:41,235
Отлично.

22
00:01:41,235 --> 00:01:44,439
Submit — и вот добавилась
моя запись новая.

23
00:01:44,439 --> 00:01:48,580
Опять редактирование,
видим хэш еще какой-то другой,

24
00:01:48,580 --> 00:01:53,914
и теперь rvasily прописался
после апдейта уже.

25
00:01:53,914 --> 00:01:55,740
Посмотрим код.

26
00:01:55,740 --> 00:02:00,410
хм...

27
00:02:00,410 --> 00:02:04,127
Mongo — это, как я уже говорил, не SQL.

28
00:02:04,127 --> 00:02:08,070
То есть драйвер может
быть совсем не похож,

29
00:02:08,070 --> 00:02:11,312
а может быть и похож на то, что вы видели.

30
00:02:11,312 --> 00:02:18,522
Для начала коннектимся к хосту, создаем
сессию, я коннекчусь к локал-хосту.

31
00:02:18,522 --> 00:02:20,872
Дальше я коннекчусь к базе.

32
00:02:20,872 --> 00:02:25,500
Причем, если нету,
то там вам все автоматически создастся.

33
00:02:25,500 --> 00:02:28,507
Создаю там коллекцию айтемов.

34
00:02:28,507 --> 00:02:31,619
В Mongo нету красивого такого дампа,
как в SQL,

35
00:02:31,619 --> 00:02:33,750
который я показал — и было все хорошо.

36
00:02:33,750 --> 00:02:38,223
Поэтому я просто изначально проверяю,
сколько записей в коллекции, если там нет,

37
00:02:38,223 --> 00:02:41,280
я создаю какие-то демо-данные,
просто делаю insert.

38
00:02:41,280 --> 00:02:48,010
По сравнению с предыдущей записью, у нас
есть уже знакомая вам структура — item,

39
00:02:48,010 --> 00:02:53,629
однако, objectID тут теперь уже не не int,

40
00:02:53,629 --> 00:02:57,820
который автоинкрементится,
а bson objectID.

41
00:02:57,820 --> 00:03:03,782
И в bson'е прописано спецполе,
что подчеркивание

42
00:03:03,782 --> 00:03:09,230
id там это как раз-таки означает id'шник.

43
00:03:09,230 --> 00:03:10,441
Отлично.

44
00:03:10,441 --> 00:03:12,864
Я создам две записи.

45
00:03:12,864 --> 00:03:16,814
Я просто создаю объект и делаю insert.

46
00:03:16,814 --> 00:03:23,090
Теперь я сразу в handler передаю уже
не сессию, а уже конкретную коллекцию.

47
00:03:23,090 --> 00:03:30,739
И теперь рассмотрим все основные операции.

48
00:03:30,739 --> 00:03:32,620
Выбрать все.

49
00:03:32,620 --> 00:03:37,790
Я воспользуюсь методом find,
передам туда пустой bson.

50
00:03:37,790 --> 00:03:41,166
M — это message, ну и выберу все,

51
00:03:41,166 --> 00:03:46,976
что мне нашлось по этому критерию
и запишу это в мой слайс item'ов.

52
00:03:46,976 --> 00:03:52,604
Дальше вам уже знакомо: экспайтим шаблон,
передаем туда наши item'ы.

53
00:03:52,604 --> 00:03:53,870
Добавляем.

54
00:03:53,870 --> 00:03:59,190
В отличие от SQL, когда вы можете передать
пустую строку в автоинкрементное поле,

55
00:03:59,190 --> 00:04:05,910
тут так нельзя, поэтому я изначально
создаю запись и делаю insert.

56
00:04:05,910 --> 00:04:12,260
Или можно попробовать заинсертить
по-другому, например, вот так.

57
00:04:12,260 --> 00:04:19,973
[НЕТ_ЗВУКА] bson

58
00:04:19,973 --> 00:04:25,091
M Поля — но теперь это уже

59
00:04:25,091 --> 00:04:30,930
должны быть поля которые называются так,

60
00:04:30,930 --> 00:04:35,371
как у меня они мапятся на структуру.

61
00:04:35,371 --> 00:04:39,667
И я могу создать теперь вот таким образом.

62
00:04:39,667 --> 00:04:41,820
Давайте перезапустим программу.

63
00:04:41,820 --> 00:04:45,700
[НЕТ_ЗВУКА]

64
00:04:45,700 --> 00:04:53,700
[НЕТ_ЗВУКА]

65
00:04:53,700 --> 00:05:01,480
[НЕТ_ЗВУКА]

66
00:05:01,480 --> 00:05:04,454
Запустилось.

67
00:05:04,454 --> 00:05:09,260
Создадим еще раз — так.

68
00:05:09,260 --> 00:05:10,937
Submit.

69
00:05:10,937 --> 00:05:15,970
И добавился мой новый item.

70
00:05:15,970 --> 00:05:20,991
То есть я уже не привязан
к жесткой структуре,

71
00:05:20,991 --> 00:05:24,015
я могу добавлять тут любые поля.

72
00:05:24,015 --> 00:05:27,320
Я могу, например, сделать вот так.

73
00:05:27,320 --> 00:05:33,340
И это поле действительно добавится.

74
00:05:33,340 --> 00:05:38,144
Естественно, когда я выбираю, я тоже могу
выбирать сразу в bson, а не в структуру,

75
00:05:38,144 --> 00:05:42,720
которая у меня есть, и получать значения.

76
00:05:42,720 --> 00:05:47,923
Это удобно, если у вас очень много
динамики, но порой это бывает

77
00:05:47,923 --> 00:05:53,560
тяжело поддерживать, когда схемы нет,
и оно все разлезается.

78
00:05:53,560 --> 00:05:59,645
Поэтому все-таки я предпочитаю
иметь дело со структурами.

79
00:05:59,645 --> 00:06:02,899
То есть инсертить можно
сразу отдельную структуру,

80
00:06:02,899 --> 00:06:05,730
можно создать bson руками
и заинсертить его.

81
00:06:05,730 --> 00:06:07,499
Update.

82
00:06:07,499 --> 00:06:11,040
Редактирование.

83
00:06:11,040 --> 00:06:16,919
Основное, что нужно знать: если
я попытаюсь получить objectIDHex

84
00:06:16,919 --> 00:06:22,120
от какой-то неправильной строки,
то будет паника.

85
00:06:22,120 --> 00:06:26,944
Поэтому вначале проверяем, действительно
ли айдишник, который я передал,

86
00:06:26,944 --> 00:06:33,370
он действительно валидный,
он действительно это objectIDHex,

87
00:06:33,370 --> 00:06:40,475
и только после этого я создаю уже
нужную мне структуру, и делаю find.

88
00:06:40,475 --> 00:06:47,032
Ранее у нас был для поиска всех вот
такой запрос, теперь — вот такой.

89
00:06:47,032 --> 00:06:50,603
То есть я указываю поле,
id и указываю значение.

90
00:06:50,603 --> 00:06:52,428
Я выбираю единичную запись,

91
00:06:52,428 --> 00:06:55,790
кладу ее в пост и передаю
дальше в шаблон для экспанда.

92
00:06:55,790 --> 00:06:58,950
Update — собственно, все просто.

93
00:06:58,950 --> 00:07:03,037
Так же как insert вы можете
заапдейтить следующим образом,

94
00:07:03,037 --> 00:07:05,610
то есть передать туда уже структуру.

95
00:07:05,610 --> 00:07:09,759
Либо же вы можете передать туда
абсолютно произвольный JSON,

96
00:07:09,759 --> 00:07:11,960
который заапдейтит все данные.

97
00:07:11,960 --> 00:07:13,604
Единственное, что...

98
00:07:13,604 --> 00:07:14,819
будьте аккуратны.

99
00:07:14,819 --> 00:07:18,721
Если напишете вот так, то это будет
уже совершенно другое поле, не то,

100
00:07:18,721 --> 00:07:20,540
которое мапится в вашу структуру.

101
00:07:20,540 --> 00:07:21,416
Update.

102
00:07:21,416 --> 00:07:26,999
То есть тоже все резиновое,
вот можно добавить новое поле.

103
00:07:26,999 --> 00:07:28,100
Удаление.

104
00:07:28,100 --> 00:07:33,287
Тут мы тоже проверяем,
действительно ли это objectIDHex,

105
00:07:33,287 --> 00:07:40,991
и вызываем метод Remove, куда передаем
опять-таки bson с номером поля.

106
00:07:40,991 --> 00:07:42,060
Вот все.

107
00:07:42,060 --> 00:07:45,660
То есть Mongo, конечно,

108
00:07:45,660 --> 00:07:51,132
не похоже на работу с SQL в чистом виде.

109
00:07:51,132 --> 00:07:55,290
Однако, если вы использовали,

110
00:07:55,290 --> 00:08:00,140
например, Gorun, то более-менее похоже.