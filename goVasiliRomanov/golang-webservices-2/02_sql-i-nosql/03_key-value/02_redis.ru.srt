1
00:00:00,000 --> 00:00:09,107
[БЕЗ_ЗВУКА] В этом видео
мы поговорим про redis.

2
00:00:09,107 --> 00:00:12,300
Изначально redis был
мемкэшем на астероидах,

3
00:00:12,300 --> 00:00:18,008
однако сейчас это key value
хранилище общего назначения, которое

4
00:00:18,008 --> 00:00:22,820
поддерживает просто огромное количество
команд буквально на все случаи жизни.

5
00:00:22,820 --> 00:00:27,986
У нас будет уже знакомый вам
пример с менеджером сессии,

6
00:00:27,986 --> 00:00:34,360
который кочует по всему курсу,
и мы будем хранить эти сессии в redis.

7
00:00:34,360 --> 00:00:36,794
Сразу оговорюсь, что это учебный пример.

8
00:00:36,794 --> 00:00:39,953
Если вы хотите использовать
redis для хранения сессии,

9
00:00:39,953 --> 00:00:43,200
лучше используйте готовый
протестированный модуль.

10
00:00:43,200 --> 00:00:47,048
В нем будет гораздо больше возможностей.

11
00:00:47,048 --> 00:00:52,011
Итак, redis, конечно,
не поставляется с Go,

12
00:00:52,011 --> 00:00:56,570
это внешняя библиотека, создается она,
как и все остальное через go get.

13
00:00:56,570 --> 00:01:01,810
Для начала нужно установить
соединение к redis.

14
00:01:01,810 --> 00:01:08,520
Делается это через DialURL,
у меня он по умолчанию вот такой вот.

15
00:01:08,520 --> 00:01:12,309
Я задаю его через флаги по умолчанию.

16
00:01:12,309 --> 00:01:19,639
Далее я создаю менеджер сессии и в
него передаю соединение до redis.

17
00:01:19,639 --> 00:01:26,210
Теперь рассмотрим,
как это работает в самом веб-сайте.

18
00:01:26,210 --> 00:01:31,095
Итак, вот моя страница логина пароля,

19
00:01:31,095 --> 00:01:36,832
я ввожу rvasiliy,
ввожу login test и логинюсь.

20
00:01:36,832 --> 00:01:37,452
Хорошо.

21
00:01:37,452 --> 00:01:41,640
Теперь при логине у меня создалась
сессия и положилась в redis.

22
00:01:41,640 --> 00:01:49,770
Если я открою еще раз,

23
00:01:49,770 --> 00:01:53,840
у меня сессия сохранится,
и достанется она как раз из сессии.

24
00:01:53,840 --> 00:01:56,760
При лог-ауте сессия моя удалится в redis.

25
00:01:56,760 --> 00:02:00,659
Теперь посмотрим,
какими командами все это выполняется.

26
00:02:00,659 --> 00:02:03,340
Итак, рассмотрим сам менеджер сессии.

27
00:02:03,340 --> 00:02:09,420
В нем ничего нет,
кроме соединения до самого redis.

28
00:02:09,420 --> 00:02:12,772
Теперь при попытке создать сессию,

29
00:02:12,772 --> 00:02:18,252
я создаю какой-то случайный ключ,
сериализую данные в json.

30
00:02:18,252 --> 00:02:21,112
Мой менеджер сессии очень простой,

31
00:02:21,112 --> 00:02:26,116
он не поддерживает никакие переменные,
которые хранятся внутри сессии,

32
00:02:26,116 --> 00:02:31,085
не поддерживает ничего,
просто сохранение логина и юзер-агента.

33
00:02:31,085 --> 00:02:36,524
Теперь я выполняю команду set,
и вообще-то всё.

34
00:02:36,524 --> 00:02:39,750
Теперь я сохранил значение.

35
00:02:39,750 --> 00:02:47,878
Команда Do у соединения отправляет
все значения уже как раз в сам redis,

36
00:02:47,878 --> 00:02:52,884
то есть туда можно передать ту команду,
которую вы хотите исполнить,

37
00:02:52,884 --> 00:02:57,300
ключ, для которого вы хотите
исполнить эту команду,

38
00:02:57,300 --> 00:03:00,600
данные и опции, если они поддерживаются.

39
00:03:00,600 --> 00:03:05,830
Команда Do на самом деле возвращает
какие-то данные и ошибку.

40
00:03:05,830 --> 00:03:11,900
data, err : = выглядит это обычно вот так.

41
00:03:11,900 --> 00:03:18,010
Поскольку данные, которые возвращает
сессия, не понятно, в каком они формате,

42
00:03:18,010 --> 00:03:24,411
и мы хотели бы их все-таки привести к
данным, которые соответствуют Go-типам.

43
00:03:24,411 --> 00:03:31,410
В redis есть набор утилитарных функций
как раз для конвертации данных.

44
00:03:31,410 --> 00:03:37,612
Стринги, инты, возврат в множество
значений, вот выглядит это вот так.

45
00:03:37,612 --> 00:03:42,020
То есть можно передавать команду
напрямую в этот хелпер для распаковки,

46
00:03:42,020 --> 00:03:44,065
можно вот так.

47
00:03:44,065 --> 00:03:49,890
Вот сейчас у меня распаковывается
значение в result,

48
00:03:49,890 --> 00:03:56,151
и если вдруг у меня команда на set
вернула не OK, я скажу, что не OK.

49
00:03:56,151 --> 00:03:57,900
И ошибки вернула.

50
00:03:57,900 --> 00:04:03,081
Собственно, всё для того,
чтобы вам установить значение в redis.

51
00:04:03,081 --> 00:04:04,970
Очень похоже на мемкэш.

52
00:04:04,970 --> 00:04:05,998
Чек.

53
00:04:05,998 --> 00:04:09,495
Тут все то же самое.

54
00:04:09,495 --> 00:04:14,020
Я выполняю команду уже не set,
а get на ключ.

55
00:04:14,020 --> 00:04:15,959
И теперь получаю данные.

56
00:04:15,959 --> 00:04:19,483
Обратите внимание,
раньше у меня был стринг,

57
00:04:19,483 --> 00:04:25,329
то есть команда set мне возвращает
какой-то строковый ответ: OK, не OK.

58
00:04:25,329 --> 00:04:28,946
В get я получаю просто slice byte,

59
00:04:28,946 --> 00:04:34,960
использую для этого хелпер bytes,
а далее распаковываю в нем json.

60
00:04:34,960 --> 00:04:42,355
Ну и наконец, команда delete,
которая удаляет значения.

61
00:04:42,355 --> 00:04:44,520
Всё то же самое.

62
00:04:44,520 --> 00:04:50,114
Вызываю метод Do у соединения,
и парсим его.

63
00:04:50,114 --> 00:04:55,082
Я распаковываю ответ в Int, точнее,
не распаковываю, а пропускаю его.

64
00:04:55,082 --> 00:05:02,140
Но команда delete будет рассказывать,
сколько записей удалено по данному ключу.

65
00:05:02,140 --> 00:05:07,308
Собственно, вот и все: то есть get, set,

66
00:05:07,308 --> 00:05:14,087
delete, add у redis реализованы очень
просто, и работать с этим хорошо.

67
00:05:14,087 --> 00:05:16,770
Как выглядит сама наша функция?

68
00:05:16,770 --> 00:05:22,380
Мой SessionManager я
могу проверять по Cookie,

69
00:05:22,380 --> 00:05:27,479
могу получать SessionID по тому,
что пришло мне из Cookie.

70
00:05:27,479 --> 00:05:30,583
И отправлять пользователя
на форум авторизации,

71
00:05:30,583 --> 00:05:33,120
либо же показывать ему какой-то текст.

72
00:05:33,120 --> 00:05:36,779
Но создание сессии тоже все просто.

73
00:05:36,779 --> 00:05:43,612
Я создаю структуру,
куда указываю свои данные и юзер-агента.

74
00:05:43,612 --> 00:05:44,800
На этом все.

75
00:05:44,800 --> 00:05:46,530
Все очень просто.