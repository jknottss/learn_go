

<!DOCTYPE html>
<html lang="en" data-layout="responsive">
  <head>
    
    <script>
      window.addEventListener('error', window.__err=function f(e){f.p=f.p||[];f.p.push(e)});
    </script>
    <script>
      (function() {
        const theme = document.cookie.match(/prefers-color-scheme=(light|dark|auto)/)?.[1]
        if (theme) {
          document.querySelector('html').setAttribute('data-theme', theme);
        }
      }())
    </script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="Description" content="Package mgo offers a rich MongoDB driver for Go.">
    
    <meta class="js-gtmID" data-gtmid="GTM-W8MVQXG">
    <link rel="shortcut icon" href="/static/shared/icon/favicon.ico">
    
  <link rel="canonical" href="https://pkg.go.dev/gopkg.in/mgo.v2">

    <link href="/static/frontend/frontend.min.css?version=prod-frontend-00030-vef" rel="stylesheet">
    
  <title>mgo package - gopkg.in/mgo.v2 - pkg.go.dev</title>

    
  <link href="/static/frontend/unit/unit.min.css?version=prod-frontend-00030-vef" rel="stylesheet">
  
  <link href="/static/frontend/unit/main/main.min.css?version=prod-frontend-00030-vef" rel="stylesheet">


  </head>
  <body>
    
    <script>
      function loadScript(src, mod = true) {
        let s = document.createElement('script');
        s.src = src;
        if (mod) {
          s.type = 'module';
          s.async = true;
          s.defer = true
        }
        document.head.appendChild(s);
      }
      loadScript("/third_party/dialog-polyfill/dialog-polyfill.js", false)
      loadScript("/static/frontend/frontend.js");
    </script>
    
  <header class="go-Header go-Header--full js-siteHeader">
    <div class="go-Header-inner go-Header-inner--dark">
      <nav class="go-Header-nav">
        <a href="https://go.dev/" class="js-headerLogo" data-gtmc="nav link"
            data-test-id="go-header-logo-link">
          <img class="go-Header-logo" src="/static/shared/logo/go-white.svg" alt="Go">
        </a>
        <div class="go-Header-rightContent">
          
<div class="go-SearchForm js-searchForm">
  <form
    class="go-InputGroup go-ShortcutKey go-SearchForm-form"
    action="/search"
    data-shortcut="/"
    data-shortcut-alt="search"
    data-gtmc="search form"
    aria-label="Search for a package"
    role="search"
  >
    <input name="q" class="go-Input js-searchFocus" aria-label="Search for a package" type="search"
        autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false"
        placeholder="Search packages or symbols"
        value="" />
    <input name="m" value="" hidden>
    <button class="go-Button go-Button--inverted" aria-label="Submit search">
      <img
        class="go-Icon"
        height="24"
        width="24"
        src="/static/shared/icon/search_gm_grey_24dp.svg"
        alt=""
      />
    </button>
  </form>
  <button class="go-SearchForm-expandSearch js-expandSearch" data-gtmc="nav button"
      aria-label="Open search" data-test-id="expand-search">
    <img class="go-Icon go-Icon--inverted" height="24" width="24"
        src="/static/shared/icon/search_gm_grey_24dp.svg" alt="">
  </button>
</div>

          <ul class="go-Header-menu">
            <li class="go-Header-menuItem">
              <a href="https://go.dev/solutions/" data-gtmc="nav link">Why Go</a>
            </li>
            <li class="go-Header-menuItem">
              <a href="https://go.dev/learn/" data-gtmc="nav link">Get Started</a>
            </li>
            <li class="go-Header-menuItem">
              <a href="https://golang.org/doc/" data-gtmc="nav link">Docs</a>
            </li>
            <li class="go-Header-menuItem go-Header-menuItem--active">
              <a href="/" data-gtmc="nav link">Packages</a>
            </li>
            <li class="go-Header-menuItem">
              <a href="https://play.golang.org/" data-gtmc="nav link">Play</a>
            </li>
            <li class="go-Header-menuItem">
              <a href="https://go.dev/blog/" data-gtmc="nav link">Blog</a>
            </li>
          </ul>
          <button class="go-Header-navOpen js-headerMenuButton go-Header-navOpen--white" data-gtmc="nav button" aria-label="Open navigation">
          </button>
        </div>
      </nav>
    </div>
  </header>
  <aside class="go-NavigationDrawer js-header">
    <nav>
      <div class="go-NavigationDrawer-header">
        <a href="https://go.dev/" tabindex="-1">
          <img class="go-NavigationDrawer-logo" src="/static/shared/logo/go-blue.svg" alt="Go.">
        </a>
      </div>
      <ul class="go-NavigationDrawer-list">
          <li class="go-NavigationDrawer-listItem">
            <a href="https://go.dev/solutions/" tabindex="-1">Why Go</a>
          </li>
          <li class="go-NavigationDrawer-listItem">
            <a href="https://go.dev/learn/" tabindex="-1">Get Started</a>
          </li>
          <li class="go-NavigationDrawer-listItem">
            <a href="https://golang.org/doc/" tabindex="-1">Docs</a>
          </li>
          <li class="go-NavigationDrawer-listItem go-NavigationDrawer-listItem--active">
            <a href="/" tabindex="-1">Packages</a>
          </li>
          <li class="go-NavigationDrawer-listItem">
            <a href="https://play.golang.org/" tabindex="-1">Play</a>
          </li>
          <li class="go-NavigationDrawer-listItem">
            <a href="https://go.dev/blog" tabindex="-1">Blog</a>
          </li>
      </ul>
    </nav>
  </aside>
  <div class="go-NavigationDrawer-scrim js-scrim" role="presentation"></div>

    
  <main class="go-Main">
    <div class="go-Main-banner" role="alert"></div>
    <header class="go-Main-header js-mainHeader">
  
  
  <nav class="go-Main-headerBreadcrumb go-Breadcrumb" aria-label="Breadcrumb" data-test-id="UnitHeader-breadcrumb">
    <ol>
      
        
          <li data-test-id="UnitHeader-breadcrumbItem">
            <a href="/" data-gtmc="breadcrumb link">Discover Packages</a>
          </li>
        
        <li>
          <a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22" data-gtmc="breadcrumb link" aria-current="location"
              data-test-id="UnitHeader-breadcrumbCurrent">
            gopkg.in/mgo.v2
          </a>
          
            <button
              class="go-Button go-Button--inline go-Clipboard js-clipboard"
              title="Copy path to clipboard.&#10;&#10;gopkg.in/mgo.v2"
              aria-label="Copy Path to Clipboard"
              data-to-copy="gopkg.in/mgo.v2"
              data-gtmc="breadcrumbs button"
            >
              <img
                class="go-Icon go-Icon--accented"
                height="24"
                width="24"
                src="/static/shared/icon/content_copy_gm_grey_24dp.svg"
                alt=""
              >
            </button>
          
        
      </li>
    </ol>
  </nav>

  <div class="go-Main-headerContent">
    
  <div class="go-Main-headerTitle js-stickyHeader">
    <a class="go-Main-headerLogo" href="https://go.dev/" aria-hidden="true" tabindex="-1" data-gtmc="header link" aria-label="Link to Go Homepage">
      <img height="78" width="207" src="/static/shared/logo/go-blue.svg" alt="Go">
    </a>
    <h1 class="UnitHeader-titleHeading" data-test-id="UnitHeader-title">mgo</h1>
    
      <span class="go-Chip go-Chip--inverted">package</span>
    
      <span class="go-Chip go-Chip--inverted">module</span>
    
    
      
        <button
          class="go-Button go-Button--inline go-Clipboard js-clipboard"
          title="Copy path to clipboard.&#10;&#10;gopkg.in/mgo.v2"
          aria-label="Copy Path to Clipboard"
          data-to-copy="gopkg.in/mgo.v2"
          data-gtmc="title button"
          tabindex="-1"
        >
          <img
            class="go-Icon go-Icon--accented"
            height="24"
            width="24"
            src="/static/shared/icon/content_copy_gm_grey_24dp.svg"
            alt=""
          />
        </button>
      
    
  </div>

    
  <div class="go-Main-headerDetails">
    
      
  <span class="go-Main-headerDetailItem" data-test-id="UnitHeader-version">
    <a href="?tab=versions" aria-label="Go to Versions" data-gtmc="header link"><span class="go-textSubtle">Version: </span>v2.0.0-...-a6b53ec</a>
    
    <span class="DetailsHeader-badge--latest" data-test-id="UnitHeader-minorVersionBanner">
      <span class="go-Chip DetailsHeader-span--latest">Latest</span>
      <span class="go-Chip DetailsHeader-span--notAtLatest">
        Latest
        
  <details class="go-Tooltip js-tooltip" data-gtmc="tooltip">
    <summary>
      <img class="go-Icon go-Icon--inverted" height="24" width="24" src="/static/shared/icon/alert_gm_grey_24dp.svg" alt="Warning">
    </summary>
    <p>This package is not in the latest version of its module.</p>
  </details>

      </span>
      <a href="/gopkg.in/mgo.v2" aria-label="Go to Latest Version" data-gtmc="header link">
        <span class="go-Chip go-Chip--alert DetailsHeader-span--goToLatest">Go to latest</span>
      </a>
    </span>
  </span>

      
  <span class="go-Main-headerDetailItem" data-test-id="UnitHeader-commitTime">
    Published: Aug 16, 2019
  </span>

      
  <span class="go-Main-headerDetailItem" data-test-id="UnitHeader-licenses">
    License: <a href="/gopkg.in/mgo.v2?tab=licenses" data-test-id="UnitHeader-license"
            aria-label="Go to Licenses" data-gtmc="header link">BSD-2-Clause</a>
      
    
  </span>

      
        
  <span class="go-Main-headerDetailItem" data-test-id="UnitHeader-imports">
    <a href="/gopkg.in/mgo.v2?tab=imports" aria-label="Go to Imports"
        data-gtmc="header link">
      <span class="go-textSubtle">Imports: </span>20
    </a>
  </span>

        
  <span class="go-Main-headerDetailItem" data-test-id="UnitHeader-importedby">
    <a href="/gopkg.in/mgo.v2?tab=importedby" aria-label="Go to Imported By"
        data-gtmc="header link">
       <span class="go-textSubtle">Imported by: </span>5,104
    </a>
  </span>

      
    
  </div>
  
  <div class="UnitHeader-overflowContainer">
    <svg class="UnitHeader-overflowImage" xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
      <path d="M0 0h24v24H0z" fill="none"/>
      <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
    </svg>
    <select class="UnitHeader-overflowSelect js-selectNav" tabindex="-1">
      <option value="/">Main</option>
      <option value="/gopkg.in/mgo.v2?tab=versions">
        Versions
      </option>
      <option value="/gopkg.in/mgo.v2?tab=licenses">
        Licenses
      </option>
      
        <option value="/gopkg.in/mgo.v2?tab=imports">
          Imports
        </option>
        <option value="/gopkg.in/mgo.v2?tab=importedby">
          Imported By
        </option>
      
    </select>
  </div>


  </div>

</header>
    <aside class="go-Main-aside  js-mainAside">
  
  <div class="UnitMeta">
    <h2 class="go-textLabel">Details</h2>
    
  <ul class="UnitMeta-details">
    <li>
      <details class="go-Tooltip js-tooltip" data-gtmc="tooltip">
        <summary class="go-textSubtle">
          
  <img class="go-Icon"src="/static/shared/icon/cancel_gm_grey_24dp.svg" alt="unchecked"height="24" width="24">

          Valid go.mod file
          <img class="go-Icon" src="/static/shared/icon/help_gm_grey_24dp.svg" alt="" height="24" width="24">
        </summary>
        <p>
          The Go module system was introduced in Go 1.11 and is the official dependency management
          solution for Go.
        </p>
      </details>
    </li>
    <li>
      <details class="go-Tooltip js-tooltip" data-gtmc="tooltip">
        <summary class="go-textSubtle">
          
  <img class="go-Icon go-Icon--accented"src="/static/shared/icon/check_circle_gm_grey_24dp.svg" alt="checked"height="24" width="24">

          Redistributable license
          <img class="go-Icon" src="/static/shared/icon/help_gm_grey_24dp.svg" alt="" height="24" width="24">
        </summary>
        <p>
          Redistributable licenses place minimal restrictions on how software can be used,
          modified, and redistributed.
        </p>
      </details>
    </li>
    <li>
      <details class="go-Tooltip js-tooltip" data-gtmc="tooltip">
        <summary class="go-textSubtle">
          
  <img class="go-Icon"src="/static/shared/icon/cancel_gm_grey_24dp.svg" alt="unchecked"height="24" width="24">

          Tagged version
          <img class="go-Icon" src="/static/shared/icon/help_gm_grey_24dp.svg" alt="" height="24" width="24">
        </summary>
        <p>Modules with tagged versions give importers more predictable builds.</p>
      </details>
    </li>
    <li>
      <details class="go-Tooltip js-tooltip" data-gtmc="tooltip">
        <summary class="go-textSubtle">
          
  <img class="go-Icon"src="/static/shared/icon/cancel_gm_grey_24dp.svg" alt="unchecked"height="24" width="24">

          Stable version
          <img class="go-Icon" src="/static/shared/icon/help_gm_grey_24dp.svg" alt="" height="24" width="24">
        </summary>
        <p>When a project reaches major version v1 it is considered stable.</p>
      </details>
    </li>
    <li class="UnitMeta-detailsLearn">
      <a href="/about#best-practices-h2" data-gtmc="meta link">Learn more</a>
    </li>
  </ul>

    <h2 class="go-textLabel">Repository</h2>
    <div class="UnitMeta-repo">
      
        <a href="https://github.com/go-mgo/mgo" title="https://github.com/go-mgo/mgo" target="_blank" rel="noopener">
          github.com/go-mgo/mgo
        </a>
      
    </div>
    
  </div>

</aside>
    <nav class="go-Main-nav go-Main-nav--sticky js-mainNav" aria-label="Outline">
  <div class="go-Main-navDesktop">
    
  <div class="UnitOutline-jumpTo">
    <button class="UnitOutline-jumpToInput go-ShortcutKey js-jumpToInput"
        aria-controls="jump-to-modal"
        aria-label="Open Jump to Identifier"
        data-shortcut="f"
        data-shortcut-alt="find"
        data-test-id="jump-to-button" data-gtmc="outline button">
      Jump to ...
    </button>
  </div>
  <ul class="go-Tree js-tree" role="tree" aria-label="Outline">
    
      <li class="js-readmeOutline">
        <a href="#section-readme" data-gtmc="outline link">
          README
        </a>
        
  <ul id="readme-outline">
    
      <li>
        <a href="#readme-the-mongodb-driver-for-go" data-gtmc="readme outline link">
          The MongoDB driver for Go
        </a>
         
      </li>
     
  </ul>

      </li>
    
    
      <li>
        <a href="#section-documentation" data-gtmc="outline link">
          Documentation
        </a>
        
<ul role="group" id="doc-outline">
  
    <li role="none">
      <a href="#pkg-overview" role="treeitem" aria-level="2" tabindex="-1"
          data-gtmc="doc outline link">Overview</a>
    </li>
  <li class="DocNav-overview" role="none">
      <a href="#pkg-index" role="treeitem" aria-level="2" tabindex="-1" aria-owns="nav-group-index"
          
          data-gtmc="doc outline link">
        Index
      </a>
      
    </li>
    <li class="DocNav-constants" role="none">
      <a href="#pkg-constants" role="treeitem" aria-level="2" tabindex="-1"
          data-gtmc="doc outline link">
        Constants
      </a>
    </li>
    <li class="DocNav-variables" role="none">
      <a href="#pkg-variables" role="treeitem" aria-level="2" tabindex="-1"
          data-gtmc="doc outline link">
        Variables
      </a>
    </li>
    <li class="DocNav-functions" role="none">
      <a href="#pkg-functions" role="treeitem" aria-level="2" tabindex="-1" aria-owns="nav-group-functions"
           aria-expanded="false" data-gtmc="doc outline link">
        Functions
      </a>
      <ul role="group" id="nav-group-functions">
        
            <li role="none">
              <a href="#IsDup" role="treeitem" aria-level="3" tabindex="-1"
                   title="IsDup(err)" data-gtmc="doc outline link">
                IsDup(err)
              </a>
            </li>
        
            <li role="none">
              <a href="#ResetStats" role="treeitem" aria-level="3" tabindex="-1"
                   title="ResetStats()" data-gtmc="doc outline link">
                ResetStats()
              </a>
            </li>
        
            <li role="none">
              <a href="#SetDebug" role="treeitem" aria-level="3" tabindex="-1"
                   title="SetDebug(debug)" data-gtmc="doc outline link">
                SetDebug(debug)
              </a>
            </li>
        
            <li role="none">
              <a href="#SetLogger" role="treeitem" aria-level="3" tabindex="-1"
                   title="SetLogger(logger)" data-gtmc="doc outline link">
                SetLogger(logger)
              </a>
            </li>
        
            <li role="none">
              <a href="#SetStats" role="treeitem" aria-level="3" tabindex="-1"
                   title="SetStats(enabled)" data-gtmc="doc outline link">
                SetStats(enabled)
              </a>
            </li>
        
      </ul>
    </li>
    <li class="DocNav-types" role="none">
      <a href="#pkg-types" role="treeitem" aria-level="2" tabindex="-1" aria-owns="nav-group-types"
           aria-expanded="false" data-gtmc="doc outline link">
        Types
      </a>
      <ul role="group" id="nav-group-types">
        
          
          <li role="none">
            
              
              
              <a href="#BuildInfo" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.BuildInfo" title="type BuildInfo"
                   data-gtmc="doc outline link">
                type BuildInfo
              </a>
              <ul role="group" id="nav.group.BuildInfo">
                
                
                  <li role="none">
                    <a href="#BuildInfo.VersionAtLeast" role="treeitem" aria-level="4" tabindex="-1"
                        title="(bi) VersionAtLeast(version)" data-gtmc="doc outline link">
                      (bi) VersionAtLeast(version)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Bulk" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Bulk" title="type Bulk"
                   data-gtmc="doc outline link">
                type Bulk
              </a>
              <ul role="group" id="nav.group.Bulk">
                
                
                  <li role="none">
                    <a href="#Bulk.Insert" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Insert(docs)" data-gtmc="doc outline link">
                      (b) Insert(docs)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.Remove" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Remove(selectors)" data-gtmc="doc outline link">
                      (b) Remove(selectors)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.RemoveAll" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) RemoveAll(selectors)" data-gtmc="doc outline link">
                      (b) RemoveAll(selectors)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.Run" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Run()" data-gtmc="doc outline link">
                      (b) Run()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.Unordered" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Unordered()" data-gtmc="doc outline link">
                      (b) Unordered()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.Update" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Update(pairs)" data-gtmc="doc outline link">
                      (b) Update(pairs)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.UpdateAll" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) UpdateAll(pairs)" data-gtmc="doc outline link">
                      (b) UpdateAll(pairs)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Bulk.Upsert" role="treeitem" aria-level="4" tabindex="-1"
                        title="(b) Upsert(pairs)" data-gtmc="doc outline link">
                      (b) Upsert(pairs)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#BulkError" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.BulkError" title="type BulkError"
                   data-gtmc="doc outline link">
                type BulkError
              </a>
              <ul role="group" id="nav.group.BulkError">
                
                
                  <li role="none">
                    <a href="#BulkError.Cases" role="treeitem" aria-level="4" tabindex="-1"
                        title="(e) Cases()" data-gtmc="doc outline link">
                      (e) Cases()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#BulkError.Error" role="treeitem" aria-level="4" tabindex="-1"
                        title="(e) Error()" data-gtmc="doc outline link">
                      (e) Error()
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#BulkErrorCase" role="treeitem" aria-level="3" tabindex="-1" title="type BulkErrorCase"
                  data-gtmc="doc outline link">
                type BulkErrorCase
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#BulkResult" role="treeitem" aria-level="3" tabindex="-1" title="type BulkResult"
                  data-gtmc="doc outline link">
                type BulkResult
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Change" role="treeitem" aria-level="3" tabindex="-1" title="type Change"
                  data-gtmc="doc outline link">
                type Change
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#ChangeInfo" role="treeitem" aria-level="3" tabindex="-1" title="type ChangeInfo"
                  data-gtmc="doc outline link">
                type ChangeInfo
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Collation" role="treeitem" aria-level="3" tabindex="-1" title="type Collation"
                  data-gtmc="doc outline link">
                type Collation
              </a>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Collection" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Collection" title="type Collection"
                   data-gtmc="doc outline link">
                type Collection
              </a>
              <ul role="group" id="nav.group.Collection">
                
                
                  <li role="none">
                    <a href="#Collection.Bulk" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Bulk()" data-gtmc="doc outline link">
                      (c) Bulk()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Count" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Count()" data-gtmc="doc outline link">
                      (c) Count()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Create" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Create(info)" data-gtmc="doc outline link">
                      (c) Create(info)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.DropCollection" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) DropCollection()" data-gtmc="doc outline link">
                      (c) DropCollection()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.DropIndex" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) DropIndex(key)" data-gtmc="doc outline link">
                      (c) DropIndex(key)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.DropIndexName" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) DropIndexName(name)" data-gtmc="doc outline link">
                      (c) DropIndexName(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.EnsureIndex" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) EnsureIndex(index)" data-gtmc="doc outline link">
                      (c) EnsureIndex(index)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.EnsureIndexKey" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) EnsureIndexKey(key)" data-gtmc="doc outline link">
                      (c) EnsureIndexKey(key)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Find" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Find(query)" data-gtmc="doc outline link">
                      (c) Find(query)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.FindId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) FindId(id)" data-gtmc="doc outline link">
                      (c) FindId(id)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Indexes" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Indexes()" data-gtmc="doc outline link">
                      (c) Indexes()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Insert" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Insert(docs)" data-gtmc="doc outline link">
                      (c) Insert(docs)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.NewIter" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) NewIter(session, firstBatch, cursorId, err)" data-gtmc="doc outline link">
                      (c) NewIter(session, firstBatch, cursorId, err)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Pipe" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Pipe(pipeline)" data-gtmc="doc outline link">
                      (c) Pipe(pipeline)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Remove" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Remove(selector)" data-gtmc="doc outline link">
                      (c) Remove(selector)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.RemoveAll" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) RemoveAll(selector)" data-gtmc="doc outline link">
                      (c) RemoveAll(selector)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.RemoveId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) RemoveId(id)" data-gtmc="doc outline link">
                      (c) RemoveId(id)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Repair" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Repair()" data-gtmc="doc outline link">
                      (c) Repair()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Update" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Update(selector, update)" data-gtmc="doc outline link">
                      (c) Update(selector, update)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.UpdateAll" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) UpdateAll(selector, update)" data-gtmc="doc outline link">
                      (c) UpdateAll(selector, update)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.UpdateId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) UpdateId(id, update)" data-gtmc="doc outline link">
                      (c) UpdateId(id, update)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.Upsert" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) Upsert(selector, update)" data-gtmc="doc outline link">
                      (c) Upsert(selector, update)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.UpsertId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) UpsertId(id, update)" data-gtmc="doc outline link">
                      (c) UpsertId(id, update)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Collection.With" role="treeitem" aria-level="4" tabindex="-1"
                        title="(c) With(s)" data-gtmc="doc outline link">
                      (c) With(s)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#CollectionInfo" role="treeitem" aria-level="3" tabindex="-1" title="type CollectionInfo"
                  data-gtmc="doc outline link">
                type CollectionInfo
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Credential" role="treeitem" aria-level="3" tabindex="-1" title="type Credential"
                  data-gtmc="doc outline link">
                type Credential
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#DBRef" role="treeitem" aria-level="3" tabindex="-1" title="type DBRef"
                  data-gtmc="doc outline link">
                type DBRef
              </a>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Database" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Database" title="type Database"
                   data-gtmc="doc outline link">
                type Database
              </a>
              <ul role="group" id="nav.group.Database">
                
                
                  <li role="none">
                    <a href="#Database.AddUser" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) AddUser(username, password, readOnly)" data-gtmc="doc outline link">
                      (db) AddUser(username, password, readOnly)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.C" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) C(name)" data-gtmc="doc outline link">
                      (db) C(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.CollectionNames" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) CollectionNames()" data-gtmc="doc outline link">
                      (db) CollectionNames()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.DropDatabase" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) DropDatabase()" data-gtmc="doc outline link">
                      (db) DropDatabase()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.FindRef" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) FindRef(ref)" data-gtmc="doc outline link">
                      (db) FindRef(ref)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.GridFS" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) GridFS(prefix)" data-gtmc="doc outline link">
                      (db) GridFS(prefix)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.Login" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) Login(user, pass)" data-gtmc="doc outline link">
                      (db) Login(user, pass)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.Logout" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) Logout()" data-gtmc="doc outline link">
                      (db) Logout()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.RemoveUser" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) RemoveUser(user)" data-gtmc="doc outline link">
                      (db) RemoveUser(user)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.Run" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) Run(cmd, result)" data-gtmc="doc outline link">
                      (db) Run(cmd, result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.UpsertUser" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) UpsertUser(user)" data-gtmc="doc outline link">
                      (db) UpsertUser(user)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Database.With" role="treeitem" aria-level="4" tabindex="-1"
                        title="(db) With(s)" data-gtmc="doc outline link">
                      (db) With(s)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#DialInfo" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.DialInfo" title="type DialInfo"
                   data-gtmc="doc outline link">
                type DialInfo
              </a>
              <ul role="group" id="nav.group.DialInfo">
                
                  <li role="none">
                    <a href="#ParseURL" role="treeitem" aria-level="4" tabindex="-1"
                        title="ParseURL(url)" data-gtmc="doc outline link">
                      ParseURL(url)
                    </a>
                  </li>
                
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#GridFS" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.GridFS" title="type GridFS"
                   data-gtmc="doc outline link">
                type GridFS
              </a>
              <ul role="group" id="nav.group.GridFS">
                
                
                  <li role="none">
                    <a href="#GridFS.Create" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) Create(name)" data-gtmc="doc outline link">
                      (gfs) Create(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.Find" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) Find(query)" data-gtmc="doc outline link">
                      (gfs) Find(query)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.Open" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) Open(name)" data-gtmc="doc outline link">
                      (gfs) Open(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.OpenId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) OpenId(id)" data-gtmc="doc outline link">
                      (gfs) OpenId(id)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.OpenNext" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) OpenNext(iter, file)" data-gtmc="doc outline link">
                      (gfs) OpenNext(iter, file)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.Remove" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) Remove(name)" data-gtmc="doc outline link">
                      (gfs) Remove(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFS.RemoveId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(gfs) RemoveId(id)" data-gtmc="doc outline link">
                      (gfs) RemoveId(id)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#GridFile" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.GridFile" title="type GridFile"
                   data-gtmc="doc outline link">
                type GridFile
              </a>
              <ul role="group" id="nav.group.GridFile">
                
                
                  <li role="none">
                    <a href="#GridFile.Abort" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Abort()" data-gtmc="doc outline link">
                      (file) Abort()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Close" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Close()" data-gtmc="doc outline link">
                      (file) Close()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.ContentType" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) ContentType()" data-gtmc="doc outline link">
                      (file) ContentType()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.GetMeta" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) GetMeta(result)" data-gtmc="doc outline link">
                      (file) GetMeta(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Id" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Id()" data-gtmc="doc outline link">
                      (file) Id()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.MD5" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) MD5()" data-gtmc="doc outline link">
                      (file) MD5()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Name" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Name()" data-gtmc="doc outline link">
                      (file) Name()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Read" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Read(b)" data-gtmc="doc outline link">
                      (file) Read(b)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Seek" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Seek(offset, whence)" data-gtmc="doc outline link">
                      (file) Seek(offset, whence)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetChunkSize" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetChunkSize(bytes)" data-gtmc="doc outline link">
                      (file) SetChunkSize(bytes)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetContentType" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetContentType(ctype)" data-gtmc="doc outline link">
                      (file) SetContentType(ctype)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetId" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetId(id)" data-gtmc="doc outline link">
                      (file) SetId(id)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetMeta" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetMeta(metadata)" data-gtmc="doc outline link">
                      (file) SetMeta(metadata)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetName" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetName(name)" data-gtmc="doc outline link">
                      (file) SetName(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.SetUploadDate" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) SetUploadDate(t)" data-gtmc="doc outline link">
                      (file) SetUploadDate(t)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Size" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Size()" data-gtmc="doc outline link">
                      (file) Size()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.UploadDate" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) UploadDate()" data-gtmc="doc outline link">
                      (file) UploadDate()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#GridFile.Write" role="treeitem" aria-level="4" tabindex="-1"
                        title="(file) Write(data)" data-gtmc="doc outline link">
                      (file) Write(data)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Index" role="treeitem" aria-level="3" tabindex="-1" title="type Index"
                  data-gtmc="doc outline link">
                type Index
              </a>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Iter" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Iter" title="type Iter"
                   data-gtmc="doc outline link">
                type Iter
              </a>
              <ul role="group" id="nav.group.Iter">
                
                
                  <li role="none">
                    <a href="#Iter.All" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) All(result)" data-gtmc="doc outline link">
                      (iter) All(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.Close" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) Close()" data-gtmc="doc outline link">
                      (iter) Close()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.Done" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) Done()" data-gtmc="doc outline link">
                      (iter) Done()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.Err" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) Err()" data-gtmc="doc outline link">
                      (iter) Err()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.For" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) For(result, f)" data-gtmc="doc outline link">
                      (iter) For(result, f)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.Next" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) Next(result)" data-gtmc="doc outline link">
                      (iter) Next(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Iter.Timeout" role="treeitem" aria-level="4" tabindex="-1"
                        title="(iter) Timeout()" data-gtmc="doc outline link">
                      (iter) Timeout()
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#LastError" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.LastError" title="type LastError"
                   data-gtmc="doc outline link">
                type LastError
              </a>
              <ul role="group" id="nav.group.LastError">
                
                
                  <li role="none">
                    <a href="#LastError.Error" role="treeitem" aria-level="4" tabindex="-1"
                        title="(err) Error()" data-gtmc="doc outline link">
                      (err) Error()
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#MapReduce" role="treeitem" aria-level="3" tabindex="-1" title="type MapReduce"
                  data-gtmc="doc outline link">
                type MapReduce
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#MapReduceInfo" role="treeitem" aria-level="3" tabindex="-1" title="type MapReduceInfo"
                  data-gtmc="doc outline link">
                type MapReduceInfo
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#MapReduceTime" role="treeitem" aria-level="3" tabindex="-1" title="type MapReduceTime"
                  data-gtmc="doc outline link">
                type MapReduceTime
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Mode" role="treeitem" aria-level="3" tabindex="-1" title="type Mode"
                  data-gtmc="doc outline link">
                type Mode
              </a>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Pipe" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Pipe" title="type Pipe"
                   data-gtmc="doc outline link">
                type Pipe
              </a>
              <ul role="group" id="nav.group.Pipe">
                
                
                  <li role="none">
                    <a href="#Pipe.All" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) All(result)" data-gtmc="doc outline link">
                      (p) All(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Pipe.AllowDiskUse" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) AllowDiskUse()" data-gtmc="doc outline link">
                      (p) AllowDiskUse()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Pipe.Batch" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) Batch(n)" data-gtmc="doc outline link">
                      (p) Batch(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Pipe.Explain" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) Explain(result)" data-gtmc="doc outline link">
                      (p) Explain(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Pipe.Iter" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) Iter()" data-gtmc="doc outline link">
                      (p) Iter()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Pipe.One" role="treeitem" aria-level="4" tabindex="-1"
                        title="(p) One(result)" data-gtmc="doc outline link">
                      (p) One(result)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Query" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Query" title="type Query"
                   data-gtmc="doc outline link">
                type Query
              </a>
              <ul role="group" id="nav.group.Query">
                
                
                  <li role="none">
                    <a href="#Query.All" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) All(result)" data-gtmc="doc outline link">
                      (q) All(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Apply" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Apply(change, result)" data-gtmc="doc outline link">
                      (q) Apply(change, result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Batch" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Batch(n)" data-gtmc="doc outline link">
                      (q) Batch(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Comment" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Comment(comment)" data-gtmc="doc outline link">
                      (q) Comment(comment)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Count" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Count()" data-gtmc="doc outline link">
                      (q) Count()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Distinct" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Distinct(key, result)" data-gtmc="doc outline link">
                      (q) Distinct(key, result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Explain" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Explain(result)" data-gtmc="doc outline link">
                      (q) Explain(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.For" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) For(result, f)" data-gtmc="doc outline link">
                      (q) For(result, f)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Hint" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Hint(indexKey)" data-gtmc="doc outline link">
                      (q) Hint(indexKey)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Iter" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Iter()" data-gtmc="doc outline link">
                      (q) Iter()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Limit" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Limit(n)" data-gtmc="doc outline link">
                      (q) Limit(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.LogReplay" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) LogReplay()" data-gtmc="doc outline link">
                      (q) LogReplay()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.MapReduce" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) MapReduce(job, result)" data-gtmc="doc outline link">
                      (q) MapReduce(job, result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.One" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) One(result)" data-gtmc="doc outline link">
                      (q) One(result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Prefetch" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Prefetch(p)" data-gtmc="doc outline link">
                      (q) Prefetch(p)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Select" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Select(selector)" data-gtmc="doc outline link">
                      (q) Select(selector)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.SetMaxScan" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) SetMaxScan(n)" data-gtmc="doc outline link">
                      (q) SetMaxScan(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.SetMaxTime" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) SetMaxTime(d)" data-gtmc="doc outline link">
                      (q) SetMaxTime(d)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Skip" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Skip(n)" data-gtmc="doc outline link">
                      (q) Skip(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Snapshot" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Snapshot()" data-gtmc="doc outline link">
                      (q) Snapshot()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Sort" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Sort(fields)" data-gtmc="doc outline link">
                      (q) Sort(fields)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Query.Tail" role="treeitem" aria-level="4" tabindex="-1"
                        title="(q) Tail(timeout)" data-gtmc="doc outline link">
                      (q) Tail(timeout)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#QueryError" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.QueryError" title="type QueryError"
                   data-gtmc="doc outline link">
                type QueryError
              </a>
              <ul role="group" id="nav.group.QueryError">
                
                
                  <li role="none">
                    <a href="#QueryError.Error" role="treeitem" aria-level="4" tabindex="-1"
                        title="(err) Error()" data-gtmc="doc outline link">
                      (err) Error()
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Role" role="treeitem" aria-level="3" tabindex="-1" title="type Role"
                  data-gtmc="doc outline link">
                type Role
              </a>
             
          </li>
        
          
          <li role="none">
            
              <a href="#Safe" role="treeitem" aria-level="3" tabindex="-1" title="type Safe"
                  data-gtmc="doc outline link">
                type Safe
              </a>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#ServerAddr" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.ServerAddr" title="type ServerAddr"
                   data-gtmc="doc outline link">
                type ServerAddr
              </a>
              <ul role="group" id="nav.group.ServerAddr">
                
                
                  <li role="none">
                    <a href="#ServerAddr.String" role="treeitem" aria-level="4" tabindex="-1"
                        title="(addr) String()" data-gtmc="doc outline link">
                      (addr) String()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#ServerAddr.TCPAddr" role="treeitem" aria-level="4" tabindex="-1"
                        title="(addr) TCPAddr()" data-gtmc="doc outline link">
                      (addr) TCPAddr()
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Session" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Session" title="type Session"
                   data-gtmc="doc outline link">
                type Session
              </a>
              <ul role="group" id="nav.group.Session">
                
                  <li role="none">
                    <a href="#Dial" role="treeitem" aria-level="4" tabindex="-1"
                        title="Dial(url)" data-gtmc="doc outline link">
                      Dial(url)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#DialWithInfo" role="treeitem" aria-level="4" tabindex="-1"
                        title="DialWithInfo(info)" data-gtmc="doc outline link">
                      DialWithInfo(info)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#DialWithTimeout" role="treeitem" aria-level="4" tabindex="-1"
                        title="DialWithTimeout(url, timeout)" data-gtmc="doc outline link">
                      DialWithTimeout(url, timeout)
                    </a>
                  </li>
                
                
                  <li role="none">
                    <a href="#Session.BuildInfo" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) BuildInfo()" data-gtmc="doc outline link">
                      (s) BuildInfo()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Clone" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Clone()" data-gtmc="doc outline link">
                      (s) Clone()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Close" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Close()" data-gtmc="doc outline link">
                      (s) Close()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Copy" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Copy()" data-gtmc="doc outline link">
                      (s) Copy()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.DB" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) DB(name)" data-gtmc="doc outline link">
                      (s) DB(name)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.DatabaseNames" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) DatabaseNames()" data-gtmc="doc outline link">
                      (s) DatabaseNames()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.EnsureSafe" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) EnsureSafe(safe)" data-gtmc="doc outline link">
                      (s) EnsureSafe(safe)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.FindRef" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) FindRef(ref)" data-gtmc="doc outline link">
                      (s) FindRef(ref)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Fsync" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Fsync(async)" data-gtmc="doc outline link">
                      (s) Fsync(async)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.FsyncLock" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) FsyncLock()" data-gtmc="doc outline link">
                      (s) FsyncLock()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.FsyncUnlock" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) FsyncUnlock()" data-gtmc="doc outline link">
                      (s) FsyncUnlock()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.LiveServers" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) LiveServers()" data-gtmc="doc outline link">
                      (s) LiveServers()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Login" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Login(cred)" data-gtmc="doc outline link">
                      (s) Login(cred)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.LogoutAll" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) LogoutAll()" data-gtmc="doc outline link">
                      (s) LogoutAll()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Mode" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Mode()" data-gtmc="doc outline link">
                      (s) Mode()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.New" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) New()" data-gtmc="doc outline link">
                      (s) New()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Ping" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Ping()" data-gtmc="doc outline link">
                      (s) Ping()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Refresh" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Refresh()" data-gtmc="doc outline link">
                      (s) Refresh()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.ResetIndexCache" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) ResetIndexCache()" data-gtmc="doc outline link">
                      (s) ResetIndexCache()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Run" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Run(cmd, result)" data-gtmc="doc outline link">
                      (s) Run(cmd, result)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.Safe" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) Safe()" data-gtmc="doc outline link">
                      (s) Safe()
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SelectServers" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SelectServers(tags)" data-gtmc="doc outline link">
                      (s) SelectServers(tags)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetBatch" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetBatch(n)" data-gtmc="doc outline link">
                      (s) SetBatch(n)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetBypassValidation" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetBypassValidation(bypass)" data-gtmc="doc outline link">
                      (s) SetBypassValidation(bypass)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetCursorTimeout" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetCursorTimeout(d)" data-gtmc="doc outline link">
                      (s) SetCursorTimeout(d)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetMode" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetMode(consistency, refresh)" data-gtmc="doc outline link">
                      (s) SetMode(consistency, refresh)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetPoolLimit" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetPoolLimit(limit)" data-gtmc="doc outline link">
                      (s) SetPoolLimit(limit)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetPrefetch" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetPrefetch(p)" data-gtmc="doc outline link">
                      (s) SetPrefetch(p)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetSafe" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetSafe(safe)" data-gtmc="doc outline link">
                      (s) SetSafe(safe)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetSocketTimeout" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetSocketTimeout(d)" data-gtmc="doc outline link">
                      (s) SetSocketTimeout(d)
                    </a>
                  </li>
                
                  <li role="none">
                    <a href="#Session.SetSyncTimeout" role="treeitem" aria-level="4" tabindex="-1"
                        title="(s) SetSyncTimeout(d)" data-gtmc="doc outline link">
                      (s) SetSyncTimeout(d)
                    </a>
                  </li>
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              
              
              <a href="#Stats" role="treeitem" aria-expanded="false" aria-level="3" tabindex="-1"
                   data-aria-owns="nav.group.Stats" title="type Stats"
                   data-gtmc="doc outline link">
                type Stats
              </a>
              <ul role="group" id="nav.group.Stats">
                
                  <li role="none">
                    <a href="#GetStats" role="treeitem" aria-level="4" tabindex="-1"
                        title="GetStats()" data-gtmc="doc outline link">
                      GetStats()
                    </a>
                  </li>
                
                
              </ul>
             
          </li>
        
          
          <li role="none">
            
              <a href="#User" role="treeitem" aria-level="3" tabindex="-1" title="type User"
                  data-gtmc="doc outline link">
                type User
              </a>
             
          </li>
         
      </ul>
    </li>
  
  
</ul>

      </li>
    
    
      <li>
        <a href="#section-sourcefiles" data-gtmc="outline link">
          Source Files
        </a>
      </li>
    
    
      <li>
        <a href="#section-directories" data-gtmc="outline link">
          Directories
        </a>
      </li>
    
  </ul>

  </div>
  <div class="go-Main-navMobile js-mainNavMobile">
    <label class="go-Label">
      <select class="go-Select">
        
          <option selected disabled>README</option>
        
      </select>
    </label>
  </div>
</nav>
    <article class="go-Main-article js-mainContent">
  <div class="UnitDetails" data-test-id="UnitDetails" style="display: block;">
    <div class="UnitDetails-content js-unitDetailsContent" data-test-id="UnitDetails-content">
      
        
  <div class="UnitReadme UnitReadme--expanded js-readme">
    <h2 class="UnitReadme-title" id="section-readme">
      <img class="go-Icon" height="24" width="24" src="/static/shared/icon/chrome_reader_mode_gm_grey_24dp.svg" alt="">
      README
      <a class="UnitReadme-idLink" href="#section-readme">¶</a>
    </h2>
    
      <div class="UnitReadme-content" data-test-id="Unit-readmeContent">
        <div class="Overview-readmeContent js-readmeContent"><h3 class="h2" id="readme-the-mongodb-driver-for-go">The MongoDB driver for Go</h3>
<p>Please go to <a href="http://labix.org/mgo" rel="nofollow">http://labix.org/mgo</a> for all project details.</p>
</div>
      </div>
      <button class="UnitReadme-expandLink js-readmeExpand"
          data-test-id="readme-expand" data-gtmc="readme button"
          aria-label="Expand Readme">Expand ▾</button>
      <button class="UnitReadme-collapseLink js-readmeCollapse"
          data-test-id="readme-collapse" data-gtmc="readme button"
          aria-label="Expand Readme">Collapse ▴</button>
    
  </div>

      
      
        
          
  <div class="UnitDoc">
    <h2 class="UnitDoc-title" id="section-documentation">
      <img class="go-Icon" height="24" width="24" src="/static/shared/icon/code_gm_grey_24dp.svg" alt="">
      Documentation
      <a class="UnitDoc-idLink" href="#section-documentation">¶</a>
    </h2>
    
  
    
      <div class="UnitBuildContext-titleContext">
        <label>
          <a href="https://go.dev/about#build-context" class="UnitBuildContext-link">Rendered for</a>
          <select class="go-Select js-buildContextSelect">
            
              <option value="linux">linux/amd64</option>
            
              <option value="windows">windows/amd64</option>
            
              <option value="darwin">darwin/amd64</option>
            
              <option value="js">js/wasm</option>
            
          </select>
        </label>
      </div>
    
  

    <div class="Documentation js-documentation">
      
        
<div class="Documentation-content js-docContent"> <section class="Documentation-overview">
    <h3 tabindex="-1" id="pkg-overview" class="Documentation-overviewHeader">Overview <a href="#pkg-overview">¶</a></h3>

<p>Package mgo offers a rich MongoDB driver for Go.
</p><p>#########################################################
</p><p>THIS DRIVER IS UNMAINTAINED! See here for details:
</p><p><a href="https://github.com/go-mgo/mgo/blob/v2-unstable/README.md">https://github.com/go-mgo/mgo/blob/v2-unstable/README.md</a>
</p><p>#########################################################
</p><p>Usage of the driver revolves around the concept of sessions.  To
get started, obtain a session using the Dial function:
</p><pre>session, err := mgo.Dial(url)
</pre><p>This will establish one or more connections with the cluster of
servers defined by the url parameter.  From then on, the cluster
may be queried with multiple consistency rules (see SetMode) and
documents retrieved with statements such as:
</p><pre>c := session.DB(database).C(collection)
err := c.Find(query).One(&amp;result)
</pre><p>New sessions are typically created by calling session.Copy on the
initial session obtained at dial time. These new sessions will share
the same cluster information and connection pool, and may be easily
handed into other methods and functions for organizing logic.
Every session created must have its Close method called at the end
of its life time, so its resources may be put back in the pool or
collected, depending on the case.
</p><p>For more details, see the documentation for the types and methods.
</p>
</section><section class="Documentation-index">
    <h3 id="pkg-index" class="Documentation-indexHeader">Index <a href="#pkg-index">¶</a></h3>

<ul class="Documentation-indexList">
<li class="Documentation-indexVariables"><a href="#pkg-variables">Variables</a></li>
<li class="Documentation-indexFunction">
        <a href="#IsDup">func IsDup(err error) bool</a></li>
<li class="Documentation-indexFunction">
        <a href="#ResetStats">func ResetStats()</a></li>
<li class="Documentation-indexFunction">
        <a href="#SetDebug">func SetDebug(debug bool)</a></li>
<li class="Documentation-indexFunction">
        <a href="#SetLogger">func SetLogger(logger log_Logger)</a></li>
<li class="Documentation-indexFunction">
        <a href="#SetStats">func SetStats(enabled bool)</a></li>
<li class="Documentation-indexType">
          <a href="#BuildInfo">type BuildInfo</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#BuildInfo.VersionAtLeast">func (bi *BuildInfo) VersionAtLeast(version ...int) bool</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Bulk">type Bulk</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Bulk.Insert">func (b *Bulk) Insert(docs ...interface{})</a></li>
<li>
            <a href="#Bulk.Remove">func (b *Bulk) Remove(selectors ...interface{})</a></li>
<li>
            <a href="#Bulk.RemoveAll">func (b *Bulk) RemoveAll(selectors ...interface{})</a></li>
<li>
            <a href="#Bulk.Run">func (b *Bulk) Run() (*BulkResult, error)</a></li>
<li>
            <a href="#Bulk.Unordered">func (b *Bulk) Unordered()</a></li>
<li>
            <a href="#Bulk.Update">func (b *Bulk) Update(pairs ...interface{})</a></li>
<li>
            <a href="#Bulk.UpdateAll">func (b *Bulk) UpdateAll(pairs ...interface{})</a></li>
<li>
            <a href="#Bulk.Upsert">func (b *Bulk) Upsert(pairs ...interface{})</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#BulkError">type BulkError</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#BulkError.Cases">func (e *BulkError) Cases() []BulkErrorCase</a></li>
<li>
            <a href="#BulkError.Error">func (e *BulkError) Error() string</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#BulkErrorCase">type BulkErrorCase</a></li>
<li class="Documentation-indexType">
          <a href="#BulkResult">type BulkResult</a></li>
<li class="Documentation-indexType">
          <a href="#Change">type Change</a></li>
<li class="Documentation-indexType">
          <a href="#ChangeInfo">type ChangeInfo</a></li>
<li class="Documentation-indexType">
          <a href="#Collation">type Collation</a></li>
<li class="Documentation-indexType">
          <a href="#Collection">type Collection</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Collection.Bulk">func (c *Collection) Bulk() *Bulk</a></li>
<li>
            <a href="#Collection.Count">func (c *Collection) Count() (n int, err error)</a></li>
<li>
            <a href="#Collection.Create">func (c *Collection) Create(info *CollectionInfo) error</a></li>
<li>
            <a href="#Collection.DropCollection">func (c *Collection) DropCollection() error</a></li>
<li>
            <a href="#Collection.DropIndex">func (c *Collection) DropIndex(key ...string) error</a></li>
<li>
            <a href="#Collection.DropIndexName">func (c *Collection) DropIndexName(name string) error</a></li>
<li>
            <a href="#Collection.EnsureIndex">func (c *Collection) EnsureIndex(index Index) error</a></li>
<li>
            <a href="#Collection.EnsureIndexKey">func (c *Collection) EnsureIndexKey(key ...string) error</a></li>
<li>
            <a href="#Collection.Find">func (c *Collection) Find(query interface{}) *Query</a></li>
<li>
            <a href="#Collection.FindId">func (c *Collection) FindId(id interface{}) *Query</a></li>
<li>
            <a href="#Collection.Indexes">func (c *Collection) Indexes() (indexes []Index, err error)</a></li>
<li>
            <a href="#Collection.Insert">func (c *Collection) Insert(docs ...interface{}) error</a></li>
<li>
            <a href="#Collection.NewIter">func (c *Collection) NewIter(session *Session, firstBatch []bson.Raw, cursorId int64, err error) *Iter</a></li>
<li>
            <a href="#Collection.Pipe">func (c *Collection) Pipe(pipeline interface{}) *Pipe</a></li>
<li>
            <a href="#Collection.Remove">func (c *Collection) Remove(selector interface{}) error</a></li>
<li>
            <a href="#Collection.RemoveAll">func (c *Collection) RemoveAll(selector interface{}) (info *ChangeInfo, err error)</a></li>
<li>
            <a href="#Collection.RemoveId">func (c *Collection) RemoveId(id interface{}) error</a></li>
<li>
            <a href="#Collection.Repair">func (c *Collection) Repair() *Iter</a></li>
<li>
            <a href="#Collection.Update">func (c *Collection) Update(selector interface{}, update interface{}) error</a></li>
<li>
            <a href="#Collection.UpdateAll">func (c *Collection) UpdateAll(selector interface{}, update interface{}) (info *ChangeInfo, err error)</a></li>
<li>
            <a href="#Collection.UpdateId">func (c *Collection) UpdateId(id interface{}, update interface{}) error</a></li>
<li>
            <a href="#Collection.Upsert">func (c *Collection) Upsert(selector interface{}, update interface{}) (info *ChangeInfo, err error)</a></li>
<li>
            <a href="#Collection.UpsertId">func (c *Collection) UpsertId(id interface{}, update interface{}) (info *ChangeInfo, err error)</a></li>
<li>
            <a href="#Collection.With">func (c *Collection) With(s *Session) *Collection</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#CollectionInfo">type CollectionInfo</a></li>
<li class="Documentation-indexType">
          <a href="#Credential">type Credential</a></li>
<li class="Documentation-indexType">
          <a href="#DBRef">type DBRef</a></li>
<li class="Documentation-indexType">
          <a href="#Database">type Database</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Database.AddUser">func (db *Database) AddUser(username, password string, readOnly bool) error</a></li>
<li>
            <a href="#Database.C">func (db *Database) C(name string) *Collection</a></li>
<li>
            <a href="#Database.CollectionNames">func (db *Database) CollectionNames() (names []string, err error)</a></li>
<li>
            <a href="#Database.DropDatabase">func (db *Database) DropDatabase() error</a></li>
<li>
            <a href="#Database.FindRef">func (db *Database) FindRef(ref *DBRef) *Query</a></li>
<li>
            <a href="#Database.GridFS">func (db *Database) GridFS(prefix string) *GridFS</a></li>
<li>
            <a href="#Database.Login">func (db *Database) Login(user, pass string) error</a></li>
<li>
            <a href="#Database.Logout">func (db *Database) Logout()</a></li>
<li>
            <a href="#Database.RemoveUser">func (db *Database) RemoveUser(user string) error</a></li>
<li>
            <a href="#Database.Run">func (db *Database) Run(cmd interface{}, result interface{}) error</a></li>
<li>
            <a href="#Database.UpsertUser">func (db *Database) UpsertUser(user *User) error</a></li>
<li>
            <a href="#Database.With">func (db *Database) With(s *Session) *Database</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#DialInfo">type DialInfo</a></li>
<li><ul class="Documentation-indexTypeFunctions">
<li>
            <a href="#ParseURL">func ParseURL(url string) (*DialInfo, error)</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#GridFS">type GridFS</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#GridFS.Create">func (gfs *GridFS) Create(name string) (file *GridFile, err error)</a></li>
<li>
            <a href="#GridFS.Find">func (gfs *GridFS) Find(query interface{}) *Query</a></li>
<li>
            <a href="#GridFS.Open">func (gfs *GridFS) Open(name string) (file *GridFile, err error)</a></li>
<li>
            <a href="#GridFS.OpenId">func (gfs *GridFS) OpenId(id interface{}) (file *GridFile, err error)</a></li>
<li>
            <a href="#GridFS.OpenNext">func (gfs *GridFS) OpenNext(iter *Iter, file **GridFile) bool</a></li>
<li>
            <a href="#GridFS.Remove">func (gfs *GridFS) Remove(name string) (err error)</a></li>
<li>
            <a href="#GridFS.RemoveId">func (gfs *GridFS) RemoveId(id interface{}) error</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#GridFile">type GridFile</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#GridFile.Abort">func (file *GridFile) Abort()</a></li>
<li>
            <a href="#GridFile.Close">func (file *GridFile) Close() (err error)</a></li>
<li>
            <a href="#GridFile.ContentType">func (file *GridFile) ContentType() string</a></li>
<li>
            <a href="#GridFile.GetMeta">func (file *GridFile) GetMeta(result interface{}) (err error)</a></li>
<li>
            <a href="#GridFile.Id">func (file *GridFile) Id() interface{}</a></li>
<li>
            <a href="#GridFile.MD5">func (file *GridFile) MD5() (md5 string)</a></li>
<li>
            <a href="#GridFile.Name">func (file *GridFile) Name() string</a></li>
<li>
            <a href="#GridFile.Read">func (file *GridFile) Read(b []byte) (n int, err error)</a></li>
<li>
            <a href="#GridFile.Seek">func (file *GridFile) Seek(offset int64, whence int) (pos int64, err error)</a></li>
<li>
            <a href="#GridFile.SetChunkSize">func (file *GridFile) SetChunkSize(bytes int)</a></li>
<li>
            <a href="#GridFile.SetContentType">func (file *GridFile) SetContentType(ctype string)</a></li>
<li>
            <a href="#GridFile.SetId">func (file *GridFile) SetId(id interface{})</a></li>
<li>
            <a href="#GridFile.SetMeta">func (file *GridFile) SetMeta(metadata interface{})</a></li>
<li>
            <a href="#GridFile.SetName">func (file *GridFile) SetName(name string)</a></li>
<li>
            <a href="#GridFile.SetUploadDate">func (file *GridFile) SetUploadDate(t time.Time)</a></li>
<li>
            <a href="#GridFile.Size">func (file *GridFile) Size() (bytes int64)</a></li>
<li>
            <a href="#GridFile.UploadDate">func (file *GridFile) UploadDate() time.Time</a></li>
<li>
            <a href="#GridFile.Write">func (file *GridFile) Write(data []byte) (n int, err error)</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Index">type Index</a></li>
<li class="Documentation-indexType">
          <a href="#Iter">type Iter</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Iter.All">func (iter *Iter) All(result interface{}) error</a></li>
<li>
            <a href="#Iter.Close">func (iter *Iter) Close() error</a></li>
<li>
            <a href="#Iter.Done">func (iter *Iter) Done() bool</a></li>
<li>
            <a href="#Iter.Err">func (iter *Iter) Err() error</a></li>
<li>
            <a href="#Iter.For">func (iter *Iter) For(result interface{}, f func() error) (err error)</a></li>
<li>
            <a href="#Iter.Next">func (iter *Iter) Next(result interface{}) bool</a></li>
<li>
            <a href="#Iter.Timeout">func (iter *Iter) Timeout() bool</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#LastError">type LastError</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#LastError.Error">func (err *LastError) Error() string</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#MapReduce">type MapReduce</a></li>
<li class="Documentation-indexType">
          <a href="#MapReduceInfo">type MapReduceInfo</a></li>
<li class="Documentation-indexType">
          <a href="#MapReduceTime">type MapReduceTime</a></li>
<li class="Documentation-indexType">
          <a href="#Mode">type Mode</a></li>
<li class="Documentation-indexType">
          <a href="#Pipe">type Pipe</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Pipe.All">func (p *Pipe) All(result interface{}) error</a></li>
<li>
            <a href="#Pipe.AllowDiskUse">func (p *Pipe) AllowDiskUse() *Pipe</a></li>
<li>
            <a href="#Pipe.Batch">func (p *Pipe) Batch(n int) *Pipe</a></li>
<li>
            <a href="#Pipe.Explain">func (p *Pipe) Explain(result interface{}) error</a></li>
<li>
            <a href="#Pipe.Iter">func (p *Pipe) Iter() *Iter</a></li>
<li>
            <a href="#Pipe.One">func (p *Pipe) One(result interface{}) error</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Query">type Query</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Query.All">func (q *Query) All(result interface{}) error</a></li>
<li>
            <a href="#Query.Apply">func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err error)</a></li>
<li>
            <a href="#Query.Batch">func (q *Query) Batch(n int) *Query</a></li>
<li>
            <a href="#Query.Comment">func (q *Query) Comment(comment string) *Query</a></li>
<li>
            <a href="#Query.Count">func (q *Query) Count() (n int, err error)</a></li>
<li>
            <a href="#Query.Distinct">func (q *Query) Distinct(key string, result interface{}) error</a></li>
<li>
            <a href="#Query.Explain">func (q *Query) Explain(result interface{}) error</a></li>
<li>
            <a href="#Query.For">func (q *Query) For(result interface{}, f func() error) error</a></li>
<li>
            <a href="#Query.Hint">func (q *Query) Hint(indexKey ...string) *Query</a></li>
<li>
            <a href="#Query.Iter">func (q *Query) Iter() *Iter</a></li>
<li>
            <a href="#Query.Limit">func (q *Query) Limit(n int) *Query</a></li>
<li>
            <a href="#Query.LogReplay">func (q *Query) LogReplay() *Query</a></li>
<li>
            <a href="#Query.MapReduce">func (q *Query) MapReduce(job *MapReduce, result interface{}) (info *MapReduceInfo, err error)</a></li>
<li>
            <a href="#Query.One">func (q *Query) One(result interface{}) (err error)</a></li>
<li>
            <a href="#Query.Prefetch">func (q *Query) Prefetch(p float64) *Query</a></li>
<li>
            <a href="#Query.Select">func (q *Query) Select(selector interface{}) *Query</a></li>
<li>
            <a href="#Query.SetMaxScan">func (q *Query) SetMaxScan(n int) *Query</a></li>
<li>
            <a href="#Query.SetMaxTime">func (q *Query) SetMaxTime(d time.Duration) *Query</a></li>
<li>
            <a href="#Query.Skip">func (q *Query) Skip(n int) *Query</a></li>
<li>
            <a href="#Query.Snapshot">func (q *Query) Snapshot() *Query</a></li>
<li>
            <a href="#Query.Sort">func (q *Query) Sort(fields ...string) *Query</a></li>
<li>
            <a href="#Query.Tail">func (q *Query) Tail(timeout time.Duration) *Iter</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#QueryError">type QueryError</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#QueryError.Error">func (err *QueryError) Error() string</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Role">type Role</a></li>
<li class="Documentation-indexType">
          <a href="#Safe">type Safe</a></li>
<li class="Documentation-indexType">
          <a href="#ServerAddr">type ServerAddr</a></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#ServerAddr.String">func (addr *ServerAddr) String() string</a></li>
<li>
            <a href="#ServerAddr.TCPAddr">func (addr *ServerAddr) TCPAddr() *net.TCPAddr</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Session">type Session</a></li>
<li><ul class="Documentation-indexTypeFunctions">
<li>
            <a href="#Dial">func Dial(url string) (*Session, error)</a></li>
<li>
            <a href="#DialWithInfo">func DialWithInfo(info *DialInfo) (*Session, error)</a></li>
<li>
            <a href="#DialWithTimeout">func DialWithTimeout(url string, timeout time.Duration) (*Session, error)</a></li>
</ul></li>
<li><ul class="Documentation-indexTypeMethods">
<li>
            <a href="#Session.BuildInfo">func (s *Session) BuildInfo() (info BuildInfo, err error)</a></li>
<li>
            <a href="#Session.Clone">func (s *Session) Clone() *Session</a></li>
<li>
            <a href="#Session.Close">func (s *Session) Close()</a></li>
<li>
            <a href="#Session.Copy">func (s *Session) Copy() *Session</a></li>
<li>
            <a href="#Session.DB">func (s *Session) DB(name string) *Database</a></li>
<li>
            <a href="#Session.DatabaseNames">func (s *Session) DatabaseNames() (names []string, err error)</a></li>
<li>
            <a href="#Session.EnsureSafe">func (s *Session) EnsureSafe(safe *Safe)</a></li>
<li>
            <a href="#Session.FindRef">func (s *Session) FindRef(ref *DBRef) *Query</a></li>
<li>
            <a href="#Session.Fsync">func (s *Session) Fsync(async bool) error</a></li>
<li>
            <a href="#Session.FsyncLock">func (s *Session) FsyncLock() error</a></li>
<li>
            <a href="#Session.FsyncUnlock">func (s *Session) FsyncUnlock() error</a></li>
<li>
            <a href="#Session.LiveServers">func (s *Session) LiveServers() (addrs []string)</a></li>
<li>
            <a href="#Session.Login">func (s *Session) Login(cred *Credential) error</a></li>
<li>
            <a href="#Session.LogoutAll">func (s *Session) LogoutAll()</a></li>
<li>
            <a href="#Session.Mode">func (s *Session) Mode() Mode</a></li>
<li>
            <a href="#Session.New">func (s *Session) New() *Session</a></li>
<li>
            <a href="#Session.Ping">func (s *Session) Ping() error</a></li>
<li>
            <a href="#Session.Refresh">func (s *Session) Refresh()</a></li>
<li>
            <a href="#Session.ResetIndexCache">func (s *Session) ResetIndexCache()</a></li>
<li>
            <a href="#Session.Run">func (s *Session) Run(cmd interface{}, result interface{}) error</a></li>
<li>
            <a href="#Session.Safe">func (s *Session) Safe() (safe *Safe)</a></li>
<li>
            <a href="#Session.SelectServers">func (s *Session) SelectServers(tags ...bson.D)</a></li>
<li>
            <a href="#Session.SetBatch">func (s *Session) SetBatch(n int)</a></li>
<li>
            <a href="#Session.SetBypassValidation">func (s *Session) SetBypassValidation(bypass bool)</a></li>
<li>
            <a href="#Session.SetCursorTimeout">func (s *Session) SetCursorTimeout(d time.Duration)</a></li>
<li>
            <a href="#Session.SetMode">func (s *Session) SetMode(consistency Mode, refresh bool)</a></li>
<li>
            <a href="#Session.SetPoolLimit">func (s *Session) SetPoolLimit(limit int)</a></li>
<li>
            <a href="#Session.SetPrefetch">func (s *Session) SetPrefetch(p float64)</a></li>
<li>
            <a href="#Session.SetSafe">func (s *Session) SetSafe(safe *Safe)</a></li>
<li>
            <a href="#Session.SetSocketTimeout">func (s *Session) SetSocketTimeout(d time.Duration)</a></li>
<li>
            <a href="#Session.SetSyncTimeout">func (s *Session) SetSyncTimeout(d time.Duration)</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#Stats">type Stats</a></li>
<li><ul class="Documentation-indexTypeFunctions">
<li>
            <a href="#GetStats">func GetStats() (snapshot Stats)</a></li>
</ul></li>
<li class="Documentation-indexType">
          <a href="#User">type User</a></li>
</ul>
</section><h3 tabindex="-1" id="pkg-constants" class="Documentation-constantsHeader">Constants <a href="#pkg-constants">¶</a></h3>

  <section class="Documentation-constants"><p class="Documentation-empty">This section is empty.</p></section>

  <h3 tabindex="-1" id="pkg-variables" class="Documentation-variablesHeader">Variables <a href="#pkg-variables">¶</a></h3>

  <section class="Documentation-variables">
    <div class="Documentation-declaration">
      <span class="Documentation-declarationLink"><a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L144">View Source</a></span>
      <pre>var (
<span id="ErrNotFound" data-kind="variable">	ErrNotFound = <a href="/errors">errors</a>.<a href="/errors#New">New</a>(&#34;not found&#34;)
</span><span id="ErrCursor" data-kind="variable">	ErrCursor   = <a href="/errors">errors</a>.<a href="/errors#New">New</a>(&#34;invalid cursor&#34;)
</span>)</pre>
    </div>
  
</section>

  <h3 tabindex="-1" id="pkg-functions" class="Documentation-functionsHeader">Functions <a href="#pkg-functions">¶</a></h3>

  <section class="Documentation-functions"><div class="Documentation-function">
	  
  
  
    <h4 tabindex="-1" id="IsDup" data-kind="function" class="Documentation-functionHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2413">IsDup</a> <a class="Documentation-idLink" href="#IsDup">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func IsDup(err <a href="/builtin#error">error</a>) <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>IsDup returns whether err informs of a duplicate key error because
a primary key index or a secondary unique index already has an entry
with the given value.
</p>

  

        </div><div class="Documentation-function">
	  
  
  
    <h4 tabindex="-1" id="ResetStats" data-kind="function" class="Documentation-functionHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/stats.go#L55">ResetStats</a> <a class="Documentation-idLink" href="#ResetStats">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func ResetStats()</pre>
    </div>
  

  

        </div><div class="Documentation-function">
	  
  
  
    <h4 tabindex="-1" id="SetDebug" data-kind="function" class="Documentation-functionHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/log.go#L67">SetDebug</a> <a class="Documentation-idLink" href="#SetDebug">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func SetDebug(debug <a href="/builtin#bool">bool</a>)</pre>
    </div>
  <p>Enable the delivery of debug messages to the logger.  Only meaningful
if a logger is also set.
</p>

  

        </div><div class="Documentation-function">
	  
  
  
    <h4 tabindex="-1" id="SetLogger" data-kind="function" class="Documentation-functionHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/log.go#L57">SetLogger</a> <a class="Documentation-idLink" href="#SetLogger">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func SetLogger(logger log_Logger)</pre>
    </div>
  <p>Specify the *log.Logger object where log messages should be sent to.
</p>

  

        </div><div class="Documentation-function">
	  
  
  
    <h4 tabindex="-1" id="SetStats" data-kind="function" class="Documentation-functionHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/stats.go#L36">SetStats</a> <a class="Documentation-idLink" href="#SetStats">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func SetStats(enabled <a href="/builtin#bool">bool</a>)</pre>
    </div>
  

  

        </div></section>

  <h3 tabindex="-1" id="pkg-types" class="Documentation-typesHeader">Types <a href="#pkg-types">¶</a></h3>

  <section class="Documentation-types"><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="BuildInfo" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4349">BuildInfo</a> <a class="Documentation-idLink" href="#BuildInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type BuildInfo struct {
<span id="BuildInfo.Version" data-kind="field">	Version        <a href="/builtin#string">string</a>
</span><span id="BuildInfo.VersionArray" data-kind="field">	VersionArray   []<a href="/builtin#int">int</a>  `bson:&#34;versionArray&#34;` <span class="comment">// On MongoDB 2.0+; assembled from Version otherwise</span>
</span><span id="BuildInfo.GitVersion" data-kind="field">	GitVersion     <a href="/builtin#string">string</a> `bson:&#34;gitVersion&#34;`
</span><span id="BuildInfo.OpenSSLVersion" data-kind="field">	OpenSSLVersion <a href="/builtin#string">string</a> `bson:&#34;OpenSSLVersion&#34;`
</span><span id="BuildInfo.SysInfo" data-kind="field">	SysInfo        <a href="/builtin#string">string</a> `bson:&#34;sysInfo&#34;` <span class="comment">// Deprecated and empty on MongoDB 3.2+.</span>
</span><span id="BuildInfo.Bits" data-kind="field">	Bits           <a href="/builtin#int">int</a>
</span><span id="BuildInfo.Debug" data-kind="field">	Debug          <a href="/builtin#bool">bool</a>
</span><span id="BuildInfo.MaxObjectSize" data-kind="field">	MaxObjectSize  <a href="/builtin#int">int</a> `bson:&#34;maxBsonObjectSize&#34;`
</span>}</pre>
    </div>
  <p>The BuildInfo type encapsulates details about the running MongoDB server.
</p><p>Note that the VersionArray field was introduced in MongoDB 2.0+, but it is
internally assembled from the Version information for previous versions.
In both cases, VersionArray is guaranteed to have at least 4 entries.
</p>
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="BuildInfo.VersionAtLeast" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*BuildInfo) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4363">VersionAtLeast</a> <a class="Documentation-idLink" href="#BuildInfo.VersionAtLeast">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (bi *<a href="#BuildInfo">BuildInfo</a>) VersionAtLeast(version ...<a href="/builtin#int">int</a>) <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>VersionAtLeast returns whether the BuildInfo version is greater than or
equal to the provided version number. If more than one number is
provided, numbers will be considered as major, minor, and so on.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Bulk" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L24">Bulk</a> <a class="Documentation-idLink" href="#Bulk">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Bulk struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  <p>Bulk represents an operation that can be prepared with several
orthogonal changes before being delivered to the server.
</p><p>MongoDB servers older than version 2.6 do not have proper support for bulk
operations, so the driver attempts to map its API as much as possible into
the functionality that works. In particular, in those releases updates and
removals are sent individually, and inserts are sent in bulk but have
suboptimal error reporting compared to more recent versions of the server.
See the documentation of BulkErrorCase for details on that.
</p><p>Relevant documentation:
</p><pre><a href="http://blog.mongodb.org/post/84922794768/mongodbs-new-bulk-api">http://blog.mongodb.org/post/84922794768/mongodbs-new-bulk-api</a>
</pre>
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Insert" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L159">Insert</a> <a class="Documentation-idLink" href="#Bulk.Insert">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Insert(docs ...interface{})</pre>
    </div>
  <p>Insert queues up the provided documents for insertion.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Remove" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L166">Remove</a> <a class="Documentation-idLink" href="#Bulk.Remove">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Remove(selectors ...interface{})</pre>
    </div>
  <p>Remove queues up the provided selectors for removing matching documents.
Each selector will remove only a single matching document.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.RemoveAll" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L183">RemoveAll</a> <a class="Documentation-idLink" href="#Bulk.RemoveAll">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) RemoveAll(selectors ...interface{})</pre>
    </div>
  <p>RemoveAll queues up the provided selectors for removing all matching documents.
Each selector will remove all matching documents.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Run" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L274">Run</a> <a class="Documentation-idLink" href="#Bulk.Run">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Run() (*<a href="#BulkResult">BulkResult</a>, <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Run runs all the operations queued up.
</p><p>If an error is reported on an unordered bulk operation, the error value may
be an aggregation of all issues observed. As an exception to that, Insert
operations running on MongoDB versions prior to 2.6 will report the last
error only due to a limitation in the wire protocol.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Unordered" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L131">Unordered</a> <a class="Documentation-idLink" href="#Bulk.Unordered">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Unordered()</pre>
    </div>
  <p>Unordered puts the bulk operation in unordered mode.
</p><p>In unordered mode the indvidual operations may be sent
out of order, which means latter operations may proceed
even if prior ones have failed.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Update" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L202">Update</a> <a class="Documentation-idLink" href="#Bulk.Update">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Update(pairs ...interface{})</pre>
    </div>
  <p>Update queues up the provided pairs of updating instructions.
The first element of each pair selects which documents must be
updated, and the second element defines how to update it.
Each pair matches exactly one document for updating at most.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.UpdateAll" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L224">UpdateAll</a> <a class="Documentation-idLink" href="#Bulk.UpdateAll">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) UpdateAll(pairs ...interface{})</pre>
    </div>
  <p>UpdateAll queues up the provided pairs of updating instructions.
The first element of each pair selects which documents must be
updated, and the second element defines how to update it.
Each pair updates all documents matching the selector.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Bulk.Upsert" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Bulk) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L248">Upsert</a> <a class="Documentation-idLink" href="#Bulk.Upsert">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (b *<a href="#Bulk">Bulk</a>) Upsert(pairs ...interface{})</pre>
    </div>
  <p>Upsert queues up the provided pairs of upserting instructions.
The first element of each pair selects which documents must be
updated, and the second element defines how to update it.
Each pair matches exactly one document for updating at most.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="BulkError" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L62">BulkError</a> <a class="Documentation-idLink" href="#BulkError">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type BulkError struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  <p>BulkError holds an error returned from running a Bulk operation.
Individual errors may be obtained and inspected via the Cases method.
</p>
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="BulkError.Cases" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*BulkError) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L117">Cases</a> <a class="Documentation-idLink" href="#BulkError.Cases">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (e *<a href="#BulkError">BulkError</a>) Cases() []<a href="#BulkErrorCase">BulkErrorCase</a></pre>
    </div>
  <p>Cases returns all individual errors found while attempting the requested changes.
</p><p>See the documentation of BulkErrorCase for limitations in older MongoDB releases.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="BulkError.Error" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*BulkError) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L66">Error</a> <a class="Documentation-idLink" href="#BulkError.Error">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (e *<a href="#BulkError">BulkError</a>) Error() <a href="/builtin#string">string</a></pre>
    </div>
  

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="BulkErrorCase" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L109">BulkErrorCase</a> <a class="Documentation-idLink" href="#BulkErrorCase">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type BulkErrorCase struct {
<span id="BulkErrorCase.Index" data-kind="field">	Index <a href="/builtin#int">int</a> <span class="comment">// Position of operation that failed, or -1 if unknown.</span>
</span><span id="BulkErrorCase.Err" data-kind="field">	Err   <a href="/builtin#error">error</a>
</span>}</pre>
    </div>
  <p>BulkErrorCase holds an individual error found while attempting a single change
within a bulk operation, and the position in which it was enqueued.
</p><p>MongoDB servers older than version 2.6 do not have proper support for bulk
operations, so the driver attempts to map its API as much as possible into
the functionality that works. In particular, only the last error is reported
for bulk inserts and without any positional information, so the Index
field is set to -1 in these cases.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="BulkResult" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L50">BulkResult</a> <a class="Documentation-idLink" href="#BulkResult">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type BulkResult struct {
<span id="BulkResult.Matched" data-kind="field">	Matched  <a href="/builtin#int">int</a>
</span><span id="BulkResult.Modified" data-kind="field">	Modified <a href="/builtin#int">int</a> <span class="comment">// Available only for MongoDB 2.6+</span>
</span>	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  <p>BulkResult holds the results for a bulk operation.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Change" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4231">Change</a> <a class="Documentation-idLink" href="#Change">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Change struct {
<span id="Change.Update" data-kind="field">	Update    interface{} <span class="comment">// The update document</span>
</span><span id="Change.Upsert" data-kind="field">	Upsert    <a href="/builtin#bool">bool</a>        <span class="comment">// Whether to insert in case the document isn&#39;t found</span>
</span><span id="Change.Remove" data-kind="field">	Remove    <a href="/builtin#bool">bool</a>        <span class="comment">// Whether to remove the document found rather than updating</span>
</span><span id="Change.ReturnNew" data-kind="field">	ReturnNew <a href="/builtin#bool">bool</a>        <span class="comment">// Should the modified document be returned rather than the old one</span>
</span>}</pre>
    </div>
  <p>Change holds fields for running a findAndModify MongoDB command via
the Query.Apply method.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="ChangeInfo" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2478">ChangeInfo</a> <a class="Documentation-idLink" href="#ChangeInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type ChangeInfo struct {
	<span class="comment">// Updated reports the number of existing documents modified.</span>
	<span class="comment">// Due to server limitations, this reports the same value as the Matched field when</span>
	<span class="comment">// talking to MongoDB &lt;= 2.4 and on Upsert and Apply (findAndModify) operations.</span>
<span id="ChangeInfo.Updated" data-kind="field">	Updated    <a href="/builtin#int">int</a>
</span><span id="ChangeInfo.Removed" data-kind="field">	Removed    <a href="/builtin#int">int</a>         <span class="comment">// Number of documents removed</span>
</span><span id="ChangeInfo.Matched" data-kind="field">	Matched    <a href="/builtin#int">int</a>         <span class="comment">// Number of documents matched but not necessarily changed</span>
</span><span id="ChangeInfo.UpsertedId" data-kind="field">	UpsertedId interface{} <span class="comment">// Upserted _id field, when not explicitly provided</span>
</span>}</pre>
    </div>
  <p>ChangeInfo holds details about the outcome of an update operation.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Collation" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1059">Collation</a> <a class="Documentation-idLink" href="#Collation">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Collation struct {

<span id="Collation.Locale" data-kind="field">	<span class="comment">// Locale defines the collation locale.</span>
</span>	Locale <a href="/builtin#string">string</a> `bson:&#34;locale&#34;`

<span id="Collation.CaseLevel" data-kind="field">	<span class="comment">// CaseLevel defines whether to turn case sensitivity on at strength 1 or 2.</span>
</span>	CaseLevel <a href="/builtin#bool">bool</a> `bson:&#34;caseLevel,omitempty&#34;`

<span id="Collation.CaseFirst" data-kind="field">	<span class="comment">// CaseFirst may be set to &#34;upper&#34; or &#34;lower&#34; to define whether</span>
</span>	<span class="comment">// to have uppercase or lowercase items first. Default is &#34;off&#34;.</span>
	CaseFirst <a href="/builtin#string">string</a> `bson:&#34;caseFirst,omitempty&#34;`

<span id="Collation.Strength" data-kind="field">	<span class="comment">// Strength defines the priority of comparison properties, as follows:</span>
</span>	<span class="comment">//</span>
	<span class="comment">//   1 (primary)    - Strongest level, denote difference between base characters</span>
	<span class="comment">//   2 (secondary)  - Accents in characters are considered secondary differences</span>
	<span class="comment">//   3 (tertiary)   - Upper and lower case differences in characters are</span>
	<span class="comment">//                    distinguished at the tertiary level</span>
	<span class="comment">//   4 (quaternary) - When punctuation is ignored at level 1-3, an additional</span>
	<span class="comment">//                    level can be used to distinguish words with and without</span>
	<span class="comment">//                    punctuation. Should only be used if ignoring punctuation</span>
	<span class="comment">//                    is required or when processing Japanese text.</span>
	<span class="comment">//   5 (identical)  - When all other levels are equal, the identical level is</span>
	<span class="comment">//                    used as a tiebreaker. The Unicode code point values of</span>
	<span class="comment">//                    the NFD form of each string are compared at this level,</span>
	<span class="comment">//                    just in case there is no difference at levels 1-4</span>
	<span class="comment">//</span>
	<span class="comment">// Strength defaults to 3.</span>
	Strength <a href="/builtin#int">int</a> `bson:&#34;strength,omitempty&#34;`

<span id="Collation.NumericOrdering" data-kind="field">	<span class="comment">// NumericOrdering defines whether to order numbers based on numerical</span>
</span>	<span class="comment">// order and not collation order.</span>
	NumericOrdering <a href="/builtin#bool">bool</a> `bson:&#34;numericOrdering,omitempty&#34;`

<span id="Collation.Alternate" data-kind="field">	<span class="comment">// Alternate controls whether spaces and punctuation are considered base characters.</span>
</span>	<span class="comment">// May be set to &#34;non-ignorable&#34; (spaces and punctuation considered base characters)</span>
	<span class="comment">// or &#34;shifted&#34; (spaces and punctuation not considered base characters, and only</span>
	<span class="comment">// distinguished at strength &gt; 3). Defaults to &#34;non-ignorable&#34;.</span>
	Alternate <a href="/builtin#string">string</a> `bson:&#34;alternate,omitempty&#34;`

<span id="Collation.Backwards" data-kind="field">	<span class="comment">// Backwards defines whether to have secondary differences considered in reverse order,</span>
</span>	<span class="comment">// as done in the French language.</span>
	Backwards <a href="/builtin#bool">bool</a> `bson:&#34;backwards,omitempty&#34;`
}</pre>
    </div>
  

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Collection" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L101">Collection</a> <a class="Documentation-idLink" href="#Collection">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Collection struct {
<span id="Collection.Database" data-kind="field">	Database *<a href="#Database">Database</a>
</span><span id="Collection.Name" data-kind="field">	Name     <a href="/builtin#string">string</a> <span class="comment">// &#34;collection&#34;</span>
</span><span id="Collection.FullName" data-kind="field">	FullName <a href="/builtin#string">string</a> <span class="comment">// &#34;db.collection&#34;</span>
</span>}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Bulk" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go#L122">Bulk</a> <a class="Documentation-idLink" href="#Collection.Bulk">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Bulk() *<a href="#Bulk">Bulk</a></pre>
    </div>
  <p>Bulk returns a value to prepare the execution of a bulk operation.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Count" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3975">Count</a> <a class="Documentation-idLink" href="#Collection.Count">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Count() (n <a href="/builtin#int">int</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Count returns the total number of documents in the collection.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Create" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2691">Create</a> <a class="Documentation-idLink" href="#Collection.Create">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Create(info *<a href="#CollectionInfo">CollectionInfo</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Create explicitly creates the c collection with details of info.
MongoDB creates collections automatically on use, so this method
is only necessary when creating collection with non-default
characteristics, such as capped collections.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/createCollection+Command">http://www.mongodb.org/display/DOCS/createCollection+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Capped+Collections">http://www.mongodb.org/display/DOCS/Capped+Collections</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.DropCollection" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2628">DropCollection</a> <a class="Documentation-idLink" href="#Collection.DropCollection">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) DropCollection() <a href="/builtin#error">error</a></pre>
    </div>
  <p>DropCollection removes the entire collection including all of its documents.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.DropIndex" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1345">DropIndex</a> <a class="Documentation-idLink" href="#Collection.DropIndex">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) DropIndex(key ...<a href="/builtin#string">string</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>DropIndex drops the index with the provided key from the c collection.
</p><p>See EnsureIndex for details on the accepted key variants.
</p><p>For example:
</p><pre>err1 := collection.DropIndex(&#34;firstField&#34;, &#34;-secondField&#34;)
err2 := collection.DropIndex(&#34;customIndexName&#34;)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.DropIndexName" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1380">DropIndexName</a> <a class="Documentation-idLink" href="#Collection.DropIndexName">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) DropIndexName(name <a href="/builtin#string">string</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>DropIndexName removes the index with the provided index name.
</p><p>For example:
</p><pre>err := collection.DropIndex(&#34;customIndexName&#34;)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.EnsureIndex" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1267">EnsureIndex</a> <a class="Documentation-idLink" href="#Collection.EnsureIndex">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) EnsureIndex(index <a href="#Index">Index</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>EnsureIndex ensures an index with the given key exists, creating it with
the provided parameters if necessary. EnsureIndex does not modify a previously
existent index with a matching key. The old index must be dropped first instead.
</p><p>Once EnsureIndex returns successfully, following requests for the same index
will not contact the server unless Collection.DropIndex is used to drop the
same index, or Session.ResetIndexCache is called.
</p><p>For example:
</p><pre>index := Index{
    Key: []string{&#34;lastname&#34;, &#34;firstname&#34;},
    Unique: true,
    DropDups: true,
    Background: true, // See notes.
    Sparse: true,
}
err := collection.EnsureIndex(index)
</pre><p>The Key value determines which fields compose the index. The index ordering
will be ascending by default.  To obtain an index with a descending order,
the field name should be prefixed by a dash (e.g. []string{&#34;-time&#34;}). It can
also be optionally prefixed by an index kind, as in &#34;$text:summary&#34; or
&#34;$2d:-point&#34;. The key string format is:
</p><pre>[$&lt;kind&gt;:][-]&lt;field name&gt;
</pre><p>If the Unique field is true, the index must necessarily contain only a single
document per Key.  With DropDups set to true, documents with the same key
as a previously indexed one will be dropped rather than an error returned.
</p><p>If Background is true, other connections will be allowed to proceed using
the collection without the index while it&#39;s being built. Note that the
session executing EnsureIndex will be blocked for as long as it takes for
the index to be built.
</p><p>If Sparse is true, only documents containing the provided Key fields will be
included in the index.  When using a sparse index for sorting, only indexed
documents will be returned.
</p><p>If ExpireAfter is non-zero, the server will periodically scan the collection
and remove documents containing an indexed time.Time field with a value
older than ExpireAfter. See the documentation for details:
</p><pre><a href="http://docs.mongodb.org/manual/tutorial/expire-data">http://docs.mongodb.org/manual/tutorial/expire-data</a>
</pre><p>Other kinds of indexes are also supported through that API. Here is an example:
</p><pre>index := Index{
    Key: []string{&#34;$2d:loc&#34;},
    Bits: 26,
}
err := collection.EnsureIndex(index)
</pre><p>The example above requests the creation of a &#34;2d&#34; index for the &#34;loc&#34; field.
</p><p>The 2D index bounds may be changed using the Min and Max attributes of the
Index value.  The default bound setting of (-180, 180) is suitable for
latitude/longitude pairs.
</p><p>The Bits parameter sets the precision of the 2D geohash values.  If not
provided, 26 bits are used, which is roughly equivalent to 1 foot of
precision for the default (-180, 180) index bounds.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Indexes">http://www.mongodb.org/display/DOCS/Indexes</a>
<a href="http://www.mongodb.org/display/DOCS/Indexing+Advice+and+FAQ">http://www.mongodb.org/display/DOCS/Indexing+Advice+and+FAQ</a>
<a href="http://www.mongodb.org/display/DOCS/Indexing+as+a+Background+Operation">http://www.mongodb.org/display/DOCS/Indexing+as+a+Background+Operation</a>
<a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a>
<a href="http://www.mongodb.org/display/DOCS/Multikeys">http://www.mongodb.org/display/DOCS/Multikeys</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.EnsureIndexKey" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1191">EnsureIndexKey</a> <a class="Documentation-idLink" href="#Collection.EnsureIndexKey">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) EnsureIndexKey(key ...<a href="/builtin#string">string</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>EnsureIndexKey ensures an index with the given key exists, creating it
if necessary.
</p><p>This example:
</p><pre>err := collection.EnsureIndexKey(&#34;a&#34;, &#34;b&#34;)
</pre><p>Is equivalent to:
</p><pre>err := collection.EnsureIndex(mgo.Index{Key: []string{&#34;a&#34;, &#34;b&#34;}})
</pre><p>See the EnsureIndex method for more details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Find" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2113">Find</a> <a class="Documentation-idLink" href="#Collection.Find">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Find(query interface{}) *<a href="#Query">Query</a></pre>
    </div>
  <p>Find prepares a query using the provided document.  The document may be a
map or a struct value capable of being marshalled with bson.  The map
may be a generic one using interface{} for its key and/or values, such as
bson.M, or it may be a properly typed map.  Providing nil as the document
is equivalent to providing an empty document such as bson.M{}.
</p><p>Further details of the query may be tweaked using the resulting Query value,
and then executed to retrieve results using methods such as One, For,
Iter, or Tail.
</p><p>In case the resulting document includes a field named $err or errmsg, which
are standard ways for MongoDB to return query errors, the returned err will
be set to a *QueryError value including the Err message and the Code.  In
those cases, the result argument is still unmarshalled into with the
received document so that any other custom values may be obtained if
desired.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Querying">http://www.mongodb.org/display/DOCS/Querying</a>
<a href="http://www.mongodb.org/display/DOCS/Advanced+Queries">http://www.mongodb.org/display/DOCS/Advanced+Queries</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.FindId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2165">FindId</a> <a class="Documentation-idLink" href="#Collection.FindId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) FindId(id interface{}) *<a href="#Query">Query</a></pre>
    </div>
  <p>FindId is a convenience helper equivalent to:
</p><pre>query := collection.Find(bson.M{&#34;_id&#34;: id})
</pre><p>See the Find method for more details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Indexes" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1453">Indexes</a> <a class="Documentation-idLink" href="#Collection.Indexes">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Indexes() (indexes []<a href="#Index">Index</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Indexes returns a list of all indexes for the collection.
</p><p>For example, this snippet would drop all available indexes:
</p><pre>indexes, err := collection.Indexes()
if err != nil {
    return err
}
for _, index := range indexes {
    err = collection.DropIndex(index.Key...)
    if err != nil {
        return err
    }
}
</pre><p>See the EnsureIndex method for more details on indexes.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Insert" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2436">Insert</a> <a class="Documentation-idLink" href="#Collection.Insert">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Insert(docs ...interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Insert inserts one or more documents in the respective collection.  In
case the session is in safe mode (see the SetSafe method) and an error
happens while inserting the provided documents, the returned error will
be of type *LastError.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.NewIter" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2270">NewIter</a> <a class="Documentation-idLink" href="#Collection.NewIter">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) NewIter(session *<a href="#Session">Session</a>, firstBatch []<a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/bson">bson</a>.<a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/bson#Raw">Raw</a>, cursorId <a href="/builtin#int64">int64</a>, err <a href="/builtin#error">error</a>) *<a href="#Iter">Iter</a></pre>
    </div>
  <p>NewIter returns a newly created iterator with the provided parameters.
Using this method is not recommended unless the desired functionality
is not yet exposed via a more convenient interface (Find, Pipe, etc).
</p><p>The optional session parameter associates the lifetime of the returned
iterator to an arbitrary session. If nil, the iterator will be bound to
c&#39;s session.
</p><p>Documents in firstBatch will be individually provided by the returned
iterator before documents from cursorId are made available. If cursorId
is zero, only the documents in firstBatch are provided.
</p><p>If err is not nil, the iterator&#39;s Err method will report it after
exhausting documents in firstBatch.
</p><p>NewIter must be called right after the cursor id is obtained, and must not
be called on a collection in Eventual mode, because the cursor id is
associated with the specific server that returned it. The provided session
parameter may be in any mode or state, though.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Pipe" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2203">Pipe</a> <a class="Documentation-idLink" href="#Collection.Pipe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Pipe(pipeline interface{}) *<a href="#Pipe">Pipe</a></pre>
    </div>
  <p>Pipe prepares a pipeline to aggregate. The pipeline document
must be a slice built in terms of the aggregation framework language.
</p><p>For example:
</p><pre>pipe := collection.Pipe([]bson.M{{&#34;$match&#34;: bson.M{&#34;name&#34;: &#34;Otavio&#34;}}})
iter := pipe.Iter()
</pre><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/reference/aggregation">http://docs.mongodb.org/manual/reference/aggregation</a>
<a href="http://docs.mongodb.org/manual/applications/aggregation">http://docs.mongodb.org/manual/applications/aggregation</a>
<a href="http://docs.mongodb.org/manual/tutorial/aggregation-examples">http://docs.mongodb.org/manual/tutorial/aggregation-examples</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Remove" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2582">Remove</a> <a class="Documentation-idLink" href="#Collection.Remove">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Remove(selector interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Remove finds a single document matching the provided selector document
and removes it from the database.
If the session is in safe mode (see SetSafe) a ErrNotFound error is
returned if a document isn&#39;t found, or a value of type *LastError
when some other error is detected.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Removing">http://www.mongodb.org/display/DOCS/Removing</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.RemoveAll" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2611">RemoveAll</a> <a class="Documentation-idLink" href="#Collection.RemoveAll">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) RemoveAll(selector interface{}) (info *<a href="#ChangeInfo">ChangeInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>RemoveAll finds all documents matching the provided selector document
and removes them from the database.  In case the session is in safe mode
(see the SetSafe method) and an error happens when attempting the change,
the returned error will be of type *LastError.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Removing">http://www.mongodb.org/display/DOCS/Removing</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.RemoveId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2598">RemoveId</a> <a class="Documentation-idLink" href="#Collection.RemoveId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) RemoveId(id interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>RemoveId is a convenience helper equivalent to:
</p><pre>err := collection.Remove(bson.M{&#34;_id&#34;: id})
</pre><p>See the Remove method for more details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Repair" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2138">Repair</a> <a class="Documentation-idLink" href="#Collection.Repair">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Repair() *<a href="#Iter">Iter</a></pre>
    </div>
  <p>Repair returns an iterator that goes over all recovered documents in the
collection, in a best-effort manner. This is most useful when there are
damaged data files. Multiple copies of the same document may be returned
by the iterator.
</p><p>Repair is supported in MongoDB 2.7.8 and later.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Update" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2452">Update</a> <a class="Documentation-idLink" href="#Collection.Update">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Update(selector interface{}, update interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Update finds a single document matching the provided selector document
and modifies it according to the update document.
If the session is in safe mode (see SetSafe) a ErrNotFound error is
returned if a document isn&#39;t found, or a value of type *LastError
when some other error is detected.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Updating">http://www.mongodb.org/display/DOCS/Updating</a>
<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.UpdateAll" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2500">UpdateAll</a> <a class="Documentation-idLink" href="#Collection.UpdateAll">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) UpdateAll(selector interface{}, update interface{}) (info *<a href="#ChangeInfo">ChangeInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>UpdateAll finds all documents matching the provided selector document
and modifies them according to the update document.
If the session is in safe mode (see SetSafe) details of the executed
operation are returned in info or an error of type *LastError when
some problem is detected. It is not an error for the update to not be
applied on any documents because the selector doesn&#39;t match.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Updating">http://www.mongodb.org/display/DOCS/Updating</a>
<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.UpdateId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2473">UpdateId</a> <a class="Documentation-idLink" href="#Collection.UpdateId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) UpdateId(id interface{}, update interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>UpdateId is a convenience helper equivalent to:
</p><pre>err := collection.Update(bson.M{&#34;_id&#34;: id}, update)
</pre><p>See the Update method for more details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.Upsert" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2531">Upsert</a> <a class="Documentation-idLink" href="#Collection.Upsert">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) Upsert(selector interface{}, update interface{}) (info *<a href="#ChangeInfo">ChangeInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Upsert finds a single document matching the provided selector document
and modifies it according to the update document.  If no document matching
the selector is found, the update document is applied to the selector
document and the result is inserted in the collection.
If the session is in safe mode (see SetSafe) details of the executed
operation are returned in info, or an error of type *LastError when
some problem is detected.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Updating">http://www.mongodb.org/display/DOCS/Updating</a>
<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.UpsertId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2568">UpsertId</a> <a class="Documentation-idLink" href="#Collection.UpsertId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) UpsertId(id interface{}, update interface{}) (info *<a href="#ChangeInfo">ChangeInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>UpsertId is a convenience helper equivalent to:
</p><pre>info, err := collection.Upsert(bson.M{&#34;_id&#34;: id}, update)
</pre><p>See the Upsert method for more details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Collection.With" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Collection) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L602">With</a> <a class="Documentation-idLink" href="#Collection.With">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (c *<a href="#Collection">Collection</a>) With(s *<a href="#Session">Session</a>) *<a href="#Collection">Collection</a></pre>
    </div>
  <p>With returns a copy of c that uses session s.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="CollectionInfo" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2639">CollectionInfo</a> <a class="Documentation-idLink" href="#CollectionInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type CollectionInfo struct {
<span id="CollectionInfo.DisableIdIndex" data-kind="field">	<span class="comment">// DisableIdIndex prevents the automatic creation of the index</span>
</span>	<span class="comment">// on the _id field for the collection.</span>
	DisableIdIndex <a href="/builtin#bool">bool</a>

<span id="CollectionInfo.ForceIdIndex" data-kind="field">	<span class="comment">// ForceIdIndex enforces the automatic creation of the index</span>
</span>	<span class="comment">// on the _id field for the collection. Capped collections,</span>
	<span class="comment">// for example, do not have such an index by default.</span>
	ForceIdIndex <a href="/builtin#bool">bool</a>

	<span class="comment">// If Capped is true new documents will replace old ones when</span>
	<span class="comment">// the collection is full. MaxBytes must necessarily be set</span>
	<span class="comment">// to define the size when the collection wraps around.</span>
	<span class="comment">// MaxDocs optionally defines the number of documents when it</span>
	<span class="comment">// wraps, but MaxBytes still needs to be set.</span>
<span id="CollectionInfo.Capped" data-kind="field">	Capped   <a href="/builtin#bool">bool</a>
</span><span id="CollectionInfo.MaxBytes" data-kind="field">	MaxBytes <a href="/builtin#int">int</a>
</span><span id="CollectionInfo.MaxDocs" data-kind="field">	MaxDocs  <a href="/builtin#int">int</a>
</span>
<span id="CollectionInfo.Validator" data-kind="field">	<span class="comment">// Validator contains a validation expression that defines which</span>
</span>	<span class="comment">// documents should be considered valid for this collection.</span>
	Validator interface{}

<span id="CollectionInfo.ValidationLevel" data-kind="field">	<span class="comment">// ValidationLevel may be set to &#34;strict&#34; (the default) to force</span>
</span>	<span class="comment">// MongoDB to validate all documents on inserts and updates, to</span>
	<span class="comment">// &#34;moderate&#34; to apply the validation rules only to documents</span>
	<span class="comment">// that already fulfill the validation criteria, or to &#34;off&#34; for</span>
	<span class="comment">// disabling validation entirely.</span>
	ValidationLevel <a href="/builtin#string">string</a>

<span id="CollectionInfo.ValidationAction" data-kind="field">	<span class="comment">// ValidationAction determines how MongoDB handles documents that</span>
</span>	<span class="comment">// violate the validation rules. It may be set to &#34;error&#34; (the default)</span>
	<span class="comment">// to reject inserts or updates that violate the rules, or to &#34;warn&#34;</span>
	<span class="comment">// to log invalid operations but allow them to proceed.</span>
	ValidationAction <a href="/builtin#string">string</a>

<span id="CollectionInfo.StorageEngine" data-kind="field">	<span class="comment">// StorageEngine allows specifying collection options for the</span>
</span>	<span class="comment">// storage engine in use. The map keys must hold the storage engine</span>
	<span class="comment">// name for which options are being specified.</span>
	StorageEngine interface{}
}</pre>
    </div>
  <p>The CollectionInfo type holds metadata about a collection.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/createCollection+Command">http://www.mongodb.org/display/DOCS/createCollection+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Capped+Collections">http://www.mongodb.org/display/DOCS/Capped+Collections</a>
</pre>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Credential" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L660">Credential</a> <a class="Documentation-idLink" href="#Credential">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Credential struct {
	<span class="comment">// Username and Password hold the basic details for authentication.</span>
	<span class="comment">// Password is optional with some authentication mechanisms.</span>
<span id="Credential.Username" data-kind="field">	Username <a href="/builtin#string">string</a>
</span><span id="Credential.Password" data-kind="field">	Password <a href="/builtin#string">string</a>
</span>
<span id="Credential.Source" data-kind="field">	<span class="comment">// Source is the database used to establish credentials and privileges</span>
</span>	<span class="comment">// with a MongoDB server. Defaults to the default database provided</span>
	<span class="comment">// during dial, or &#34;admin&#34; if that was unset.</span>
	Source <a href="/builtin#string">string</a>

<span id="Credential.Service" data-kind="field">	<span class="comment">// Service defines the service name to use when authenticating with the GSSAPI</span>
</span>	<span class="comment">// mechanism. Defaults to &#34;mongodb&#34;.</span>
	Service <a href="/builtin#string">string</a>

<span id="Credential.ServiceHost" data-kind="field">	<span class="comment">// ServiceHost defines which hostname to use when authenticating</span>
</span>	<span class="comment">// with the GSSAPI mechanism. If not specified, defaults to the MongoDB</span>
	<span class="comment">// server&#39;s address.</span>
	ServiceHost <a href="/builtin#string">string</a>

<span id="Credential.Mechanism" data-kind="field">	<span class="comment">// Mechanism defines the protocol for credential negotiation.</span>
</span>	<span class="comment">// Defaults to &#34;MONGODB-CR&#34;.</span>
	Mechanism <a href="/builtin#string">string</a>
}</pre>
    </div>
  <p>Credential holds details to authenticate with a MongoDB server.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="DBRef" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3295">DBRef</a> <a class="Documentation-idLink" href="#DBRef">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type DBRef struct {
<span id="DBRef.Collection" data-kind="field">	Collection <a href="/builtin#string">string</a>      `bson:&#34;$ref&#34;`
</span><span id="DBRef.Id" data-kind="field">	Id         interface{} `bson:&#34;$id&#34;`
</span><span id="DBRef.Database" data-kind="field">	Database   <a href="/builtin#string">string</a>      `bson:&#34;$db,omitempty&#34;`
</span>}</pre>
    </div>
  <p>The DBRef type implements support for the database reference MongoDB
convention as supported by multiple drivers.  This convention enables
cross-referencing documents between collections and databases using
a structure which includes a collection name, a document id, and
optionally a database name.
</p><p>See the FindRef methods on Session and on Database.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Database+References">http://www.mongodb.org/display/DOCS/Database+References</a>
</pre>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Database" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L96">Database</a> <a class="Documentation-idLink" href="#Database">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Database struct {
<span id="Database.Session" data-kind="field">	Session *<a href="#Session">Session</a>
</span><span id="Database.Name" data-kind="field">	Name    <a href="/builtin#string">string</a>
</span>}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.AddUser" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L953">AddUser</a> <a class="Documentation-idLink" href="#Database.AddUser">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) AddUser(username, password <a href="/builtin#string">string</a>, readOnly <a href="/builtin#bool">bool</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>AddUser creates or updates the authentication credentials of user within
the db database.
</p><p>WARNING: This method is obsolete and should only be used with MongoDB 2.2
or earlier. For MongoDB 2.4 and on, use UpsertUser instead.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.C" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L590">C</a> <a class="Documentation-idLink" href="#Database.C">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) C(name <a href="/builtin#string">string</a>) *<a href="#Collection">Collection</a></pre>
    </div>
  <p>C returns a value representing the named collection.
</p><p>Creating this value is a very lightweight operation, and
involves no network communication.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.CollectionNames" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3342">CollectionNames</a> <a class="Documentation-idLink" href="#Database.CollectionNames">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) CollectionNames() (names []<a href="/builtin#string">string</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>CollectionNames returns the collection names present in the db database.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.DropDatabase" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2623">DropDatabase</a> <a class="Documentation-idLink" href="#Database.DropDatabase">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) DropDatabase() <a href="/builtin#error">error</a></pre>
    </div>
  <p>DropDatabase removes the entire database including all of its collections.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.FindRef" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3313">FindRef</a> <a class="Documentation-idLink" href="#Database.FindRef">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) FindRef(ref *<a href="#DBRef">DBRef</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>FindRef returns a query that looks for the document in the provided
reference. If the reference includes the DB field, the document will
be retrieved from the respective database.
</p><p>See also the DBRef type and the FindRef method on Session.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Database+References">http://www.mongodb.org/display/DOCS/Database+References</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.GridFS" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L624">GridFS</a> <a class="Documentation-idLink" href="#Database.GridFS">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) GridFS(prefix <a href="/builtin#string">string</a>) *<a href="#GridFS">GridFS</a></pre>
    </div>
  <p>GridFS returns a GridFS value representing collections in db that
follow the standard GridFS specification.
The provided prefix (sometimes known as root) will determine which
collections to use, and is usually set to &#34;fs&#34; when there is a
single GridFS in the database.
</p><p>See the GridFS Create, Open, and OpenId methods for more details.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/GridFS">http://www.mongodb.org/display/DOCS/GridFS</a>
<a href="http://www.mongodb.org/display/DOCS/GridFS+Tools">http://www.mongodb.org/display/DOCS/GridFS+Tools</a>
<a href="http://www.mongodb.org/display/DOCS/GridFS+Specification">http://www.mongodb.org/display/DOCS/GridFS+Specification</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.Login" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L689">Login</a> <a class="Documentation-idLink" href="#Database.Login">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) Login(user, pass <a href="/builtin#string">string</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Login authenticates with MongoDB using the provided credential.  The
authentication is valid for the whole session and will stay valid until
Logout is explicitly called for the same database, or the session is
closed.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.Logout" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L733">Logout</a> <a class="Documentation-idLink" href="#Database.Logout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) Logout()</pre>
    </div>
  <p>Logout removes any established authentication credentials for the database.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.RemoveUser" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L987">RemoveUser</a> <a class="Documentation-idLink" href="#Database.RemoveUser">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) RemoveUser(user <a href="/builtin#string">string</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>RemoveUser removes the authentication credentials of user from the database.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.Run" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L648">Run</a> <a class="Documentation-idLink" href="#Database.Run">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) Run(cmd interface{}, result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Run issues the provided command on the db database and unmarshals
its result in the respective argument. The cmd argument may be either
a string with the command name itself, in which case an empty document of
the form bson.M{cmd: 1} will be used, or it may be a full command document.
</p><p>Note that MongoDB considers the first marshalled key as the command
name, so when providing a command with options, it&#39;s important to
use an ordering-preserving document, such as a struct value or an
instance of bson.D.  For instance:
</p><pre>db.Run(bson.D{{&#34;create&#34;, &#34;mycollection&#34;}, {&#34;size&#34;, 1024}})
</pre><p>For privilleged commands typically run on the &#34;admin&#34; database, see
the Run method in the Session type.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Commands">http://www.mongodb.org/display/DOCS/Commands</a>
<a href="http://www.mongodb.org/display/DOCS/List+of+Database+CommandSkips">http://www.mongodb.org/display/DOCS/List+of+Database+CommandSkips</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.UpsertUser" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L845">UpsertUser</a> <a class="Documentation-idLink" href="#Database.UpsertUser">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) UpsertUser(user *<a href="#User">User</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>UpsertUser updates the authentication credentials and the roles for
a MongoDB user within the db database. If the named user doesn&#39;t exist
it will be created.
</p><p>This method should only be used from MongoDB 2.4 and on. For older
MongoDB releases, use the obsolete AddUser method instead.
</p><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/reference/user-privileges/">http://docs.mongodb.org/manual/reference/user-privileges/</a>
<a href="http://docs.mongodb.org/manual/reference/privilege-documents/">http://docs.mongodb.org/manual/reference/privilege-documents/</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Database.With" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Database) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L595">With</a> <a class="Documentation-idLink" href="#Database.With">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (db *<a href="#Database">Database</a>) With(s *<a href="#Session">Session</a>) *<a href="#Database">Database</a></pre>
    </div>
  <p>With returns a copy of db that uses session s.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="DialInfo" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L327">DialInfo</a> <a class="Documentation-idLink" href="#DialInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type DialInfo struct {
<span id="DialInfo.Addrs" data-kind="field">	<span class="comment">// Addrs holds the addresses for the seed servers.</span>
</span>	Addrs []<a href="/builtin#string">string</a>

<span id="DialInfo.Direct" data-kind="field">	<span class="comment">// Direct informs whether to establish connections only with the</span>
</span>	<span class="comment">// specified seed servers, or to obtain information for the whole</span>
	<span class="comment">// cluster and establish connections with further servers too.</span>
	Direct <a href="/builtin#bool">bool</a>

<span id="DialInfo.Timeout" data-kind="field">	<span class="comment">// Timeout is the amount of time to wait for a server to respond when</span>
</span>	<span class="comment">// first connecting and on follow up operations in the session. If</span>
	<span class="comment">// timeout is zero, the call may block forever waiting for a connection</span>
	<span class="comment">// to be established. Timeout does not affect logic in DialServer.</span>
	Timeout <a href="/time">time</a>.<a href="/time#Duration">Duration</a>

<span id="DialInfo.FailFast" data-kind="field">	<span class="comment">// FailFast will cause connection and query attempts to fail faster when</span>
</span>	<span class="comment">// the server is unavailable, instead of retrying until the configured</span>
	<span class="comment">// timeout period. Note that an unavailable server may silently drop</span>
	<span class="comment">// packets instead of rejecting them, in which case it&#39;s impossible to</span>
	<span class="comment">// distinguish it from a slow server, so the timeout stays relevant.</span>
	FailFast <a href="/builtin#bool">bool</a>

<span id="DialInfo.Database" data-kind="field">	<span class="comment">// Database is the default database name used when the Session.DB method</span>
</span>	<span class="comment">// is called with an empty name, and is also used during the initial</span>
	<span class="comment">// authentication if Source is unset.</span>
	Database <a href="/builtin#string">string</a>

<span id="DialInfo.ReplicaSetName" data-kind="field">	<span class="comment">// ReplicaSetName, if specified, will prevent the obtained session from</span>
</span>	<span class="comment">// communicating with any server which is not part of a replica set</span>
	<span class="comment">// with the given name. The default is to communicate with any server</span>
	<span class="comment">// specified or discovered via the servers contacted.</span>
	ReplicaSetName <a href="/builtin#string">string</a>

<span id="DialInfo.Source" data-kind="field">	<span class="comment">// Source is the database used to establish credentials and privileges</span>
</span>	<span class="comment">// with a MongoDB server. Defaults to the value of Database, if that is</span>
	<span class="comment">// set, or &#34;admin&#34; otherwise.</span>
	Source <a href="/builtin#string">string</a>

<span id="DialInfo.Service" data-kind="field">	<span class="comment">// Service defines the service name to use when authenticating with the GSSAPI</span>
</span>	<span class="comment">// mechanism. Defaults to &#34;mongodb&#34;.</span>
	Service <a href="/builtin#string">string</a>

<span id="DialInfo.ServiceHost" data-kind="field">	<span class="comment">// ServiceHost defines which hostname to use when authenticating</span>
</span>	<span class="comment">// with the GSSAPI mechanism. If not specified, defaults to the MongoDB</span>
	<span class="comment">// server&#39;s address.</span>
	ServiceHost <a href="/builtin#string">string</a>

<span id="DialInfo.Mechanism" data-kind="field">	<span class="comment">// Mechanism defines the protocol for credential negotiation.</span>
</span>	<span class="comment">// Defaults to &#34;MONGODB-CR&#34;.</span>
	Mechanism <a href="/builtin#string">string</a>

	<span class="comment">// Username and Password inform the credentials for the initial authentication</span>
	<span class="comment">// done on the database defined by the Source field. See Session.Login.</span>
<span id="DialInfo.Username" data-kind="field">	Username <a href="/builtin#string">string</a>
</span><span id="DialInfo.Password" data-kind="field">	Password <a href="/builtin#string">string</a>
</span>
<span id="DialInfo.PoolLimit" data-kind="field">	<span class="comment">// PoolLimit defines the per-server socket pool limit. Defaults to 4096.</span>
</span>	<span class="comment">// See Session.SetPoolLimit for details.</span>
	PoolLimit <a href="/builtin#int">int</a>

<span id="DialInfo.DialServer" data-kind="field">	<span class="comment">// DialServer optionally specifies the dial function for establishing</span>
</span>	<span class="comment">// connections with the MongoDB servers.</span>
	DialServer func(addr *<a href="#ServerAddr">ServerAddr</a>) (<a href="/net">net</a>.<a href="/net#Conn">Conn</a>, <a href="/builtin#error">error</a>)

<span id="DialInfo.Dial" data-kind="field">	<span class="comment">// WARNING: This field is obsolete. See DialServer above.</span>
</span>	Dial func(addr <a href="/net">net</a>.<a href="/net#Addr">Addr</a>) (<a href="/net">net</a>.<a href="/net#Conn">Conn</a>, <a href="/builtin#error">error</a>)
}</pre>
    </div>
  <p>DialInfo holds options for establishing a session with a MongoDB cluster.
To use a URL, see the Dial function.
</p>
<div class="Documentation-typeFunc">
    
  
  
    <h4 tabindex="-1" id="ParseURL" data-kind="function" class="Documentation-typeFuncHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L271">ParseURL</a> <a class="Documentation-idLink" href="#ParseURL">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func ParseURL(url <a href="/builtin#string">string</a>) (*<a href="#DialInfo">DialInfo</a>, <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>ParseURL parses a MongoDB URL as accepted by the Dial function and returns
a value suitable for providing into DialWithInfo.
</p><p>See Dial for more details on the format of url.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="GridFS" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L42">GridFS</a> <a class="Documentation-idLink" href="#GridFS">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type GridFS struct {
<span id="GridFS.Files" data-kind="field">	Files  *<a href="#Collection">Collection</a>
</span><span id="GridFS.Chunks" data-kind="field">	Chunks *<a href="#Collection">Collection</a>
</span>}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.Create" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L153">Create</a> <a class="Documentation-idLink" href="#GridFS.Create">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) Create(name <a href="/builtin#string">string</a>) (file *<a href="#GridFile">GridFile</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Create creates a new file with the provided name in the GridFS.  If the file
name already exists, a new version will be inserted with an up-to-date
uploadDate that will cause it to be atomically visible to the Open and
OpenId methods.  If the file name is not important, an empty name may be
provided and the file Id used instead.
</p><p>It&#39;s important to Close files whether they are being written to
or read from, and to check the err result to ensure the operation
completed successfully.
</p><p>A simple example inserting a new file:
</p><pre>func check(err error) {
    if err != nil {
        panic(err.String())
    }
}
file, err := db.GridFS(&#34;fs&#34;).Create(&#34;myfile.txt&#34;)
check(err)
n, err := file.Write([]byte(&#34;Hello world!&#34;))
check(err)
err = file.Close()
check(err)
fmt.Printf(&#34;%d bytes written\n&#34;, n)
</pre><p>The io.Writer interface is implemented by *GridFile and may be used to
help on the file creation.  For example:
</p><pre>file, err := db.GridFS(&#34;fs&#34;).Create(&#34;myfile.txt&#34;)
check(err)
messages, err := os.Open(&#34;/var/log/messages&#34;)
check(err)
defer messages.Close()
err = io.Copy(file, messages)
check(err)
err = file.Close()
check(err)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.Find" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L312">Find</a> <a class="Documentation-idLink" href="#GridFS.Find">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) Find(query interface{}) *<a href="#Query">Query</a></pre>
    </div>
  <p>Find runs query on GridFS&#39;s files collection and returns
the resulting Query.
</p><p>This logic:
</p><pre>gfs := db.GridFS(&#34;fs&#34;)
iter := gfs.Find(nil).Iter()
</pre><p>Is equivalent to:
</p><pre>files := db.C(&#34;fs&#34; + &#34;.files&#34;)
iter := files.Find(nil).Iter()
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.Open" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L241">Open</a> <a class="Documentation-idLink" href="#GridFS.Open">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) Open(name <a href="/builtin#string">string</a>) (file *<a href="#GridFile">GridFile</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Open returns the most recently uploaded file with the provided
name, for reading. If the file isn&#39;t found, err will be set
to mgo.ErrNotFound.
</p><p>It&#39;s important to Close files whether they are being written to
or read from, and to check the err result to ensure the operation
completed successfully.
</p><p>The following example will print the first 8192 bytes from the file:
</p><pre>file, err := db.GridFS(&#34;fs&#34;).Open(&#34;myfile.txt&#34;)
check(err)
b := make([]byte, 8192)
n, err := file.Read(b)
check(err)
fmt.Println(string(b))
check(err)
err = file.Close()
check(err)
fmt.Printf(&#34;%d bytes read\n&#34;, n)
</pre><p>The io.Reader interface is implemented by *GridFile and may be used to
deal with it.  As an example, the following snippet will dump the whole
file into the standard output:
</p><pre>file, err := db.GridFS(&#34;fs&#34;).Open(&#34;myfile.txt&#34;)
check(err)
err = io.Copy(os.Stdout, file)
check(err)
err = file.Close()
check(err)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.OpenId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L197">OpenId</a> <a class="Documentation-idLink" href="#GridFS.OpenId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) OpenId(id interface{}) (file *<a href="#GridFile">GridFile</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>OpenId returns the file with the provided id, for reading.
If the file isn&#39;t found, err will be set to mgo.ErrNotFound.
</p><p>It&#39;s important to Close files whether they are being written to
or read from, and to check the err result to ensure the operation
completed successfully.
</p><p>The following example will print the first 8192 bytes from the file:
</p><pre>func check(err error) {
    if err != nil {
        panic(err.String())
    }
}
file, err := db.GridFS(&#34;fs&#34;).OpenId(objid)
check(err)
b := make([]byte, 8192)
n, err := file.Read(b)
check(err)
fmt.Println(string(b))
check(err)
err = file.Close()
check(err)
fmt.Printf(&#34;%d bytes read\n&#34;, n)
</pre><p>The io.Reader interface is implemented by *GridFile and may be used to
deal with it.  As an example, the following snippet will dump the whole
file into the standard output:
</p><pre>file, err := db.GridFS(&#34;fs&#34;).OpenId(objid)
check(err)
err = io.Copy(os.Stdout, file)
check(err)
err = file.Close()
check(err)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.OpenNext" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L280">OpenNext</a> <a class="Documentation-idLink" href="#GridFS.OpenNext">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) OpenNext(iter *<a href="#Iter">Iter</a>, file **<a href="#GridFile">GridFile</a>) <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>OpenNext opens the next file from iter for reading, sets *file to it,
and returns true on the success case. If no more documents are available
on iter or an error occurred, *file is set to nil and the result is false.
Errors will be available via iter.Err().
</p><p>The iter parameter must be an iterator on the GridFS files collection.
Using the GridFS.Find method is an easy way to obtain such an iterator,
but any iterator on the collection will work.
</p><p>If the provided *file is non-nil, OpenNext will close it before attempting
to iterate to the next element. This means that in a loop one only
has to worry about closing files when breaking out of the loop early
(break, return, or panic).
</p><p>For example:
</p><pre>gfs := db.GridFS(&#34;fs&#34;)
query := gfs.Find(nil).Sort(&#34;filename&#34;)
iter := query.Iter()
var f *mgo.GridFile
for gfs.OpenNext(iter, &amp;f) {
    fmt.Printf(&#34;Filename: %s\n&#34;, f.Name())
}
if iter.Close() != nil {
    panic(iter.Close())
}
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.Remove" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L331">Remove</a> <a class="Documentation-idLink" href="#GridFS.Remove">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) Remove(name <a href="/builtin#string">string</a>) (err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Remove deletes all files with the provided name from the GridFS.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFS.RemoveId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFS) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L317">RemoveId</a> <a class="Documentation-idLink" href="#GridFS.RemoveId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (gfs *<a href="#GridFS">GridFS</a>) RemoveId(id interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>RemoveId deletes the file with the provided id from the GridFS.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="GridFile" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L55">GridFile</a> <a class="Documentation-idLink" href="#GridFile">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type GridFile struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Abort" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L550">Abort</a> <a class="Documentation-idLink" href="#GridFile.Abort">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Abort()</pre>
    </div>
  <p>Abort cancels an in-progress write, preventing the file from being
automically created and ensuring previously written chunks are
removed when the file is closed.
</p><p>It is a runtime error to call Abort when the file was not opened
for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Close" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L501">Close</a> <a class="Documentation-idLink" href="#GridFile.Close">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Close() (err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Close flushes any pending changes in case the file is being written
to, waits for any background operations to finish, and closes the file.
</p><p>It&#39;s important to Close files whether they are being written to
or read from, and to check the err result to ensure the operation
completed successfully.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.ContentType" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L410">ContentType</a> <a class="Documentation-idLink" href="#GridFile.ContentType">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) ContentType() <a href="/builtin#string">string</a></pre>
    </div>
  <p>ContentType returns the optional file content type.  An empty string will be
returned in case it is unset.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.GetMeta" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L437">GetMeta</a> <a class="Documentation-idLink" href="#GridFile.GetMeta">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) GetMeta(result interface{}) (err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>GetMeta unmarshals the optional &#34;metadata&#34; field associated with the
file into the result parameter. The meaning of keys under that field
is user-defined. For example:
</p><pre>result := struct{ INode int }{}
err = file.GetMeta(&amp;result)
if err != nil {
    panic(err.String())
}
fmt.Printf(&#34;inode: %d\n&#34;, result.INode)
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Id" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L375">Id</a> <a class="Documentation-idLink" href="#GridFile.Id">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Id() interface{}</pre>
    </div>
  <p>Id returns the current file Id.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.MD5" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L475">MD5</a> <a class="Documentation-idLink" href="#GridFile.MD5">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) MD5() (md5 <a href="/builtin#string">string</a>)</pre>
    </div>
  <p>MD5 returns the file MD5 as a hex-encoded string.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Name" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L392">Name</a> <a class="Documentation-idLink" href="#GridFile.Name">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Name() <a href="/builtin#string">string</a></pre>
    </div>
  <p>Name returns the optional file name.  An empty string will be returned
in case it is unset.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Read" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L705">Read</a> <a class="Documentation-idLink" href="#GridFile.Read">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Read(b []<a href="/builtin#byte">byte</a>) (n <a href="/builtin#int">int</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Read reads into b the next available data from the file and
returns the number of bytes written and an error in case
something wrong happened.  At the end of the file, n will
be zero and err will be set to io.EOF.
</p><p>The parameters and behavior of this function turn the file
into an io.Reader.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Seek" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L658">Seek</a> <a class="Documentation-idLink" href="#GridFile.Seek">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Seek(offset <a href="/builtin#int64">int64</a>, whence <a href="/builtin#int">int</a>) (pos <a href="/builtin#int64">int64</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Seek sets the offset for the next Read or Write on file to
offset, interpreted according to whence: 0 means relative to
the origin of the file, 1 means relative to the current offset,
and 2 means relative to the end. It returns the new offset and
an error, if any.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetChunkSize" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L366">SetChunkSize</a> <a class="Documentation-idLink" href="#GridFile.SetChunkSize">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetChunkSize(bytes <a href="/builtin#int">int</a>)</pre>
    </div>
  <p>SetChunkSize sets size of saved chunks.  Once the file is written to, it
will be split in blocks of that size and each block saved into an
independent chunk document.  The default chunk size is 255kb.
</p><p>It is a runtime error to call this function once the file has started
being written to.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetContentType" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L419">SetContentType</a> <a class="Documentation-idLink" href="#GridFile.SetContentType">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetContentType(ctype <a href="/builtin#string">string</a>)</pre>
    </div>
  <p>ContentType changes the optional file content type.  An empty string may be
used to unset it.
</p><p>It is a runtime error to call this function when the file is not open
for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetId" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L383">SetId</a> <a class="Documentation-idLink" href="#GridFile.SetId">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetId(id interface{})</pre>
    </div>
  <p>SetId changes the current file Id.
</p><p>It is a runtime error to call this function once the file has started
being written to, or when the file is not open for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetMeta" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L454">SetMeta</a> <a class="Documentation-idLink" href="#GridFile.SetMeta">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetMeta(metadata interface{})</pre>
    </div>
  <p>SetMeta changes the optional &#34;metadata&#34; field associated with the
file. The meaning of keys under that field is user-defined.
For example:
</p><pre>file.SetMeta(bson.M{&#34;inode&#34;: inode})
</pre><p>It is a runtime error to call this function when the file is not open
for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetName" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L401">SetName</a> <a class="Documentation-idLink" href="#GridFile.SetName">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetName(name <a href="/builtin#string">string</a>)</pre>
    </div>
  <p>SetName changes the optional file name.  An empty string may be used to
unset it.
</p><p>It is a runtime error to call this function when the file is not open
for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.SetUploadDate" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L488">SetUploadDate</a> <a class="Documentation-idLink" href="#GridFile.SetUploadDate">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) SetUploadDate(t <a href="/time">time</a>.<a href="/time#Time">Time</a>)</pre>
    </div>
  <p>SetUploadDate changes the file upload time.
</p><p>It is a runtime error to call this function when the file is not open
for writing.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Size" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L467">Size</a> <a class="Documentation-idLink" href="#GridFile.Size">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Size() (bytes <a href="/builtin#int64">int64</a>)</pre>
    </div>
  <p>Size returns the file size in bytes.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.UploadDate" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L480">UploadDate</a> <a class="Documentation-idLink" href="#GridFile.UploadDate">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) UploadDate() <a href="/time">time</a>.<a href="/time#Time">Time</a></pre>
    </div>
  <p>UploadDate returns the file upload time.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="GridFile.Write" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*GridFile) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go#L568">Write</a> <a class="Documentation-idLink" href="#GridFile.Write">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (file *<a href="#GridFile">GridFile</a>) Write(data []<a href="/builtin#byte">byte</a>) (n <a href="/builtin#int">int</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Write writes the provided data to the file and returns the
number of bytes written and an error in case something
wrong happened.
</p><p>The file will internally cache the data so that all but the last
chunk sent to the database have the size defined by SetChunkSize.
This also means that errors may be deferred until a future call
to Write or Close.
</p><p>The parameters and behavior of this function turn the file
into an io.Writer.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Index" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1018">Index</a> <a class="Documentation-idLink" href="#Index">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Index struct {
<span id="Index.Key" data-kind="field">	Key        []<a href="/builtin#string">string</a> <span class="comment">// Index key fields; prefix name with dash (-) for descending order</span>
</span><span id="Index.Unique" data-kind="field">	Unique     <a href="/builtin#bool">bool</a>     <span class="comment">// Prevent two documents from having the same index key</span>
</span><span id="Index.DropDups" data-kind="field">	DropDups   <a href="/builtin#bool">bool</a>     <span class="comment">// Drop documents with the same index key as a previously indexed one</span>
</span><span id="Index.Background" data-kind="field">	Background <a href="/builtin#bool">bool</a>     <span class="comment">// Build index in background and return immediately</span>
</span><span id="Index.Sparse" data-kind="field">	Sparse     <a href="/builtin#bool">bool</a>     <span class="comment">// Only index documents containing the Key fields</span>
</span>
<span id="Index.ExpireAfter" data-kind="field">	<span class="comment">// If ExpireAfter is defined the server will periodically delete</span>
</span>	<span class="comment">// documents with indexed time.Time older than the provided delta.</span>
	ExpireAfter <a href="/time">time</a>.<a href="/time#Duration">Duration</a>

<span id="Index.Name" data-kind="field">	<span class="comment">// Name holds the stored index name. On creation if this field is unset it is</span>
</span>	<span class="comment">// computed by EnsureIndex based on the index key.</span>
	Name <a href="/builtin#string">string</a>

	<span class="comment">// Properties for spatial indexes.</span>
	<span class="comment">//</span>
	<span class="comment">// Min and Max were improperly typed as int when they should have been</span>
	<span class="comment">// floats.  To preserve backwards compatibility they are still typed as</span>
	<span class="comment">// int and the following two fields enable reading and writing the same</span>
	<span class="comment">// fields as float numbers. In mgo.v3, these fields will be dropped and</span>
	<span class="comment">// Min/Max will become floats.</span>
<span id="Index.Min" data-kind="field"><span id="Index.Max" data-kind="field">	Min, Max   <a href="/builtin#int">int</a>
</span><span id="Index.Minf" data-kind="field"><span id="Index.Maxf" data-kind="field">	Minf, Maxf <a href="/builtin#float64">float64</a>
</span><span id="Index.BucketSize" data-kind="field">	BucketSize <a href="/builtin#float64">float64</a>
</span><span id="Index.Bits" data-kind="field">	Bits       <a href="/builtin#int">int</a>
</span>
	<span class="comment">// Properties for text indexes.</span>
<span id="Index.DefaultLanguage" data-kind="field">	DefaultLanguage  <a href="/builtin#string">string</a>
</span><span id="Index.LanguageOverride" data-kind="field">	LanguageOverride <a href="/builtin#string">string</a>
</span>
<span id="Index.Weights" data-kind="field">	<span class="comment">// Weights defines the significance of provided fields relative to other</span>
</span>	<span class="comment">// fields in a text index. The score for a given word in a document is derived</span>
	<span class="comment">// from the weighted sum of the frequency for each of the indexed fields in</span>
	<span class="comment">// that document. The default field weight is 1.</span>
	Weights map[<a href="/builtin#string">string</a>]<a href="/builtin#int">int</a>

<span id="Index.Collation" data-kind="field">	<span class="comment">// Collation defines the collation to use for the index.</span>
</span>	Collation *<a href="#Collation">Collation</a>
}</pre>
    </div>
  

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Iter" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L127">Iter</a> <a class="Documentation-idLink" href="#Iter">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Iter struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.All" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3788">All</a> <a class="Documentation-idLink" href="#Iter.All">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) All(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>All retrieves all documents from the result set into the provided slice
and closes the iterator.
</p><p>The result argument must necessarily be the address for a slice. The slice
may be nil or previously allocated.
</p><p>WARNING: Obviously, All must not be used with result sets that may be
potentially large, since it may consume all memory until the system
crashes. Consider building the query with a Limit clause to ensure the
result size is bounded.
</p><p>For instance:
</p><pre>var result []struct{ Value int }
iter := collection.Find(nil).Limit(100).Iter()
err := iter.All(&amp;result)
if err != nil {
    return err
}
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.Close" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3595">Close</a> <a class="Documentation-idLink" href="#Iter.Close">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) Close() <a href="/builtin#error">error</a></pre>
    </div>
  <p>Close kills the server cursor used by the iterator, if any, and returns
nil if no errors happened during iteration, or the actual error otherwise.
</p><p>Server cursors are automatically closed at the end of an iteration, which
means close will do nothing unless the iteration was interrupted before
the server finished sending results to the driver. If Close is not called
in such a situation, the cursor will remain available at the server until
the default cursor timeout period is reached. No further problems arise.
</p><p>Close is idempotent. That means it can be called repeatedly and will
return the same result every time.
</p><p>In case a resulting document included a field named $err or errmsg, which are
standard ways for MongoDB to report an improper query, the returned value has
a *QueryError type.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.Done" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3633">Done</a> <a class="Documentation-idLink" href="#Iter.Done">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) Done() <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>Done returns true only if a follow up Next call is guaranteed
to return false.
</p><p>For an iterator created with Tail, Done may return false for
an iterator that has no more data. Otherwise it&#39;s guaranteed
to return false only if there is data or an error happened.
</p><p>Done may block waiting for a pending query to verify whether
more data is actually available or not.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.Err" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3570">Err</a> <a class="Documentation-idLink" href="#Iter.Err">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) Err() <a href="/builtin#error">error</a></pre>
    </div>
  <p>Err returns nil if no errors happened during iteration, or the actual
error otherwise.
</p><p>In case a resulting document included a field named $err or errmsg, which are
standard ways for MongoDB to report an improper query, the returned value has
a *QueryError type, and includes the Err message and the Code.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.For" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3829">For</a> <a class="Documentation-idLink" href="#Iter.For">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) For(result interface{}, f func() <a href="/builtin#error">error</a>) (err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>The For method is obsolete and will be removed in a future release.
See Iter as an elegant replacement.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.Next" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3683">Next</a> <a class="Documentation-idLink" href="#Iter.Next">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) Next(result interface{}) <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>Next retrieves the next document from the result set, blocking if necessary.
This method will also automatically retrieve another batch of documents from
the server when the current one is exhausted, or before that in background
if pre-fetching is enabled (see the Query.Prefetch and Session.SetPrefetch
methods).
</p><p>Next returns true if a document was successfully unmarshalled onto result,
and false at the end of the result set or if an error happened.
When Next returns false, the Err method should be called to verify if
there was an error during iteration.
</p><p>For example:
</p><pre>iter := collection.Find(nil).Iter()
for iter.Next(&amp;result) {
    fmt.Printf(&#34;Result: %v\n&#34;, result.Id)
}
if err := iter.Close(); err != nil {
    return err
}
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Iter.Timeout" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Iter) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3655">Timeout</a> <a class="Documentation-idLink" href="#Iter.Timeout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (iter *<a href="#Iter">Iter</a>) Timeout() <a href="/builtin#bool">bool</a></pre>
    </div>
  <p>Timeout returns true if Next returned false due to a timeout of
a tailable cursor. In those cases, Next may be called again to continue
the iteration at the previous cursor position.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="LastError" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2376">LastError</a> <a class="Documentation-idLink" href="#LastError">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type LastError struct {
<span id="LastError.Err" data-kind="field">	Err             <a href="/builtin#string">string</a>
</span><span id="LastError.Code" data-kind="field"><span id="LastError.N" data-kind="field"><span id="LastError.Waited" data-kind="field">	Code, N, Waited <a href="/builtin#int">int</a>
</span><span id="LastError.FSyncFiles" data-kind="field">	FSyncFiles      <a href="/builtin#int">int</a> `bson:&#34;fsyncFiles&#34;`
</span><span id="LastError.WTimeout" data-kind="field">	WTimeout        <a href="/builtin#bool">bool</a>
</span><span id="LastError.UpdatedExisting" data-kind="field">	UpdatedExisting <a href="/builtin#bool">bool</a>        `bson:&#34;updatedExisting&#34;`
</span><span id="LastError.UpsertedId" data-kind="field">	UpsertedId      interface{} `bson:&#34;upserted&#34;`
</span>	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="LastError.Error" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*LastError) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2388">Error</a> <a class="Documentation-idLink" href="#LastError.Error">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (err *<a href="#LastError">LastError</a>) Error() <a href="/builtin#string">string</a></pre>
    </div>
  

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="MapReduce" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4041">MapReduce</a> <a class="Documentation-idLink" href="#MapReduce">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type MapReduce struct {
<span id="MapReduce.Map" data-kind="field">	Map      <a href="/builtin#string">string</a>      <span class="comment">// Map Javascript function code (required)</span>
</span><span id="MapReduce.Reduce" data-kind="field">	Reduce   <a href="/builtin#string">string</a>      <span class="comment">// Reduce Javascript function code (required)</span>
</span><span id="MapReduce.Finalize" data-kind="field">	Finalize <a href="/builtin#string">string</a>      <span class="comment">// Finalize Javascript function code (optional)</span>
</span><span id="MapReduce.Out" data-kind="field">	Out      interface{} <span class="comment">// Output collection name or document. If nil, results are inlined into the result parameter.</span>
</span><span id="MapReduce.Scope" data-kind="field">	Scope    interface{} <span class="comment">// Optional global scope for Javascript functions</span>
</span><span id="MapReduce.Verbose" data-kind="field">	Verbose  <a href="/builtin#bool">bool</a>
</span>}</pre>
    </div>
  

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="MapReduceInfo" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4050">MapReduceInfo</a> <a class="Documentation-idLink" href="#MapReduceInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type MapReduceInfo struct {
<span id="MapReduceInfo.InputCount" data-kind="field">	InputCount  <a href="/builtin#int">int</a>            <span class="comment">// Number of documents mapped</span>
</span><span id="MapReduceInfo.EmitCount" data-kind="field">	EmitCount   <a href="/builtin#int">int</a>            <span class="comment">// Number of times reduce called emit</span>
</span><span id="MapReduceInfo.OutputCount" data-kind="field">	OutputCount <a href="/builtin#int">int</a>            <span class="comment">// Number of documents in resulting collection</span>
</span><span id="MapReduceInfo.Database" data-kind="field">	Database    <a href="/builtin#string">string</a>         <span class="comment">// Output database, if results are not inlined</span>
</span><span id="MapReduceInfo.Collection" data-kind="field">	Collection  <a href="/builtin#string">string</a>         <span class="comment">// Output collection, if results are not inlined</span>
</span><span id="MapReduceInfo.Time" data-kind="field">	Time        <a href="/builtin#int64">int64</a>          <span class="comment">// Time to run the job, in nanoseconds</span>
</span><span id="MapReduceInfo.VerboseTime" data-kind="field">	VerboseTime *<a href="#MapReduceTime">MapReduceTime</a> <span class="comment">// Only defined if Verbose was true</span>
</span>}</pre>
    </div>
  

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="MapReduceTime" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4060">MapReduceTime</a> <a class="Documentation-idLink" href="#MapReduceTime">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type MapReduceTime struct {
<span id="MapReduceTime.Total" data-kind="field">	Total    <a href="/builtin#int64">int64</a> <span class="comment">// Total time, in nanoseconds</span>
</span><span id="MapReduceTime.Map" data-kind="field">	Map      <a href="/builtin#int64">int64</a> &#34;mapTime&#34;  <span class="comment">// Time within map function, in nanoseconds</span>
</span><span id="MapReduceTime.EmitLoop" data-kind="field">	EmitLoop <a href="/builtin#int64">int64</a> &#34;emitLoop&#34; <span class="comment">// Time within the emit/map loop, in nanoseconds</span>
</span>}</pre>
    </div>
  

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Mode" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L47">Mode</a> <a class="Documentation-idLink" href="#Mode">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Mode <a href="/builtin#int">int</a></pre>
    </div>
  
<div class="Documentation-typeConstant">
    <div class="Documentation-declaration">
      <pre>const (
	<span class="comment">// Relevant documentation on read preference modes:</span>
	<span class="comment">//</span>
	<span class="comment">//     <a href="http://docs.mongodb.org/manual/reference/read-preference/">http://docs.mongodb.org/manual/reference/read-preference/</a></span>
	<span class="comment">//</span>
<span id="Primary" data-kind="constant">	Primary            <a href="#Mode">Mode</a> = 2 <span class="comment">// Default mode. All operations read from the current replica set primary.</span>
</span><span id="PrimaryPreferred" data-kind="constant">	PrimaryPreferred   <a href="#Mode">Mode</a> = 3 <span class="comment">// Read from the primary if available. Read from the secondary otherwise.</span>
</span><span id="Secondary" data-kind="constant">	Secondary          <a href="#Mode">Mode</a> = 4 <span class="comment">// Read from one of the nearest secondary members of the replica set.</span>
</span><span id="SecondaryPreferred" data-kind="constant">	SecondaryPreferred <a href="#Mode">Mode</a> = 5 <span class="comment">// Read from one of the nearest secondaries if available. Read from primary otherwise.</span>
</span><span id="Nearest" data-kind="constant">	Nearest            <a href="#Mode">Mode</a> = 6 <span class="comment">// Read from one of the nearest members, irrespective of it being primary or secondary.</span>
</span>
	<span class="comment">// Read preference modes are specific to mgo:</span>
<span id="Eventual" data-kind="constant">	Eventual  <a href="#Mode">Mode</a> = 0 <span class="comment">// Same as Nearest, but may change servers between reads.</span>
</span><span id="Monotonic" data-kind="constant">	Monotonic <a href="#Mode">Mode</a> = 1 <span class="comment">// Same as SecondaryPreferred before first write. Same as Primary after first write.</span>
</span><span id="Strong" data-kind="constant">	Strong    <a href="#Mode">Mode</a> = 2 <span class="comment">// Same as Primary.</span>
</span>)</pre>
    </div>
  
</div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Pipe" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2169">Pipe</a> <a class="Documentation-idLink" href="#Pipe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Pipe struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.All" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2315">All</a> <a class="Documentation-idLink" href="#Pipe.All">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) All(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>All works like Iter.All.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.AllowDiskUse" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2359">AllowDiskUse</a> <a class="Documentation-idLink" href="#Pipe.AllowDiskUse">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) AllowDiskUse() *<a href="#Pipe">Pipe</a></pre>
    </div>
  <p>AllowDiskUse enables writing to the &#34;&lt;dbpath&gt;/_tmp&#34; server directory so
that aggregation pipelines do not have to be held entirely in memory.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.Batch" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2369">Batch</a> <a class="Documentation-idLink" href="#Pipe.Batch">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) Batch(n <a href="/builtin#int">int</a>) *<a href="#Pipe">Pipe</a></pre>
    </div>
  <p>Batch sets the batch size used when fetching documents from the database.
It&#39;s possible to change this setting on a per-session basis as well, using
the Batch method of Session.
</p><p>The default batch size is defined by the database server.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.Explain" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2346">Explain</a> <a class="Documentation-idLink" href="#Pipe.Explain">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) Explain(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Explain returns a number of details about how the MongoDB server would
execute the requested pipeline, such as the number of objects examined,
the number of times the read lock was yielded to allow writes to go in,
and so on.
</p><p>For example:
</p><pre>var m bson.M
err := collection.Pipe(pipeline).Explain(&amp;m)
if err == nil {
    fmt.Printf(&#34;Explain: %#v\n&#34;, m)
}
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.Iter" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2218">Iter</a> <a class="Documentation-idLink" href="#Pipe.Iter">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) Iter() *<a href="#Iter">Iter</a></pre>
    </div>
  <p>Iter executes the pipeline and returns an iterator capable of going
over all the generated results.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Pipe.One" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Pipe) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2322">One</a> <a class="Documentation-idLink" href="#Pipe.One">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (p *<a href="#Pipe">Pipe</a>) One(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>One executes the pipeline and unmarshals the first item from the
result set into the result parameter.
It returns ErrNotFound if no items are generated by the pipeline.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Query" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L107">Query</a> <a class="Documentation-idLink" href="#Query">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Query struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.All" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3817">All</a> <a class="Documentation-idLink" href="#Query.All">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) All(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>All works like Iter.All.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Apply" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4276">Apply</a> <a class="Documentation-idLink" href="#Query.Apply">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Apply(change <a href="#Change">Change</a>, result interface{}) (info *<a href="#ChangeInfo">ChangeInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Apply runs the findAndModify MongoDB command, which allows updating, upserting
or removing a document matching a query and atomically returning either the old
version (the default) or the new version of the document (when ReturnNew is true).
If no objects are found Apply returns ErrNotFound.
</p><p>The Sort and Select query methods affect the result of Apply.  In case
multiple documents match the query, Sort enables selecting which document to
act upon by ordering it first.  Select enables retrieving only a selection
of fields of the new or old document.
</p><p>This simple example increments a counter and prints its new value:
</p><pre>change := mgo.Change{
        Update: bson.M{&#34;$inc&#34;: bson.M{&#34;n&#34;: 1}},
        ReturnNew: true,
}
info, err = col.Find(M{&#34;_id&#34;: id}).Apply(change, &amp;doc)
fmt.Println(doc.N)
</pre><p>This method depends on MongoDB &gt;= 2.0 to work properly.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/findAndModify+Command">http://www.mongodb.org/display/DOCS/findAndModify+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Updating">http://www.mongodb.org/display/DOCS/Updating</a>
<a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Batch" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2732">Batch</a> <a class="Documentation-idLink" href="#Query.Batch">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Batch(n <a href="/builtin#int">int</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>The default batch size is defined by the database itself.  As of this
writing, MongoDB will use an initial size of min(100 docs, 4MB) on the
first batch, and 4MB on remaining ones.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Comment" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3015">Comment</a> <a class="Documentation-idLink" href="#Query.Comment">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Comment(comment <a href="/builtin#string">string</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Comment adds a comment to the query to identify it in the database profiler output.
</p><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/reference/operator/meta/comment">http://docs.mongodb.org/manual/reference/operator/meta/comment</a>
<a href="http://docs.mongodb.org/manual/reference/command/profile">http://docs.mongodb.org/manual/reference/command/profile</a>
<a href="http://docs.mongodb.org/manual/administration/analyzing-mongodb-performance/#database-profiling">http://docs.mongodb.org/manual/administration/analyzing-mongodb-performance/#database-profiling</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Count" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3951">Count</a> <a class="Documentation-idLink" href="#Query.Count">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Count() (n <a href="/builtin#int">int</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Count returns the total number of documents in the result set.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Distinct" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3996">Distinct</a> <a class="Documentation-idLink" href="#Query.Distinct">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Distinct(key <a href="/builtin#string">string</a>, result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Distinct unmarshals into result the list of distinct values for the given key.
</p><p>For example:
</p><pre>var result []int
err := collection.Find(bson.M{&#34;gender&#34;: &#34;F&#34;}).Distinct(&#34;age&#34;, &amp;result)
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Aggregation">http://www.mongodb.org/display/DOCS/Aggregation</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Explain" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2879">Explain</a> <a class="Documentation-idLink" href="#Query.Explain">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Explain(result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Explain returns a number of details about how the MongoDB server would
execute the requested query, such as the number of objects examined,
the number of times the read lock was yielded to allow writes to go in,
and so on.
</p><p>For example:
</p><pre>m := bson.M{}
err := collection.Find(bson.M{&#34;filename&#34;: name}).Explain(m)
if err == nil {
    fmt.Printf(&#34;Explain: %#v\n&#34;, m)
}
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Optimization">http://www.mongodb.org/display/DOCS/Optimization</a>
<a href="http://www.mongodb.org/display/DOCS/Query+Optimizer">http://www.mongodb.org/display/DOCS/Query+Optimizer</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.For" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3823">For</a> <a class="Documentation-idLink" href="#Query.For">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) For(result interface{}, f func() <a href="/builtin#error">error</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>The For method is obsolete and will be removed in a future release.
See Iter as an elegant replacement.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Hint" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2913">Hint</a> <a class="Documentation-idLink" href="#Query.Hint">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Hint(indexKey ...<a href="/builtin#string">string</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Hint will include an explicit &#34;hint&#34; in the query to force the server
to use a specified index, potentially improving performance in some
situations.  The provided parameters are the fields that compose the
key of the index to be used.  For details on how the indexKey may be
built, see the EnsureIndex method.
</p><p>For example:
</p><pre>query := collection.Find(bson.M{&#34;firstname&#34;: &#34;Joe&#34;, &#34;lastname&#34;: &#34;Winter&#34;})
query.Hint(&#34;lastname&#34;, &#34;firstname&#34;)
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Optimization">http://www.mongodb.org/display/DOCS/Optimization</a>
<a href="http://www.mongodb.org/display/DOCS/Query+Optimizer">http://www.mongodb.org/display/DOCS/Query+Optimizer</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Iter" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3426">Iter</a> <a class="Documentation-idLink" href="#Query.Iter">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Iter() *<a href="#Iter">Iter</a></pre>
    </div>
  <p>Iter executes the query and returns an iterator capable of going over all
the results. Results will be returned in batches of configurable
size (see the Batch method) and more documents will be requested when a
configurable number of documents is iterated over (see the Prefetch method).
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Limit" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2774">Limit</a> <a class="Documentation-idLink" href="#Query.Limit">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Limit(n <a href="/builtin#int">int</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Limit restricts the maximum number of documents retrieved to n, and also
changes the batch size to the same value.  Once n documents have been
returned by Next, the following call will return ErrNotFound.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.LogReplay" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3027">LogReplay</a> <a class="Documentation-idLink" href="#Query.LogReplay">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) LogReplay() *<a href="#Query">Query</a></pre>
    </div>
  <p>LogReplay enables an option that optimizes queries that are typically
made on the MongoDB oplog for replaying it. This is an internal
implementation aspect and most likely uninteresting for other uses.
It has seen at least one use case, though, so it&#39;s exposed via the API.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.MapReduce" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4125">MapReduce</a> <a class="Documentation-idLink" href="#Query.MapReduce">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) MapReduce(job *<a href="#MapReduce">MapReduce</a>, result interface{}) (info *<a href="#MapReduceInfo">MapReduceInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>MapReduce executes a map/reduce job for documents covered by the query.
That kind of job is suitable for very flexible bulk aggregation of data
performed at the server side via Javascript functions.
</p><p>Results from the job may be returned as a result of the query itself
through the result parameter in case they&#39;ll certainly fit in memory
and in a single document.  If there&#39;s the possibility that the amount
of data might be too large, results must be stored back in an alternative
collection or even a separate database, by setting the Out field of the
provided MapReduce job.  In that case, provide nil as the result parameter.
</p><p>These are some of the ways to set Out:
</p><pre>nil
    Inline results into the result parameter.

bson.M{&#34;replace&#34;: &#34;mycollection&#34;}
    The output will be inserted into a collection which replaces any
    existing collection with the same name.

bson.M{&#34;merge&#34;: &#34;mycollection&#34;}
    This option will merge new data into the old output collection. In
    other words, if the same key exists in both the result set and the
    old collection, the new key will overwrite the old one.

bson.M{&#34;reduce&#34;: &#34;mycollection&#34;}
    If documents exist for a given key in the result set and in the old
    collection, then a reduce operation (using the specified reduce
    function) will be performed on the two values and the result will be
    written to the output collection. If a finalize function was
    provided, this will be run after the reduce as well.

bson.M{...., &#34;db&#34;: &#34;mydb&#34;}
    Any of the above options can have the &#34;db&#34; key included for doing
    the respective action in a separate database.
</pre><p>The following is a trivial example which will count the number of
occurrences of a field named n on each document in a collection, and
will return results inline:
</p><pre>job := &amp;mgo.MapReduce{
        Map:      &#34;function() { emit(this.n, 1) }&#34;,
        Reduce:   &#34;function(key, values) { return Array.sum(values) }&#34;,
}
var result []struct { Id int &#34;_id&#34;; Value int }
_, err := collection.Find(nil).MapReduce(job, &amp;result)
if err != nil {
    return err
}
for _, item := range result {
    fmt.Println(item.Value)
}
</pre><p>This function is compatible with MongoDB 1.7.4+.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/MapReduce">http://www.mongodb.org/display/DOCS/MapReduce</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.One" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3081">One</a> <a class="Documentation-idLink" href="#Query.One">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) One(result interface{}) (err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>One executes the query and unmarshals the first obtained document into the
result argument.  The result must be a struct or map value capable of being
unmarshalled into by gobson.  This function blocks until either a result
is available or an error happens.  For example:
</p><pre>err := collection.Find(bson.M{&#34;a&#34;: 1}).One(&amp;result)
</pre><p>In case the resulting document includes a field named $err or errmsg, which
are standard ways for MongoDB to return query errors, the returned err will
be set to a *QueryError value including the Err message and the Code.  In
those cases, the result argument is still unmarshalled into with the
received document so that any other custom values may be obtained if
desired.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Prefetch" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2754">Prefetch</a> <a class="Documentation-idLink" href="#Query.Prefetch">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Prefetch(p <a href="/builtin#float64">float64</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Prefetch sets the point at which the next batch of results will be requested.
When there are p*batch_size remaining documents cached in an Iter, the next
batch will be requested in background. For instance, when using this:
</p><pre>query.Batch(200).Prefetch(0.25)
</pre><p>and there are only 50 documents cached in the Iter to be processed, the
next batch of 200 will be requested. It&#39;s possible to change this setting on
a per-session basis as well, using the SetPrefetch method of Session.
</p><p>The default prefetch value is 0.25.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Select" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2803">Select</a> <a class="Documentation-idLink" href="#Query.Select">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Select(selector interface{}) *<a href="#Query">Query</a></pre>
    </div>
  <p>Select enables selecting which fields should be retrieved for the results
found. For example, the following query would only retrieve the name field:
</p><pre>err := collection.Find(nil).Select(bson.M{&#34;name&#34;: 1}).One(&amp;result)
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields">http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.SetMaxScan" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2930">SetMaxScan</a> <a class="Documentation-idLink" href="#Query.SetMaxScan">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) SetMaxScan(n <a href="/builtin#int">int</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>SetMaxScan constrains the query to stop after scanning the specified
number of documents.
</p><p>This modifier is generally used to prevent potentially long running
queries from disrupting performance by scanning through too much data.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.SetMaxTime" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2968">SetMaxTime</a> <a class="Documentation-idLink" href="#Query.SetMaxTime">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) SetMaxTime(d <a href="/time">time</a>.<a href="/time#Duration">Duration</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>SetMaxTime constrains the query to stop after running for the specified time.
</p><p>When the time limit is reached MongoDB automatically cancels the query.
This can be used to efficiently prevent and identify unexpectedly slow queries.
</p><p>A few important notes about the mechanism enforcing this limit:
</p><pre>- Requests can block behind locking operations on the server, and that blocking
  time is not accounted for. In other words, the timer starts ticking only after
  the actual start of the query when it initially acquires the appropriate lock;

- Operations are interrupted only at interrupt points where an operation can be
  safely aborted – the total execution time may exceed the specified value;

- The limit can be applied to both CRUD operations and commands, but not all
  commands are interruptible;

- While iterating over results, computing follow up batches is included in the
  total time and the iteration continues until the alloted time is over, but
  network roundtrips are not taken into account for the limit.

- This limit does not override the inactive cursor timeout for idle cursors
  (default is 10 min).
</pre><p>This mechanism was introduced in MongoDB 2.6.
</p><p>Relevant documentation:
</p><pre><a href="http://blog.mongodb.org/post/83621787773/maxtimems-and-query-optimizer-introspection-in">http://blog.mongodb.org/post/83621787773/maxtimems-and-query-optimizer-introspection-in</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Skip" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2764">Skip</a> <a class="Documentation-idLink" href="#Query.Skip">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Skip(n <a href="/builtin#int">int</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Skip skips over the n initial documents from the query results.  Note that
this only makes sense with capped collections where documents are naturally
ordered by insertion time, or with sorted results.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Snapshot" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2999">Snapshot</a> <a class="Documentation-idLink" href="#Query.Snapshot">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Snapshot() *<a href="#Query">Query</a></pre>
    </div>
  <p>Snapshot will force the performed query to make use of an available
index on the _id field to prevent the same document from being returned
more than once in a single iteration. This might happen without this
setting in situations when the document changes in size and thus has to
be moved while the iteration is running.
</p><p>Because snapshot mode traverses the _id index, it may not be used with
sorting or explicit hints. It also cannot use any other index for the
query.
</p><p>Even with snapshot mode, items inserted or deleted during the query may
or may not be returned; that is, this mode is not a true point-in-time
snapshot.
</p><p>The same effect of Snapshot may be obtained by using any unique index on
field(s) that will not be modified (best to use Hint explicitly too).
A non-unique index (such as creation time) may be made unique by
appending _id to the index when creating it.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/How+to+do+Snapshotted+Queries+in+the+Mongo+Database">http://www.mongodb.org/display/DOCS/How+to+do+Snapshotted+Queries+in+the+Mongo+Database</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Sort" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2825">Sort</a> <a class="Documentation-idLink" href="#Query.Sort">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Sort(fields ...<a href="/builtin#string">string</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>Sort asks the database to order returned documents according to the
provided field names. A field name may be prefixed by - (minus) for
it to be sorted in reverse order.
</p><p>For example:
</p><pre>query1 := collection.Find(nil).Sort(&#34;firstname&#34;, &#34;lastname&#34;)
query2 := collection.Find(nil).Sort(&#34;-age&#34;)
query3 := collection.Find(nil).Sort(&#34;$natural&#34;)
query4 := collection.Find(nil).Select(bson.M{&#34;score&#34;: bson.M{&#34;$meta&#34;: &#34;textScore&#34;}}).Sort(&#34;$textScore:score&#34;)
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Sorting+and+Natural+Order">http://www.mongodb.org/display/DOCS/Sorting+and+Natural+Order</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Query.Tail" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Query) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3519">Tail</a> <a class="Documentation-idLink" href="#Query.Tail">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (q *<a href="#Query">Query</a>) Tail(timeout <a href="/time">time</a>.<a href="/time#Duration">Duration</a>) *<a href="#Iter">Iter</a></pre>
    </div>
  <p>Tail returns a tailable iterator. Unlike a normal iterator, a
tailable iterator may wait for new values to be inserted in the
collection once the end of the current result set is reached,
A tailable iterator may only be used with capped collections.
</p><p>The timeout parameter indicates how long Next will block waiting
for a result before timing out.  If set to -1, Next will not
timeout, and will continue waiting for a result for as long as
the cursor is valid and the session is not closed. If set to 0,
Next times out as soon as it reaches the end of the result set.
Otherwise, Next will wait for at least the given number of
seconds for a new document to be available before timing out.
</p><p>On timeouts, Next will unblock and return false, and the Timeout
method will return true if called. In these cases, Next may still
be called again on the same iterator to check if a new value is
available at the current cursor position, and again it will block
according to the specified timeoutSecs. If the cursor becomes
invalid, though, both Next and Timeout will return false and
the query must be restarted.
</p><p>The following example demonstrates timeout handling and query
restarting:
</p><pre>iter := collection.Find(nil).Sort(&#34;$natural&#34;).Tail(5 * time.Second)
for {
     for iter.Next(&amp;result) {
         fmt.Println(result.Id)
         lastId = result.Id
     }
     if iter.Err() != nil {
         return iter.Close()
     }
     if iter.Timeout() {
         continue
     }
     query := collection.Find(bson.M{&#34;_id&#34;: bson.M{&#34;$gt&#34;: lastId}})
     iter = query.Sort(&#34;$natural&#34;).Tail(5 * time.Second)
}
iter.Close()
</pre><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Tailable+Cursors">http://www.mongodb.org/display/DOCS/Tailable+Cursors</a>
<a href="http://www.mongodb.org/display/DOCS/Capped+Collections">http://www.mongodb.org/display/DOCS/Capped+Collections</a>
<a href="http://www.mongodb.org/display/DOCS/Sorting+and+Natural+Order">http://www.mongodb.org/display/DOCS/Sorting+and+Natural+Order</a>
</pre>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="QueryError" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2400">QueryError</a> <a class="Documentation-idLink" href="#QueryError">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type QueryError struct {
<span id="QueryError.Code" data-kind="field">	Code      <a href="/builtin#int">int</a>
</span><span id="QueryError.Message" data-kind="field">	Message   <a href="/builtin#string">string</a>
</span><span id="QueryError.Assertion" data-kind="field">	Assertion <a href="/builtin#bool">bool</a>
</span>}</pre>
    </div>
  
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="QueryError.Error" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*QueryError) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2406">Error</a> <a class="Documentation-idLink" href="#QueryError.Error">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (err *<a href="#QueryError">QueryError</a>) Error() <a href="/builtin#string">string</a></pre>
    </div>
  

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Role" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L814">Role</a> <a class="Documentation-idLink" href="#Role">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Role <a href="/builtin#string">string</a></pre>
    </div>
  
<div class="Documentation-typeConstant">
    <div class="Documentation-declaration">
      <pre>const (
	<span class="comment">// Relevant documentation:</span>
	<span class="comment">//</span>
	<span class="comment">//     <a href="http://docs.mongodb.org/manual/reference/user-privileges/">http://docs.mongodb.org/manual/reference/user-privileges/</a></span>
	<span class="comment">//</span>
<span id="RoleRoot" data-kind="constant">	RoleRoot         <a href="#Role">Role</a> = &#34;root&#34;
</span><span id="RoleRead" data-kind="constant">	RoleRead         <a href="#Role">Role</a> = &#34;read&#34;
</span><span id="RoleReadAny" data-kind="constant">	RoleReadAny      <a href="#Role">Role</a> = &#34;readAnyDatabase&#34;
</span><span id="RoleReadWrite" data-kind="constant">	RoleReadWrite    <a href="#Role">Role</a> = &#34;readWrite&#34;
</span><span id="RoleReadWriteAny" data-kind="constant">	RoleReadWriteAny <a href="#Role">Role</a> = &#34;readWriteAnyDatabase&#34;
</span><span id="RoleDBAdmin" data-kind="constant">	RoleDBAdmin      <a href="#Role">Role</a> = &#34;dbAdmin&#34;
</span><span id="RoleDBAdminAny" data-kind="constant">	RoleDBAdminAny   <a href="#Role">Role</a> = &#34;dbAdminAnyDatabase&#34;
</span><span id="RoleUserAdmin" data-kind="constant">	RoleUserAdmin    <a href="#Role">Role</a> = &#34;userAdmin&#34;
</span><span id="RoleUserAdminAny" data-kind="constant">	RoleUserAdminAny <a href="#Role">Role</a> = &#34;userAdminAnyDatabase&#34;
</span><span id="RoleClusterAdmin" data-kind="constant">	RoleClusterAdmin <a href="#Role">Role</a> = &#34;clusterAdmin&#34;
</span>)</pre>
    </div>
  
</div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Safe" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1812">Safe</a> <a class="Documentation-idLink" href="#Safe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Safe struct {
<span id="Safe.W" data-kind="field">	W        <a href="/builtin#int">int</a>    <span class="comment">// Min # of servers to ack before success</span>
</span><span id="Safe.WMode" data-kind="field">	WMode    <a href="/builtin#string">string</a> <span class="comment">// Write mode for MongoDB 2.0+ (e.g. &#34;majority&#34;)</span>
</span><span id="Safe.WTimeout" data-kind="field">	WTimeout <a href="/builtin#int">int</a>    <span class="comment">// Milliseconds to wait for W before timing out</span>
</span><span id="Safe.FSync" data-kind="field">	FSync    <a href="/builtin#bool">bool</a>   <span class="comment">// Sync via the journal if present, or via data files sync otherwise</span>
</span><span id="Safe.J" data-kind="field">	J        <a href="/builtin#bool">bool</a>   <span class="comment">// Sync via the journal if present</span>
</span>}</pre>
    </div>
  <p>See SetSafe for details on the Safe type.
</p>

  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="ServerAddr" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L399">ServerAddr</a> <a class="Documentation-idLink" href="#ServerAddr">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type ServerAddr struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  <p>ServerAddr represents the address for establishing a connection to an
individual MongoDB server.
</p>
<div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="ServerAddr.String" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*ServerAddr) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L405">String</a> <a class="Documentation-idLink" href="#ServerAddr.String">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (addr *<a href="#ServerAddr">ServerAddr</a>) String() <a href="/builtin#string">string</a></pre>
    </div>
  <p>String returns the address that was provided for the server before resolution.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="ServerAddr.TCPAddr" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*ServerAddr) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L410">TCPAddr</a> <a class="Documentation-idLink" href="#ServerAddr.TCPAddr">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (addr *<a href="#ServerAddr">ServerAddr</a>) TCPAddr() *<a href="/net">net</a>.<a href="/net#TCPAddr">TCPAddr</a></pre>
    </div>
  <p>TCPAddr returns the resolved TCP address for the server.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Session" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L77">Session</a> <a class="Documentation-idLink" href="#Session">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Session struct {
	<span class="comment">// contains filtered or unexported fields</span>
}</pre>
    </div>
  <p>Session represents a communication session with the database.
</p><p>All Session methods are concurrency-safe and may be called from multiple
goroutines. In all session modes but Eventual, using the session from
multiple goroutines will cause them to share the same underlying socket.
See the documentation on Session.SetMode for more details.
</p>
<div class="Documentation-typeFunc">
    
  
  
    <h4 tabindex="-1" id="Dial" data-kind="function" class="Documentation-typeFuncHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L243">Dial</a> <a class="Documentation-idLink" href="#Dial">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func Dial(url <a href="/builtin#string">string</a>) (*<a href="#Session">Session</a>, <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>Dial establishes a new session to the cluster identified by the given seed
server(s). The session will enable communication with all of the servers in
the cluster, so the seed servers are used only to find out about the cluster
topology.
</p><p>Dial will timeout after 10 seconds if a server isn&#39;t reached. The returned
session will timeout operations after one minute by default if servers
aren&#39;t available. To customize the timeout, see DialWithTimeout,
SetSyncTimeout, and SetSocketTimeout.
</p><p>This method is generally called just once for a given cluster.  Further
sessions to the same cluster are then established using the New or Copy
methods on the obtained session. This will make them share the underlying
cluster, and manage the pool of connections appropriately.
</p><p>Once the session is not useful anymore, Close must be called to release the
resources appropriately.
</p><p>The seed servers must be provided in the following format:
</p><pre>[mongodb://][user:pass@]host1[:port1][,host2[:port2],...][/database][?options]
</pre><p>For example, it may be as simple as:
</p><pre>localhost
</pre><p>Or more involved like:
</p><pre>mongodb://myuser:mypass@localhost:40001,otherhost:40001/mydb
</pre><p>If the port number is not provided for a server, it defaults to 27017.
</p><p>The username and password provided in the URL will be used to authenticate
into the database named after the slash at the end of the host names, or
into the &#34;admin&#34; database if none is provided.  The authentication information
will persist in sessions obtained through the New method as well.
</p><p>The following connection options are supported after the question mark:
</p><pre>   connect=direct

       Disables the automatic replica set server discovery logic, and
       forces the use of servers provided only (even if secondaries).
       Note that to talk to a secondary the consistency requirements
       must be relaxed to Monotonic or Eventual via SetMode.

   connect=replicaSet

	   Discover replica sets automatically. Default connection behavior.

   replicaSet=&lt;setname&gt;

       If specified will prevent the obtained session from communicating
       with any server which is not part of a replica set with the given name.
       The default is to communicate with any server specified or discovered
       via the servers contacted.

   authSource=&lt;db&gt;

       Informs the database used to establish credentials and privileges
       with a MongoDB server. Defaults to the database name provided via
       the URL path, and &#34;admin&#34; if that&#39;s unset.

   authMechanism=&lt;mechanism&gt;

      Defines the protocol for credential negotiation. Defaults to &#34;MONGODB-CR&#34;,
      which is the default username/password challenge-response mechanism.

   gssapiServiceName=&lt;name&gt;

      Defines the service name to use when authenticating with the GSSAPI
      mechanism. Defaults to &#34;mongodb&#34;.

   maxPoolSize=&lt;limit&gt;

      Defines the per-server socket pool limit. Defaults to 4096.
      See Session.SetPoolLimit for details.
</pre><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/reference/connection-string/">http://docs.mongodb.org/manual/reference/connection-string/</a>
</pre>

  

  </div><div class="Documentation-typeFunc">
    
  
  
    <h4 tabindex="-1" id="DialWithInfo" data-kind="function" class="Documentation-typeFuncHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L415">DialWithInfo</a> <a class="Documentation-idLink" href="#DialWithInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func DialWithInfo(info *<a href="#DialInfo">DialInfo</a>) (*<a href="#Session">Session</a>, <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>DialWithInfo establishes a new session to the cluster identified by info.
</p>

  

  </div><div class="Documentation-typeFunc">
    
  
  
    <h4 tabindex="-1" id="DialWithTimeout" data-kind="function" class="Documentation-typeFuncHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L258">DialWithTimeout</a> <a class="Documentation-idLink" href="#DialWithTimeout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func DialWithTimeout(url <a href="/builtin#string">string</a>, timeout <a href="/time">time</a>.<a href="/time#Duration">Duration</a>) (*<a href="#Session">Session</a>, <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>DialWithTimeout works like Dial, but uses timeout as the amount of time to
wait for a server to respond when first connecting and also on follow up
operations in the session. If timeout is zero, the call may block
forever waiting for a connection to be made.
</p><p>See SetSyncTimeout for customizing the timeout for the session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.BuildInfo" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L4377">BuildInfo</a> <a class="Documentation-idLink" href="#Session.BuildInfo">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) BuildInfo() (info <a href="#BuildInfo">BuildInfo</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>BuildInfo retrieves the version and other details about the
running MongoDB server.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Clone" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1602">Clone</a> <a class="Documentation-idLink" href="#Session.Clone">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Clone() *<a href="#Session">Session</a></pre>
    </div>
  <p>Clone works just like Copy, but also reuses the same socket as the original
session, in case it had already reserved one due to its consistency
guarantees.  This behavior ensures that writes performed in the old session
are necessarily observed when using the new session, as long as it was a
strong or monotonic session.  That said, it also means that long operations
may cause other goroutines using the original session to wait.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Close" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1611">Close</a> <a class="Documentation-idLink" href="#Session.Close">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Close()</pre>
    </div>
  <p>Close terminates the session.  It&#39;s a runtime error to use a session
after it has been closed.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Copy" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1588">Copy</a> <a class="Documentation-idLink" href="#Session.Copy">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Copy() *<a href="#Session">Session</a></pre>
    </div>
  <p>Copy works just like New, but preserves the exact authentication
information from the original session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.DB" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L579">DB</a> <a class="Documentation-idLink" href="#Session.DB">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) DB(name <a href="/builtin#string">string</a>) *<a href="#Database">Database</a></pre>
    </div>
  <p>DB returns a value representing the named database. If name
is empty, the database name provided in the dialed URL is
used instead. If that is also empty, &#34;test&#34; is used as a
fallback in a way equivalent to the mongo shell.
</p><p>Creating this value is a very lightweight operation, and
involves no network communication.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.DatabaseNames" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3407">DatabaseNames</a> <a class="Documentation-idLink" href="#Session.DatabaseNames">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) DatabaseNames() (names []<a href="/builtin#string">string</a>, err <a href="/builtin#error">error</a>)</pre>
    </div>
  <p>DatabaseNames returns the names of non-empty databases present in the cluster.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.EnsureSafe" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1944">EnsureSafe</a> <a class="Documentation-idLink" href="#Session.EnsureSafe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) EnsureSafe(safe *<a href="#Safe">Safe</a>)</pre>
    </div>
  <p>EnsureSafe compares the provided safety parameters with the ones
currently in use by the session and picks the most conservative
choice for each setting.
</p><p>That is:
</p><pre>- safe.WMode is always used if set.
- safe.W is used if larger than the current W and WMode is empty.
- safe.FSync is always used if true.
- safe.J is used if FSync is false.
- safe.WTimeout is used if set and smaller than the current WTimeout.
</pre><p>For example, the following statement will ensure the session is
at least checking for errors, without enforcing further constraints.
If a more conservative SetSafe or EnsureSafe call was previously done,
the following call will be ignored.
</p><pre>session.EnsureSafe(&amp;mgo.Safe{})
</pre><p>See also the SetSafe method for details on what each option means.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/getLastError+Command">http://www.mongodb.org/display/DOCS/getLastError+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Verifying+Propagation+of+Writes+with+getLastError">http://www.mongodb.org/display/DOCS/Verifying+Propagation+of+Writes+with+getLastError</a>
<a href="http://www.mongodb.org/display/DOCS/Data+Center+Awareness">http://www.mongodb.org/display/DOCS/Data+Center+Awareness</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.FindRef" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L3333">FindRef</a> <a class="Documentation-idLink" href="#Session.FindRef">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) FindRef(ref *<a href="#DBRef">DBRef</a>) *<a href="#Query">Query</a></pre>
    </div>
  <p>FindRef returns a query that looks for the document in the provided
reference. For a DBRef to be resolved correctly at the session level
it must necessarily have the optional DB field defined.
</p><p>See also the DBRef type and the FindRef method on Database.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Database+References">http://www.mongodb.org/display/DOCS/Database+References</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Fsync" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2049">Fsync</a> <a class="Documentation-idLink" href="#Session.Fsync">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Fsync(async <a href="/builtin#bool">bool</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Fsync flushes in-memory writes to disk on the server the session
is established with. If async is true, the call returns immediately,
otherwise it returns after the flush has been made.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.FsyncLock" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2078">FsyncLock</a> <a class="Documentation-idLink" href="#Session.FsyncLock">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) FsyncLock() <a href="/builtin#error">error</a></pre>
    </div>
  <p>FsyncLock locks all writes in the specific server the session is
established with and returns. Any writes attempted to the server
after it is successfully locked will block until FsyncUnlock is
called for the same server.
</p><p>This method works on secondaries as well, preventing the oplog from
being flushed while the server is locked, but since only the server
connected to is locked, for locking specific secondaries it may be
necessary to establish a connection directly to the secondary (see
Dial&#39;s connect=direct option).
</p><p>As an important caveat, note that once a write is attempted and
blocks, follow up reads will block as well due to the way the
lock is internally implemented in the server. More details at:
</p><pre><a href="https://jira.mongodb.org/browse/SERVER-4243">https://jira.mongodb.org/browse/SERVER-4243</a>
</pre><p>FsyncLock is often used for performing consistent backups of
the database files on disk.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/fsync+Command">http://www.mongodb.org/display/DOCS/fsync+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Backups">http://www.mongodb.org/display/DOCS/Backups</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.FsyncUnlock" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2083">FsyncUnlock</a> <a class="Documentation-idLink" href="#Session.FsyncUnlock">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) FsyncUnlock() <a href="/builtin#error">error</a></pre>
    </div>
  <p>FsyncUnlock releases the server for writes. See FsyncLock for details.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.LiveServers" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L565">LiveServers</a> <a class="Documentation-idLink" href="#Session.LiveServers">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) LiveServers() (addrs []<a href="/builtin#string">string</a>)</pre>
    </div>
  <p>LiveServers returns a list of server addresses which are
currently known to be alive.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Login" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L697">Login</a> <a class="Documentation-idLink" href="#Session.Login">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Login(cred *<a href="#Credential">Credential</a>) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Login authenticates with MongoDB using the provided credential.  The
authentication is valid for the whole session and will stay valid until
Logout is explicitly called for the same database, or the session is
closed.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.LogoutAll" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L758">LogoutAll</a> <a class="Documentation-idLink" href="#Session.LogoutAll">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) LogoutAll()</pre>
    </div>
  <p>LogoutAll removes all established authentication credentials for the session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Mode" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1696">Mode</a> <a class="Documentation-idLink" href="#Session.Mode">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Mode() <a href="#Mode">Mode</a></pre>
    </div>
  <p>Mode returns the current consistency mode for the session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.New" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1578">New</a> <a class="Documentation-idLink" href="#Session.New">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) New() *<a href="#Session">Session</a></pre>
    </div>
  <p>New creates a new session with the same parameters as the original
session, including consistency, batch size, prefetching, safety mode,
etc. The returned session will use sockets from the pool, so there&#39;s
a chance that writes just performed in another session may not yet
be visible.
</p><p>Login information from the original session will not be copied over
into the new session unless it was provided through the initial URL
for the Dial function.
</p><p>See the Copy and Clone methods.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Ping" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2042">Ping</a> <a class="Documentation-idLink" href="#Session.Ping">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Ping() <a href="/builtin#error">error</a></pre>
    </div>
  <p>Ping runs a trivial ping command just to get in touch with the server.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Refresh" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1631">Refresh</a> <a class="Documentation-idLink" href="#Session.Refresh">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Refresh()</pre>
    </div>
  <p>Refresh puts back any reserved sockets in use and restarts the consistency
guarantees according to the current consistency setting for the session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.ResetIndexCache" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1562">ResetIndexCache</a> <a class="Documentation-idLink" href="#Session.ResetIndexCache">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) ResetIndexCache()</pre>
    </div>
  <p>ResetIndexCache() clears the cache of previously ensured indexes.
Following requests to EnsureIndex will contact the server.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Run" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2013">Run</a> <a class="Documentation-idLink" href="#Session.Run">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Run(cmd interface{}, result interface{}) <a href="/builtin#error">error</a></pre>
    </div>
  <p>Run issues the provided command on the &#34;admin&#34; database and
and unmarshals its result in the respective argument. The cmd
argument may be either a string with the command name itself, in
which case an empty document of the form bson.M{cmd: 1} will be used,
or it may be a full command document.
</p><p>Note that MongoDB considers the first marshalled key as the command
name, so when providing a command with options, it&#39;s important to
use an ordering-preserving document, such as a struct value or an
instance of bson.D.  For instance:
</p><pre>db.Run(bson.D{{&#34;create&#34;, &#34;mycollection&#34;}, {&#34;size&#34;, 1024}})
</pre><p>For commands on arbitrary databases, see the Run method in
the Database type.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/Commands">http://www.mongodb.org/display/DOCS/Commands</a>
<a href="http://www.mongodb.org/display/DOCS/List+of+Database+CommandSkips">http://www.mongodb.org/display/DOCS/List+of+Database+CommandSkips</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.Safe" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1821">Safe</a> <a class="Documentation-idLink" href="#Session.Safe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) Safe() (safe *<a href="#Safe">Safe</a>)</pre>
    </div>
  <p>Safe returns the current safety mode for the session.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SelectServers" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L2035">SelectServers</a> <a class="Documentation-idLink" href="#Session.SelectServers">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SelectServers(tags ...<a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/bson">bson</a>.<a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/bson#D">D</a>)</pre>
    </div>
  <p>SelectServers restricts communication to servers configured with the
given tags. For example, the following statement restricts servers
used for reading operations to those with both tag &#34;disk&#34; set to
&#34;ssd&#34; and tag &#34;rack&#34; set to 1:
</p><pre>session.SelectServers(bson.D{{&#34;disk&#34;, &#34;ssd&#34;}, {&#34;rack&#34;, 1}})
</pre><p>Multiple sets of tags may be provided, in which case the used server
must match all tags within any one set.
</p><p>If a connection was previously assigned to the session due to the
current session mode (see Session.SetMode), the tag selection will
only be enforced after the session is refreshed.
</p><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/tutorial/configure-replica-set-tag-sets">http://docs.mongodb.org/manual/tutorial/configure-replica-set-tag-sets</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetBatch" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1782">SetBatch</a> <a class="Documentation-idLink" href="#Session.SetBatch">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetBatch(n <a href="/builtin#int">int</a>)</pre>
    </div>
  <p>SetBatch sets the default batch size used when fetching documents from the
database. It&#39;s possible to change this setting on a per-query basis as
well, using the Query.Batch method.
</p><p>The default batch size is defined by the database itself.  As of this
writing, MongoDB will use an initial size of min(100 docs, 4MB) on the
first batch, and 4MB on remaining ones.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetBypassValidation" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1769">SetBypassValidation</a> <a class="Documentation-idLink" href="#Session.SetBypassValidation">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetBypassValidation(bypass <a href="/builtin#bool">bool</a>)</pre>
    </div>
  <p>SetBypassValidation sets whether the server should bypass the registered
validation expressions executed when documents are inserted or modified,
in the interest of preserving invariants in the collection being modified.
The default is to not bypass, and thus to perform the validation
expressions registered for modified collections.
</p><p>Document validation was introuced in MongoDB 3.2.
</p><p>Relevant documentation:
</p><pre><a href="https://docs.mongodb.org/manual/release-notes/3.2/#bypass-validation">https://docs.mongodb.org/manual/release-notes/3.2/#bypass-validation</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetCursorTimeout" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1732">SetCursorTimeout</a> <a class="Documentation-idLink" href="#Session.SetCursorTimeout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetCursorTimeout(d <a href="/time">time</a>.<a href="/time#Duration">Duration</a>)</pre>
    </div>
  <p>SetCursorTimeout changes the standard timeout period that the server
enforces on created cursors. The only supported value right now is
0, which disables the timeout. The standard server timeout is 10 minutes.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetMode" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1680">SetMode</a> <a class="Documentation-idLink" href="#Session.SetMode">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetMode(consistency <a href="#Mode">Mode</a>, refresh <a href="/builtin#bool">bool</a>)</pre>
    </div>
  <p>SetMode changes the consistency mode for the session.
</p><p>The default mode is Strong.
</p><p>In the Strong consistency mode reads and writes will always be made to
the primary server using a unique connection so that reads and writes are
fully consistent, ordered, and observing the most up-to-date data.
This offers the least benefits in terms of distributing load, but the
most guarantees.  See also Monotonic and Eventual.
</p><p>In the Monotonic consistency mode reads may not be entirely up-to-date,
but they will always see the history of changes moving forward, the data
read will be consistent across sequential queries in the same session,
and modifications made within the session will be observed in following
queries (read-your-writes).
</p><p>In practice, the Monotonic mode is obtained by performing initial reads
on a unique connection to an arbitrary secondary, if one is available,
and once the first write happens, the session connection is switched over
to the primary server.  This manages to distribute some of the reading
load with secondaries, while maintaining some useful guarantees.
</p><p>In the Eventual consistency mode reads will be made to any secondary in the
cluster, if one is available, and sequential reads will not necessarily
be made with the same connection.  This means that data may be observed
out of order.  Writes will of course be issued to the primary, but
independent writes in the same Eventual session may also be made with
independent connections, so there are also no guarantees in terms of
write ordering (no read-your-writes guarantees either).
</p><p>The Eventual mode is the fastest and most resource-friendly, but is
also the one offering the least guarantees about ordering of the data
read and written.
</p><p>If refresh is true, in addition to ensuring the session is in the given
consistency mode, the consistency guarantees will also be reset (e.g.
a Monotonic session will be allowed to read from secondaries again).
This is equivalent to calling the Refresh function.
</p><p>Shifting between Monotonic and Strong modes will keep a previously
reserved connection for the session unless refresh is true or the
connection is unsuitable (to a secondary server in a Strong session).
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetPoolLimit" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1751">SetPoolLimit</a> <a class="Documentation-idLink" href="#Session.SetPoolLimit">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetPoolLimit(limit <a href="/builtin#int">int</a>)</pre>
    </div>
  <p>SetPoolLimit sets the maximum number of sockets in use in a single server
before this session will block waiting for a socket to be available.
The default limit is 4096.
</p><p>This limit must be set to cover more than any expected workload of the
application. It is a bad practice and an unsupported use case to use the
database driver to define the concurrency limit of an application. Prevent
such concurrency &#34;at the door&#34; instead, by properly restricting the amount
of used resources and number of goroutines before they are created.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetPrefetch" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1805">SetPrefetch</a> <a class="Documentation-idLink" href="#Session.SetPrefetch">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetPrefetch(p <a href="/builtin#float64">float64</a>)</pre>
    </div>
  <p>SetPrefetch sets the default point at which the next batch of results will be
requested.  When there are p*batch_size remaining documents cached in an
Iter, the next batch will be requested in background. For instance, when
using this:
</p><pre>session.SetBatch(200)
session.SetPrefetch(0.25)
</pre><p>and there are only 50 documents cached in the Iter to be processed, the
next batch of 200 will be requested. It&#39;s possible to change this setting on
a per-query basis as well, using the Prefetch method of Query.
</p><p>The default prefetch value is 0.25.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetSafe" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1910">SetSafe</a> <a class="Documentation-idLink" href="#Session.SetSafe">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetSafe(safe *<a href="#Safe">Safe</a>)</pre>
    </div>
  <p>SetSafe changes the session safety mode.
</p><p>If the safe parameter is nil, the session is put in unsafe mode, and writes
become fire-and-forget, without error checking.  The unsafe mode is faster
since operations won&#39;t hold on waiting for a confirmation.
</p><p>If the safe parameter is not nil, any changing query (insert, update, ...)
will be followed by a getLastError command with the specified parameters,
to ensure the request was correctly processed.
</p><p>The default is &amp;Safe{}, meaning check for errors and use the default
behavior for all fields.
</p><p>The safe.W parameter determines how many servers should confirm a write
before the operation is considered successful.  If set to 0 or 1, the
command will return as soon as the primary is done with the request.
If safe.WTimeout is greater than zero, it determines how many milliseconds
to wait for the safe.W servers to respond before returning an error.
</p><p>Starting with MongoDB 2.0.0 the safe.WMode parameter can be used instead
of W to request for richer semantics. If set to &#34;majority&#34; the server will
wait for a majority of members from the replica set to respond before
returning. Custom modes may also be defined within the server to create
very detailed placement schemas. See the data awareness documentation in
the links below for more details (note that MongoDB internally reuses the
&#34;w&#34; field name for WMode).
</p><p>If safe.J is true, servers will block until write operations have been
committed to the journal. Cannot be used in combination with FSync. Prior
to MongoDB 2.6 this option was ignored if the server was running without
journaling. Starting with MongoDB 2.6 write operations will fail with an
exception if this option is used when the server is running without
journaling.
</p><p>If safe.FSync is true and the server is running without journaling, blocks
until the server has synced all data files to disk. If the server is running
with journaling, this acts the same as the J option, blocking until write
operations have been committed to the journal. Cannot be used in
combination with J.
</p><p>Since MongoDB 2.0.0, the safe.J option can also be used instead of FSync
to force the server to wait for a group commit in case journaling is
enabled. The option has no effect if the server has journaling disabled.
</p><p>For example, the following statement will make the session check for
errors, without imposing further constraints:
</p><pre>session.SetSafe(&amp;mgo.Safe{})
</pre><p>The following statement will force the server to wait for a majority of
members of a replica set to return (MongoDB 2.0+ only):
</p><pre>session.SetSafe(&amp;mgo.Safe{WMode: &#34;majority&#34;})
</pre><p>The following statement, on the other hand, ensures that at least two
servers have flushed the change to disk before confirming the success
of operations:
</p><pre>session.EnsureSafe(&amp;mgo.Safe{W: 2, FSync: true})
</pre><p>The following statement, on the other hand, disables the verification
of errors entirely:
</p><pre>session.SetSafe(nil)
</pre><p>See also the EnsureSafe method.
</p><p>Relevant documentation:
</p><pre><a href="http://www.mongodb.org/display/DOCS/getLastError+Command">http://www.mongodb.org/display/DOCS/getLastError+Command</a>
<a href="http://www.mongodb.org/display/DOCS/Verifying+Propagation+of+Writes+with+getLastError">http://www.mongodb.org/display/DOCS/Verifying+Propagation+of+Writes+with+getLastError</a>
<a href="http://www.mongodb.org/display/DOCS/Data+Center+Awareness">http://www.mongodb.org/display/DOCS/Data+Center+Awareness</a>
</pre>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetSocketTimeout" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1717">SetSocketTimeout</a> <a class="Documentation-idLink" href="#Session.SetSocketTimeout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetSocketTimeout(d <a href="/time">time</a>.<a href="/time#Duration">Duration</a>)</pre>
    </div>
  <p>SetSocketTimeout sets the amount of time to wait for a non-responding
socket to the database before it is forcefully closed.
</p><p>The default timeout is 1 minute.
</p>

  

  </div><div class="Documentation-typeMethod">
    
  
  
    <h4 tabindex="-1" id="Session.SetSyncTimeout" data-kind="method" class="Documentation-typeMethodHeader">
      <span>func (*Session) <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L1707">SetSyncTimeout</a> <a class="Documentation-idLink" href="#Session.SetSyncTimeout">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func (s *<a href="#Session">Session</a>) SetSyncTimeout(d <a href="/time">time</a>.<a href="/time#Duration">Duration</a>)</pre>
    </div>
  <p>SetSyncTimeout sets the amount of time an operation with this session
will wait before returning an error in case a connection to a usable
server can&#39;t be established. Set it to zero to wait forever. The
default value is 7 seconds.
</p>

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="Stats" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/stats.go#L69">Stats</a> <a class="Documentation-idLink" href="#Stats">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type Stats struct {
<span id="Stats.Clusters" data-kind="field">	Clusters     <a href="/builtin#int">int</a>
</span><span id="Stats.MasterConns" data-kind="field">	MasterConns  <a href="/builtin#int">int</a>
</span><span id="Stats.SlaveConns" data-kind="field">	SlaveConns   <a href="/builtin#int">int</a>
</span><span id="Stats.SentOps" data-kind="field">	SentOps      <a href="/builtin#int">int</a>
</span><span id="Stats.ReceivedOps" data-kind="field">	ReceivedOps  <a href="/builtin#int">int</a>
</span><span id="Stats.ReceivedDocs" data-kind="field">	ReceivedDocs <a href="/builtin#int">int</a>
</span><span id="Stats.SocketsAlive" data-kind="field">	SocketsAlive <a href="/builtin#int">int</a>
</span><span id="Stats.SocketsInUse" data-kind="field">	SocketsInUse <a href="/builtin#int">int</a>
</span><span id="Stats.SocketRefs" data-kind="field">	SocketRefs   <a href="/builtin#int">int</a>
</span>}</pre>
    </div>
  
<div class="Documentation-typeFunc">
    
  
  
    <h4 tabindex="-1" id="GetStats" data-kind="function" class="Documentation-typeFuncHeader">
      <span>func <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/stats.go#L48">GetStats</a> <a class="Documentation-idLink" href="#GetStats">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>func GetStats() (snapshot <a href="#Stats">Stats</a>)</pre>
    </div>
  

  

  </div>
  

    </div><div class="Documentation-type">
      
  
  
    <h4 tabindex="-1" id="User" data-kind="type" class="Documentation-typeHeader">
      <span>type <a class="Documentation-source" href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go#L779">User</a> <a class="Documentation-idLink" href="#User">¶</a></span>
  <span class="Documentation-sinceVersion">
    
  </span>
</h4>

    
    <div class="Documentation-declaration">
      <pre>type User struct {
<span id="User.Username" data-kind="field">	<span class="comment">// Username is how the user identifies itself to the system.</span>
</span>	Username <a href="/builtin#string">string</a> `bson:&#34;user&#34;`

<span id="User.Password" data-kind="field">	<span class="comment">// Password is the plaintext password for the user. If set,</span>
</span>	<span class="comment">// the UpsertUser method will hash it into PasswordHash and</span>
	<span class="comment">// unset it before the user is added to the database.</span>
	Password <a href="/builtin#string">string</a> `bson:&#34;,omitempty&#34;`

<span id="User.PasswordHash" data-kind="field">	<span class="comment">// PasswordHash is the MD5 hash of Username+&#34;:mongo:&#34;+Password.</span>
</span>	PasswordHash <a href="/builtin#string">string</a> `bson:&#34;pwd,omitempty&#34;`

<span id="User.CustomData" data-kind="field">	<span class="comment">// CustomData holds arbitrary data admins decide to associate</span>
</span>	<span class="comment">// with this user, such as the full name or employee id.</span>
	CustomData interface{} `bson:&#34;customData,omitempty&#34;`

<span id="User.Roles" data-kind="field">	<span class="comment">// Roles indicates the set of roles the user will be provided.</span>
</span>	<span class="comment">// See the Role constants.</span>
	Roles []<a href="#Role">Role</a> `bson:&#34;roles&#34;`

<span id="User.OtherDBRoles" data-kind="field">	<span class="comment">// OtherDBRoles allows assigning roles in other databases from</span>
</span>	<span class="comment">// user documents inserted in the admin database. This field</span>
	<span class="comment">// only works in the admin database.</span>
	OtherDBRoles map[<a href="/builtin#string">string</a>][]<a href="#Role">Role</a> `bson:&#34;otherDBRoles,omitempty&#34;`

<span id="User.UserSource" data-kind="field">	<span class="comment">// UserSource indicates where to look for this user&#39;s credentials.</span>
</span>	<span class="comment">// It may be set to a database name, or to &#34;$external&#34; for</span>
	<span class="comment">// consulting an external resource such as Kerberos. UserSource</span>
	<span class="comment">// must not be set if Password or PasswordHash are present.</span>
	<span class="comment">//</span>
	<span class="comment">// WARNING: This setting was only ever supported in MongoDB 2.4,</span>
	<span class="comment">// and is now obsolete.</span>
	UserSource <a href="/builtin#string">string</a> `bson:&#34;userSource,omitempty&#34;`
}</pre>
    </div>
  <p>User represents a MongoDB user.
</p><p>Relevant documentation:
</p><pre><a href="http://docs.mongodb.org/manual/reference/privilege-documents/">http://docs.mongodb.org/manual/reference/privilege-documents/</a>
<a href="http://docs.mongodb.org/manual/reference/user-privileges/">http://docs.mongodb.org/manual/reference/user-privileges/</a>
</pre>

  

    </div></section></div> 




      
    </div>
  </div>

        
      
      
        
  <div class="UnitFiles js-unitFiles">
    <h2 class="UnitFiles-title" id="section-sourcefiles">
      <img class="go-Icon" height="24" width="24" src="/static/shared/icon/insert_drive_file_gm_grey_24dp.svg" alt="">
      Source Files
      <a class="UnitFiles-idLink" href="#section-sourcefiles">¶</a>
    </h2>
    <div class="UnitFiles-titleLink">
      <a href="https://github.com/go-mgo/mgo/tree/a6b53ec6cb22" target="_blank" rel="noopener">View all</a>
    </div>
    <div>
      <ul class="UnitFiles-fileList"><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/auth.go" target="_blank" rel="noopener" title="auth.go">auth.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/bulk.go" target="_blank" rel="noopener" title="bulk.go">bulk.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/cluster.go" target="_blank" rel="noopener" title="cluster.go">cluster.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/doc.go" target="_blank" rel="noopener" title="doc.go">doc.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/gridfs.go" target="_blank" rel="noopener" title="gridfs.go">gridfs.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/log.go" target="_blank" rel="noopener" title="log.go">log.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/queue.go" target="_blank" rel="noopener" title="queue.go">queue.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/raceoff.go" target="_blank" rel="noopener" title="raceoff.go">raceoff.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/saslstub.go" target="_blank" rel="noopener" title="saslstub.go">saslstub.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/server.go" target="_blank" rel="noopener" title="server.go">server.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/session.go" target="_blank" rel="noopener" title="session.go">session.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/socket.go" target="_blank" rel="noopener" title="socket.go">socket.go</a>
          </li><li>
            <a href="https://github.com/go-mgo/mgo/blob/a6b53ec6cb22/stats.go" target="_blank" rel="noopener" title="stats.go">stats.go</a>
          </li></ul>
    </div>
  </div>

      
      
        
  <div class="UnitDirectories js-unitDirectories">
    <h2 class="UnitDirectories-title" id="section-directories">
      <img class="go-Icon" height="24" width="24" src="/static/shared/icon/folder_gm_grey_24dp.svg" alt="">
      Directories
      <a class="UnitDirectories-idLink" href="#section-directories">¶</a>
    </h2>
    <div class="UnitDirectories-expandButton">
      <button class="js-expandAllDirectories" data-test-id="directories-toggle"
          data-gtmc="directories button" aria-label="Expand All Directories">
        Expand all
      </button>
    </div>
    <table class="UnitDirectories-table UnitDirectories-table--tree js-expandableTable"
          data-test-id="UnitDirectories-table">
      <tr class="UnitDirectories-tableHeader UnitDirectories-tableHeader--tree">
        <th>Path</th>
        <th class="UnitDirectories-desktopSynopsis">Synopsis</th>
      </tr>
      
          
  
  <tr>
    <td data-id="bson" data-aria-owns="">
      <div class="UnitDirectories-pathCell">
        <div><a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/bson">bson</a>
            
          </div>
          <div class="UnitDirectories-mobileSynopsis">Package bson is an implementation of the BSON specification for Go: http://bsonspec.org It was created as part of the mgo MongoDB driver for Go, but is standalone and may be used on its own without the driver.</div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis">Package bson is an implementation of the BSON specification for Go: http://bsonspec.org It was created as part of the mgo MongoDB driver for Go, but is standalone and may be used on its own without the driver.</td></tr></tr>

      
          
  
  <tr>
    <td data-id="dbtest" data-aria-owns="">
      <div class="UnitDirectories-pathCell">
        <div><a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/dbtest">dbtest</a>
            
          </div>
          <div class="UnitDirectories-mobileSynopsis"></div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis"></td></tr></tr>

      
          
  
  <tr>
    <td data-id="txn" data-aria-owns="">
      <div class="UnitDirectories-pathCell">
        <div><a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/txn">txn</a>
            
          </div>
          <div class="UnitDirectories-mobileSynopsis">The txn package implements support for multi-document transactions.</div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis">The txn package implements support for multi-document transactions.</td></tr></tr>

      
      
          
  
  <tr data-aria-controls="internal-json internal-sasl internal-scram ">
    <td data-id="internal" data-aria-owns="internal-json internal-sasl internal-scram ">
      <div class="UnitDirectories-pathCell">
        <div><button type="button" class="go-Button go-Button--inline UnitDirectories-toggleButton"
                aria-expanded="false"
                aria-label="3 more from"
                data-aria-controls="internal-json internal-sasl internal-scram "
                data-aria-labelledby="internal-button internal"
                data-id="internal-button">
              <img class="go-Icon" height="24" width="24" src="/static/shared/icon/arrow_right_gm_grey_24dp.svg"
                  alt="">
            </button><span>internal</span>
      </td>
      <td class="UnitDirectories-desktopSynopsis"></td></tr><tr data-id="internal-json">
      <td>
        <div class="UnitDirectories-subdirectory">
          <span>
            <a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/internal/json">json</a>
            
          </span>
          <div class="UnitDirectories-mobileSynopsis">Package json implements encoding and decoding of JSON as defined in RFC 4627.</div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis">Package json implements encoding and decoding of JSON as defined in RFC 4627.</td><tr data-id="internal-sasl">
      <td>
        <div class="UnitDirectories-subdirectory">
          <span>
            <a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/internal/sasl">sasl</a>
            
          </span>
          <div class="UnitDirectories-mobileSynopsis"></div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis"></td><tr data-id="internal-scram">
      <td>
        <div class="UnitDirectories-subdirectory">
          <span>
            <a href="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22/internal/scram">scram</a>
            
          </span>
          <div class="UnitDirectories-mobileSynopsis">Pacakage scram implements a SCRAM-{SHA-1,etc} client per RFC5802.</div>
        </div>
      </td>
      <td class="UnitDirectories-desktopSynopsis">Pacakage scram implements a SCRAM-{SHA-1,etc} client per RFC5802.</td></tr>

      
    </table>
  </div>

      
    </div>
  </div>
</article>
    <footer class="go-Main-footer"></footer>
  </main>

    
  <footer class="go-Footer">
    
    <div class="go-Footer-links">
      <div class="go-Footer-linkColumn">
        <a href="https://go.dev/solutions" class="go-Footer-link go-Footer-link--primary"
            data-gtmc="footer link">
          Why Go
        </a>
        <a href="https://go.dev/solutions#use-cases" class="go-Footer-link"
            data-gtmc="footer link">
          Use Cases
        </a>
        <a href="https://go.dev/solutions#case-studies" class="go-Footer-link"
            data-gtmc="footer link">
          Case Studies
        </a>
      </div>
      <div class="go-Footer-linkColumn">
        <a href="https://learn.go.dev/" class="go-Footer-link go-Footer-link--primary"
            data-gtmc="footer link">
          Get Started
        </a>
        <a href="https://play.golang.org" class="go-Footer-link" data-gtmc="footer link">
          Playground
        </a>
        <a href="https://tour.golang.org" class="go-Footer-link" data-gtmc="footer link">
          Tour
        </a>
        <a href="https://stackoverflow.com/questions/tagged/go?tab=Newest" class="go-Footer-link"
            data-gtmc="footer link">
          Stack Overflow
        </a>
        <a href="https://go.dev/help" class="go-Footer-link"
            data-gtmc="footer link">
          Help
        </a>
      </div>
      <div class="go-Footer-linkColumn">
        <a href="https://pkg.go.dev" class="go-Footer-link go-Footer-link--primary"
            data-gtmc="footer link">
          Packages
        </a>
        <a href="/std" class="go-Footer-link" data-gtmc="footer link">
          Standard Library
        </a>
      </div>
      <div class="go-Footer-linkColumn">
        <a href="https://go.dev/project" class="go-Footer-link go-Footer-link--primary"
            data-gtmc="footer link">
          About
        </a>
        <a href="https://go.dev/dl/" class="go-Footer-link" data-gtmc="footer link">Download</a>
        <a href="https://go.dev/blog" class="go-Footer-link" data-gtmc="footer link">Blog</a>
        <a href="https://github.com/golang/go/issues" class="go-Footer-link" data-gtmc="footer link">
          Issue Tracker
        </a>
        <a href="https://go.dev/doc/devel/release.html" class="go-Footer-link"
            data-gtmc="footer link">
          Release Notes
        </a>
        <a href="https://blog.golang.org/go-brand" class="go-Footer-link" data-gtmc="footer link">
          Brand Guidelines
        </a>
        <a href="https://go.dev/conduct" class="go-Footer-link" data-gtmc="footer link">
          Code of Conduct
        </a>
      </div>
      <div class="go-Footer-linkColumn">
        <a href="https://www.twitter.com/golang" class="go-Footer-link go-Footer-link--primary"
            data-gtmc="footer link">
          Connect
        </a>
        <a href="https://www.twitter.com/golang" class="go-Footer-link" data-gtmc="footer link">
          Twitter
        </a>
        <a href="https://github.com/golang" class="go-Footer-link" data-gtmc="footer link">GitHub</a>
        <a href="https://invite.slack.golangbridge.org/" class="go-Footer-link"
            data-gtmc="footer link">
          Slack
        </a>
        <a href="https://reddit.com/r/golang" class="go-Footer-link" data-gtmc="footer link">
          r/golang
        </a>
        <a href="https://www.meetup.com/pro/go" class="go-Footer-link" data-gtmc="footer link">
          Meetup
        </a>
        <a href="https://golangweekly.com/" class="go-Footer-link" data-gtmc="footer link">
          Golang Weekly
        </a>
      </div>
    </div>
    <div class="go-Footer-bottom">
      <img class="go-Footer-gopher"  width="1431" height="901"
          src="/static/shared/gopher/pilot-bust-1431x901.svg" alt="Gopher in flight goggles">
      <ul class="go-Footer-listRow">
        <li class="go-Footer-listItem">
          <a href="https://go.dev/copyright" data-gtmc="footer link">Copyright</a>
        </li>
        <li class="go-Footer-listItem">
          <a href="https://go.dev/tos" data-gtmc="footer link">Terms of Service</a>
        </li>
        <li class="go-Footer-listItem">
          <a href="http://www.google.com/intl/en/policies/privacy/" data-gtmc="footer link"
              target="_blank" rel="noopener">
            Privacy Policy
          </a>
        </li>
        <li class="go-Footer-listItem">
          <a href="https://go.dev/s/pkgsite-feedback" target="_blank" rel="noopener"
              data-gtmc="footer link">
            Report an Issue
          </a>
        </li>
        <li class="go-Footer-listItem">
          <button class="go-Button go-Button--text go-Footer-toggleTheme js-toggleTheme" aria-label="Toggle theme">
            <img data-value="auto" class="go-Icon go-Icon--inverted" height="24" width="24" src="/static/shared/icon/brightness_6_gm_grey_24dp.svg" alt="System theme">
            <img data-value="dark" class="go-Icon go-Icon--inverted" height="24" width="24" src="/static/shared/icon/brightness_2_gm_grey_24dp.svg" alt="Dark theme">
            <img data-value="light" class="go-Icon go-Icon--inverted" height="24" width="24" src="/static/shared/icon/light_mode_gm_grey_24dp.svg" alt="Light theme">
          </button>
          <button class="go-Button go-Button--text go-Footer-keyboard js-openShortcuts" aria-label="Open shorcuts modal">
            <img class="go-Icon go-Icon--inverted" height="24" width="24" src="/static/shared/icon/keyboard_grey_24dp.svg" alt="">
          </button>
        </li>
      </ul>
      <a class="go-Footer-googleLogo" href="https://google.com" target="_blank"rel="noopener"
          data-gtmc="footer link">
        <img class="go-Footer-googleLogoImg" height="24" width="72"
            src="/static/shared/logo/google-white.svg" alt="Google logo">
      </a>
    </div>
  </footer>

    
  <dialog id="jump-to-modal" class="JumpDialog go-Modal go-Modal--md js-modal">
    <form method="dialog" data-gmtc="jump to form" aria-label="Jump to Identifier">
      <div class="Dialog-title go-Modal-header">
        <h2>Jump to</h2>
        <button
          class="go-Button go-Button--inline"
          type="button"
          data-modal-close
          data-gtmc="modal button"
          aria-label="Close"
        >
          <img
            class="go-Icon"
            height="24"
            width="24"
            src="/static/shared/icon/close_gm_grey_24dp.svg"
            alt=""
          />
        </button>
      </div>
      <div class="JumpDialog-filter">
        <input class="JumpDialog-input go-Input" autocomplete="off" type="text">
      </div>
      <div class="JumpDialog-body go-Modal-body">
        <div class="JumpDialog-list"></div>
      </div>
      <div class="go-Modal-actions">
        <button class="go-Button" data-test-id="close-dialog">Close</button>
      </div>
    </form>
  </dialog>

  <dialog class="ShortcutsDialog go-Modal go-Modal--sm js-modal">
    <form method="dialog">
      <div class="go-Modal-header">
        <h2>Keyboard shortcuts</h2>
        <button
          class="go-Button go-Button--inline"
          type="button"
          data-modal-close
          data-gtmc="modal button"
          aria-label="Close"
        >
          <img
            class="go-Icon"
            height="24"
            width="24"
            src="/static/shared/icon/close_gm_grey_24dp.svg"
            alt=""
          />
        </button>
      </div>
      <div class="go-Modal-body">
        <table>
          <tbody>
            <tr><td class="ShortcutsDialog-key">
              <strong>?</strong></td><td> : This menu</td>
            </tr>
            <tr><td class="ShortcutsDialog-key">
              <strong>/</strong></td><td> : Search site</td>
            </tr>
            <tr><td class="ShortcutsDialog-key">
              <strong>f</strong> or <strong>F</strong></td><td> : Jump to</td>
            </tr>
            <tr>
              <td class="ShortcutsDialog-key"><strong>y</strong> or <strong>Y</strong></td>
              <td> : Canonical URL</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="go-Modal-actions">
        <button class="go-Button" data-test-id="close-dialog">Close</button>
      </div>
    </form>
  </dialog>

    
      <script>
        // this will throw if the querySelector can’t find the element
        const gtmId = document.querySelector('.js-gtmID').dataset.gtmid;
        if (!gtmId) {
          throw new Error('Google Tag Manager ID not found');
        }
        loadScript(`https://www.googletagmanager.com/gtm.js?id=${gtmId}`);
      </script>
      <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-W8MVQXG"
                height="0" width="0" style="display:none;visibility:hidden">
        </iframe>
      </noscript>
    
    
  
  <div class="js-canonicalURLPath" data-canonical-url-path="/gopkg.in/mgo.v2@v2.0.0-20190816093944-a6b53ec6cb22" hidden></div>
  <script>
    loadScript('/static/frontend/unit/main/main.js')
  </script>

  <script>
    loadScript('/static/frontend/unit/unit.js')
  </script>

  </body>
</html>