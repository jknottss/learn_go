1
00:00:00,000 --> 00:00:05,132
[БЕЗ_ЗВУКА] В этом

2
00:00:05,132 --> 00:00:11,131
видео мы рассмотрим, какие еще
инструменты Go предоставляет для того,

3
00:00:11,131 --> 00:00:14,050
чтобы ваш код был красивым
и поддерживаемым.

4
00:00:14,050 --> 00:00:17,230
Начнем с инструмента,
который называется go vet.

5
00:00:17,230 --> 00:00:21,277
Если вы пользуетесь Visual Studio Code,

6
00:00:21,277 --> 00:00:25,593
то у него сразу много
инструментов есть из коробки,

7
00:00:25,593 --> 00:00:35,190
и вы могли видеть в своем коде довольно
много подчеркиваний зеленых, красных.

8
00:00:35,190 --> 00:00:37,647
Каким образом они получаются?

9
00:00:37,647 --> 00:00:41,840
Какой инструмент генерирует
такого рода подсказки?

10
00:00:41,840 --> 00:00:47,220
Рассмотрим этот код.

11
00:00:47,220 --> 00:00:50,280
Тут вроде бы не так много кодов,
вроде бы ошибок нет.

12
00:00:50,280 --> 00:00:52,460
Он даже компилируется, я проверял.

13
00:00:52,460 --> 00:00:55,318
Однако подсветки,

14
00:00:55,318 --> 00:01:00,999
что есть какая-то ошибка,
пусть даже зеленые, все равно есть.

15
00:01:00,999 --> 00:01:05,570
Давайте запустим встроенный инструмент,
который называется go vet,

16
00:01:05,570 --> 00:01:09,975
и посмотрим, на какие ошибки он ругается.

17
00:01:09,975 --> 00:01:15,108
Итак, go vet и наш файл — vet_example.go.

18
00:01:15,108 --> 00:01:20,078
Обратите внимание, у нас небольшой файл,

19
00:01:20,078 --> 00:01:25,240
но тем не менее я умудрился
сделать в нем три ошибки.

20
00:01:25,240 --> 00:01:31,220
Первая — на 9-й строчке
результат не использован.

21
00:01:31,220 --> 00:01:36,330
То есть я тут просто

22
00:01:36,330 --> 00:01:41,051
вызвал функцию, но никуда не присвоил
этот результат и не вывел его.

23
00:01:41,051 --> 00:01:47,178
Очевидно, что ошибка в том,
что я хотел здесь написать return.

24
00:01:47,178 --> 00:01:48,210
Return.

25
00:01:48,210 --> 00:01:53,848
Вторая ошибка — не указана
опция форматирования в Printf.

26
00:01:53,848 --> 00:02:00,897
Printf — это все-таки
форматированный ввод,

27
00:02:00,897 --> 00:02:03,661
то есть я там должен указать
какие-то переменные, чтобы вызвать.

28
00:02:03,661 --> 00:02:04,720
У меня здесь никаких нет.

29
00:02:04,720 --> 00:02:08,820
При этом я какие-то
переменные туда передал.

30
00:02:08,820 --> 00:02:11,391
Вот он именно на это и ругается.

31
00:02:11,391 --> 00:02:12,920
Давайте добавим.

32
00:02:12,920 --> 00:02:15,342
Стало хорошо, уже лучше.

33
00:02:15,342 --> 00:02:21,246
И еще он ругается на то, что пропущен
аргумент — в Printf ожидается два,

34
00:02:21,246 --> 00:02:23,570
а передается всего лишь один.

35
00:02:23,570 --> 00:02:27,713
То есть для этой переменной
я ничего не передаю.

36
00:02:27,713 --> 00:02:29,740
Давайте это исправим.

37
00:02:29,740 --> 00:02:33,985
Result.

38
00:02:33,985 --> 00:02:36,571
Теперь стало гораздо лучше.

39
00:02:36,571 --> 00:02:38,230
Запустим еще раз.

40
00:02:38,230 --> 00:02:42,110
И теперь у меня никаких
ошибок не возникает.

41
00:02:42,110 --> 00:02:45,614
То есть go vet — это
встроенный в Go инструмент,

42
00:02:45,614 --> 00:02:49,380
который позволяет находить
такие простые ошибки.

43
00:02:49,380 --> 00:02:52,500
То есть это инструмент
статического анализа.

44
00:02:52,500 --> 00:03:00,010
Он не копает очень глубоко,
но всякую мелочь он при этом замечает.

45
00:03:00,010 --> 00:03:03,765
Что делать, если хочется больше ошибок?

46
00:03:03,765 --> 00:03:06,072
Рассмотрим второй код.

47
00:03:06,072 --> 00:03:09,620
Тут уже гораздо больше подсвечено.

48
00:03:09,620 --> 00:03:13,841
Запустим на него второй инструмент,
который мы рассмотрим.

49
00:03:13,841 --> 00:03:15,760
Называется gometalinter.

50
00:03:15,760 --> 00:03:21,680
Gometalinter metalinter_example.go.

51
00:03:21,680 --> 00:03:24,061
И поехали.

52
00:03:24,061 --> 00:03:28,350
Целый экран ошибок.

53
00:03:28,350 --> 00:03:34,794
На коде в 24 строчки у
меня целый экран ошибок.

54
00:03:34,794 --> 00:03:35,512
Почему?

55
00:03:35,512 --> 00:03:37,306
Что это за инструмент?

56
00:03:37,306 --> 00:03:39,560
Какие параметры он смотрит?

57
00:03:39,560 --> 00:03:43,924
Gometalinter — это инструмент,

58
00:03:43,924 --> 00:03:49,473
который объединяет в себе
другие статические анализаторы.

59
00:03:49,473 --> 00:03:53,410
Вот список линтеров,
которые в нем поддерживаются,

60
00:03:53,410 --> 00:03:56,870
то есть довольно внушительный список.

61
00:03:56,870 --> 00:03:59,161
Я не буду останавливаться на каждом.

62
00:03:59,161 --> 00:04:01,960
Расскажу про те ошибки,
которые у меня есть.

63
00:04:01,960 --> 00:04:07,070
Итак, во-первых, он говорит,
что, если вы делаете

64
00:04:07,070 --> 00:04:11,364
экспортируемые структуры и, вообще,
экспортируемые функции, переменные,

65
00:04:11,364 --> 00:04:16,346
константы, то будьте добры, напишите,
пожалуйста, комментарий к ним — зачем,

66
00:04:16,346 --> 00:04:20,798
зачем эта структура нужна, что она делает,
что эта функция возвращает.

67
00:04:20,798 --> 00:04:25,617
Дело в том, что документация в Go как
раз строится по этим комментариям.

68
00:04:25,617 --> 00:04:31,039
И если у вас будет строго написание
с этим, то все будет хорошо.

69
00:04:31,039 --> 00:04:32,780
Давайте добавим.

70
00:04:32,780 --> 00:04:42,040
[БЕЗ_ЗВУКА] Gometalinter example.

71
00:04:42,040 --> 00:04:43,385
Хорошо.

72
00:04:43,385 --> 00:04:49,555
Далее, не используйте underscore
в именах переменных Go.

73
00:04:49,555 --> 00:04:53,000
Дело в том,
что в Go принят стиль CamelCase,

74
00:04:53,000 --> 00:04:55,647
то есть не используется
символ подчеркивания.

75
00:04:55,647 --> 00:04:59,980
И он даже подсказывает, что user_id,
должен быть, на самом деле, userID.

76
00:04:59,980 --> 00:05:04,970
То есть вот так — ID.

77
00:05:04,970 --> 00:05:06,774
Хорошо.

78
00:05:06,774 --> 00:05:10,160
Смотрим дальше.

79
00:05:10,160 --> 00:05:11,442
Он следит за тем,

80
00:05:11,442 --> 00:05:15,934
чтобы всякие общего рода сокращения
были записаны в верхнем регистре.

81
00:05:15,934 --> 00:05:18,462
Например, Json чтобы был
тоже в верхнем регистре.

82
00:05:18,462 --> 00:05:19,040
Исправим.

83
00:05:19,040 --> 00:05:20,927
JSON.

84
00:05:20,927 --> 00:05:27,670
Далее, опять просят ввести
комментарий к функции.

85
00:05:27,670 --> 00:05:35,740
И он сразу же ругается на underscore,
поэтому я напишу и поправлю и underscore.

86
00:05:35,740 --> 00:05:41,380
As example.

87
00:05:41,380 --> 00:05:43,112
Посмотрим.

88
00:05:43,112 --> 00:05:45,160
Стало меньше.

89
00:05:45,160 --> 00:05:45,784
Окей.

90
00:05:45,784 --> 00:05:46,408
isOk.

91
00:05:46,408 --> 00:05:50,570
Опять функция Test должна
иметь комментарий.

92
00:05:50,570 --> 00:05:57,748
Test used as example.

93
00:05:57,748 --> 00:06:03,620
Теперь у меня нет функции Test_error,

94
00:06:03,620 --> 00:06:08,810
а is_ok должен быть isOK.

95
00:06:08,810 --> 00:06:13,130
Так, посмотрим, что дальше.

96
00:06:13,130 --> 00:06:16,447
Результат Printf нигде не использован.

97
00:06:16,447 --> 00:06:17,813
Это go vet ругается.

98
00:06:17,813 --> 00:06:18,959
Нет форматирования.

99
00:06:18,959 --> 00:06:20,525
Это то, что мы уже поправили.

100
00:06:20,525 --> 00:06:21,980
И еще одна строчка на go vet.

101
00:06:21,980 --> 00:06:25,630
Так, isOK добавляем сюда.

102
00:06:25,630 --> 00:06:27,532
Пишем return.

103
00:06:27,532 --> 00:06:31,780
У нас уже половина кода зеленого.

104
00:06:31,780 --> 00:06:34,699
Тут написано Test.

105
00:06:34,699 --> 00:06:40,469
Я не обрабатываю ошибку,
то есть он даже следит за тем,

106
00:06:40,469 --> 00:06:44,700
обрабатывается ли ошибка,
идет ли if следом за этим случаем.

107
00:06:44,700 --> 00:06:49,070
Не равно nil.

108
00:06:49,070 --> 00:06:54,560
Result.

109
00:06:54,560 --> 00:07:00,050
Опция форматирования и еще что-то.

110
00:07:00,050 --> 00:07:05,280
Теперь наш код наконец-таки
стал зеленым полностью.

111
00:07:05,280 --> 00:07:11,030
Давайте запустим еще раз.

112
00:07:11,030 --> 00:07:16,780
К сожалению, неиспользуемый код я уже
проверять, удалять здесь не буду.

113
00:07:16,780 --> 00:07:19,690
Но тем не менее, смотрите,

114
00:07:19,690 --> 00:07:25,210
какой объем вроде бы незначительных
вещей нашел этот инструмент.

115
00:07:25,210 --> 00:07:29,127
Если прикрутить его в
очень жестких параметрах,

116
00:07:29,127 --> 00:07:34,348
сразу объявить тиранию на get push,
либо же в ваш инструмент

117
00:07:34,348 --> 00:07:39,825
для непрерывной интеграции и не
разрешать коммитить даже с кодом,

118
00:07:39,825 --> 00:07:45,533
который не проходит те проверки, которые
вы выбрали, то поначалу будет тяжело,

119
00:07:45,533 --> 00:07:49,490
но через какое-то время ваш код
будет полностью документирован,

120
00:07:49,490 --> 00:07:53,730
вы будете автоматически
находить мелкие ошибки.

121
00:07:53,730 --> 00:07:58,790
И в целом поддерживаемость
очень увеличится.

122
00:07:58,790 --> 00:08:02,277
Я очень рекомендую вам начинать,
собственно,

123
00:08:02,277 --> 00:08:07,185
разработку в Go с того,
чтобы вкрутить этот инструмент и всегда

124
00:08:07,185 --> 00:08:11,994
соблюдать те требования,
которые он говорит.

125
00:08:11,994 --> 00:08:18,306
Может быть, не все, может быть, какие-то
опции вам покажутся слишком жесткими.

126
00:08:18,306 --> 00:08:23,836
Но, например, писать комментарий и
обрабатывать все ошибки и чтобы он не

127
00:08:23,836 --> 00:08:29,070
ругался на underscore — это
считается очень хорошей практикой.