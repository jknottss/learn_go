1
00:00:00,000 --> 00:00:04,765
[БЕЗ_ЗВУКА] В

2
00:00:04,765 --> 00:00:09,360
этом видео мы поговорим про
конфигурирование вашего сервиса.

3
00:00:09,360 --> 00:00:12,214
Начнем со стандартного пакета flag.

4
00:00:12,214 --> 00:00:16,860
Пакет flag нужен для парсинга
аргументов командной строки,

5
00:00:16,860 --> 00:00:22,676
там есть довольно много
заготовленных типов.

6
00:00:22,676 --> 00:00:28,420
Например, вот в этой
строчке я в commentsEnabled

7
00:00:28,420 --> 00:00:34,989
буду парсить булевую переменную, причем
парситься будет не только true и false,

8
00:00:34,989 --> 00:00:39,037
но и t, f, маленькими,
большими буквами, 0 и 1.

9
00:00:39,037 --> 00:00:46,841
Возвращает эта функция
адрес на переменную.

10
00:00:46,841 --> 00:00:51,780
Там мы указываем имя, которое мы хотим
использовать из аргументов командной

11
00:00:51,780 --> 00:00:58,811
строки, значение по умолчанию и
комментарий на случай, если вдруг там

12
00:00:58,811 --> 00:01:03,950
встретится какая-то ошибка и нам выведется
полный список того, что можно парсить.

13
00:01:03,950 --> 00:01:09,480
Int тоже со значением по умолчанию,
там есть String и еще некоторые значения.

14
00:01:09,480 --> 00:01:16,083
Если же вы хотите парсить свой тип,
то вы можете объявить его.

15
00:01:16,083 --> 00:01:21,231
Например, у меня есть тип AddrList,
вот как он объявляется.

16
00:01:21,231 --> 00:01:25,558
Это всего лишь слайс стрингов,
но я навесил на него две функции,

17
00:01:25,558 --> 00:01:28,229
для того чтобы он
соответствовал интерфейсу.

18
00:01:28,229 --> 00:01:32,854
Первая функция String для дампа значений,
вторая функция — Set,

19
00:01:32,854 --> 00:01:37,980
которая непосредственно устанавливает
значения в эту переменную.

20
00:01:37,980 --> 00:01:46,316
Тут я разбиваю строку по запятой и ожидаю
увидеть там адрес, то есть IP и порт.

21
00:01:46,316 --> 00:01:50,550
Если его нет либо он не валиден,
я верну ошибку.

22
00:01:50,550 --> 00:01:54,510
И в конце я добавляю в общий список это.

23
00:01:54,510 --> 00:01:59,060
Таким образом,
вы можете устанавливать собственные типы и

24
00:01:59,060 --> 00:02:03,590
парсить в том виде,
в котором вам это нужно.

25
00:02:03,590 --> 00:02:09,666
Для того чтобы спарсить
если стандартные типы можно

26
00:02:09,666 --> 00:02:14,523
сразу получить значения, то произвольный
тип — вам нужно сначала объявить это

27
00:02:14,523 --> 00:02:18,260
значение в отдельную переменную,
а потом вызвать функцию flag.Var.

28
00:02:18,260 --> 00:02:23,271
Это нужно для того,
чтобы вы зарегистрировали

29
00:02:23,271 --> 00:02:27,535
парсинги для этой переменной,
чтобы пакет знал,

30
00:02:27,535 --> 00:02:33,589
что нужно парсить в нее, потому что он
не умеет возвращать нужный вам тип.

31
00:02:33,589 --> 00:02:39,121
В данном случае я объявляю переменную
commentsServices и в init указываю,

32
00:02:39,121 --> 00:02:40,800
что спарсить нужно туда.

33
00:02:40,800 --> 00:02:45,240
init выполняется до функции main.

34
00:02:45,240 --> 00:02:49,870
Есть небольшой нюанс, который иногда,
бывает, встречается у начинающих

35
00:02:49,870 --> 00:02:54,500
разработчиков, что в init пытается
где-то подключение какой-то базы данных,

36
00:02:54,500 --> 00:03:00,850
причем аргументы, куда подключаться,
передаются, парсятся через пакет flag.

37
00:03:00,850 --> 00:03:05,567
Дело в том, что до вот этой
строчки — flag.Parse — у вас будут

38
00:03:05,567 --> 00:03:09,619
значения по умолчанию во всех переменных,
которые вы указали во flag.

39
00:03:09,619 --> 00:03:13,996
И в произвольных типах, соответственно,
будет то, что вы здесь объявили,

40
00:03:13,996 --> 00:03:16,070
в данном случае пустая переменная.

41
00:03:16,070 --> 00:03:20,705
Поэтому в init не пользуйтесь
такими переменными,

42
00:03:20,705 --> 00:03:25,340
они реально спарсятся только после того,
как вы вызвали flag.Parse.

43
00:03:25,340 --> 00:03:29,790
Также особо отмечу на
наличие дефолтных значений.

44
00:03:29,790 --> 00:03:35,530
Иногда для небулевых переменных это очень,
очень, очень удобно.

45
00:03:35,530 --> 00:03:40,291
Следующим подходом к парсингу

46
00:03:40,291 --> 00:03:45,875
конфига является указание
одной большой структуры и,

47
00:03:45,875 --> 00:03:50,249
например, парсинг туда значений из json,
или yaml,

48
00:03:50,249 --> 00:03:53,880
toml, ini, xml — откуда угодно.

49
00:03:53,880 --> 00:03:57,707
Этот подход имеет право
на жизнь в том случае,

50
00:03:57,707 --> 00:04:02,738
если ваша программа умещается
в один файл и нет никаких

51
00:04:02,738 --> 00:04:06,930
других пакетов, других файлов.

52
00:04:06,930 --> 00:04:07,744
Почему?

53
00:04:07,744 --> 00:04:12,854
Потому что если у вас есть другие пакеты,
то сразу же ваш пакет

54
00:04:12,854 --> 00:04:18,466
начинает зависеть не только от самого
себя, но и от какого-то внешнего пакета,

55
00:04:18,466 --> 00:04:22,998
и логика, получается,
размазывается по нескольким пакетам.

56
00:04:22,998 --> 00:04:26,617
Там config, здесь логика,
здесь нужно распарсить, не забыть,

57
00:04:26,617 --> 00:04:30,192
добавить — это неудобно,
и так не надо делать.

58
00:04:30,192 --> 00:04:35,807
Однако если же, повторюсь,
у вас всего один файл, то почему бы и нет.

59
00:04:35,807 --> 00:04:38,107
Единственный минус такого подхода — в том,

60
00:04:38,107 --> 00:04:40,480
что здесь нет никаких
значений по умолчанию.

61
00:04:40,480 --> 00:04:45,660
Поэтому в случае,
если с флагами я не указываю,

62
00:04:45,660 --> 00:04:48,872
вот здесь, я не указываю limit,
параметр limit,

63
00:04:48,872 --> 00:04:53,520
он у меня возьмется по умолчанию,
значение по умолчанию, то есть 10.

64
00:04:53,520 --> 00:04:58,770
В этом случае — вот мой json —
параметра limit у меня нету, поэтому

65
00:04:58,770 --> 00:05:03,700
подставится то значение, которое является
значением по умолчанию для данного типа.

66
00:05:03,700 --> 00:05:06,550
У меня это int,
то есть туда подставится 0.

67
00:05:06,550 --> 00:05:10,170
Поэтому если хотите значение по умолчанию,

68
00:05:10,170 --> 00:05:15,379
в этом случае вам придется либо
использовать какую-то другую библиотеку,

69
00:05:15,379 --> 00:05:22,640
которая может парсить [НЕРАЗБОРЧИВО],
либо устанавливать их руками.

70
00:05:22,640 --> 00:05:27,680
И еще одним нюансом при конфигурировании

71
00:05:27,680 --> 00:05:33,570
ваших пакетов может быть желание

72
00:05:33,570 --> 00:05:38,136
при сборке указать какие-то значения,

73
00:05:38,136 --> 00:05:42,205
которые будут для вашего
бинарника постоянными.

74
00:05:42,205 --> 00:05:45,351
Это не совсем конфигурирование приложения,

75
00:05:45,351 --> 00:05:51,160
однако это часто встречающийся нюанс,
который стоит знать.

76
00:05:51,160 --> 00:05:54,344
В Go есть параметр ldflags,

77
00:05:54,344 --> 00:05:59,683
параметр к сборщику,
и там можно указать значение переменной,

78
00:05:59,683 --> 00:06:03,972
которую вы хотите
установить при компиляции.

79
00:06:03,972 --> 00:06:08,502
Там нужно указать пакет и,
собственно, имя переменной.

80
00:06:08,502 --> 00:06:10,660
Имя переменной должно иметь тип String.

81
00:06:10,660 --> 00:06:15,972
Если вы хотите указать полный путь,
соответственно, у вас

82
00:06:15,972 --> 00:06:23,320
будет что-то вроде github.com/

83
00:06:23,320 --> 00:06:28,600
что-то такое.

84
00:06:28,600 --> 00:06:30,351
Такое тоже может быть.

85
00:06:30,351 --> 00:06:31,928
А, имя переменной.

86
00:06:31,928 --> 00:06:33,250
Вот как-то так.

87
00:06:33,250 --> 00:06:36,520
Давайте попробуем, это запустим.

88
00:06:36,520 --> 00:06:40,600
Да, флаги.

89
00:06:40,600 --> 00:06:45,303
Вот распарсились флаги мои,
Comments per page 10,

90
00:06:45,303 --> 00:06:48,709
значение по умолчанию,
services распарсились.

91
00:06:48,709 --> 00:06:53,516
Сейчас если я вдруг уберу порт,
то мне выведется помощь,

92
00:06:53,516 --> 00:06:56,430
что ваш config неправильный.

93
00:06:56,430 --> 00:06:59,743
Вот почему: плохой адрес.

94
00:06:59,743 --> 00:07:02,719
Не распарсили, не указан порт.

95
00:07:02,719 --> 00:07:09,340
И, соответственно, все доступные
опции: comments, limit и servers.

96
00:07:09,340 --> 00:07:13,234
Соответственно, это довольно
удобно при конфигурировании.

97
00:07:13,234 --> 00:07:20,553
Теперь ldflags, теперь json, json.

98
00:07:20,553 --> 00:07:25,350
Вот обратите внимание:
Comments per page 0,

99
00:07:25,350 --> 00:07:30,070
в то время как для флагов — это 10.

100
00:07:30,070 --> 00:07:33,152
0 — потому что значение по умолчанию.

101
00:07:33,152 --> 00:07:34,790
Ну и теперь ldflags.

102
00:07:34,790 --> 00:07:36,690
Отлично.

103
00:07:36,690 --> 00:07:40,280
Еще раз покажу код.

104
00:07:40,280 --> 00:07:45,815
Version и Branch указаны пустые,
тут нет никаких значений,

105
00:07:45,815 --> 00:07:50,241
однако при сборке я указывал
ldfalgs main.Version,

106
00:07:50,241 --> 00:07:54,086
и значение из git прямо,
и Branch — тоже значение из git.

107
00:07:54,086 --> 00:07:57,771
Таким образом, всегда когда мое
приложение будет стартовать,

108
00:07:57,771 --> 00:08:02,770
я буду знать,
из какого хеша оно было собрано.

109
00:08:02,770 --> 00:08:06,960
Таким образом, я могу всегда знать
не только версию пакета, например,

110
00:08:06,960 --> 00:08:11,250
а и версия приложения, именно версия,

111
00:08:11,250 --> 00:08:16,050
которая лежит в системе контроля версия —
она прямо зашита будет сразу в бинарник.

112
00:08:16,050 --> 00:08:19,862
Это очень удобно и хорошо.

113
00:08:19,862 --> 00:08:24,613
Далее мы рассмотрим, каким образом можно

114
00:08:24,613 --> 00:08:29,980
сделать онлайн-конфигурирование сервиса,
используя Consul.