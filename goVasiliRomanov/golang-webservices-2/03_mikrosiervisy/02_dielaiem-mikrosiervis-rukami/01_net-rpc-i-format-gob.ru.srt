1
00:00:00,000 --> 00:00:09,588
[БЕЗ_ЗВУКА] В предыдущем видео мы
немножко порефакторили наш код так,

2
00:00:09,588 --> 00:00:12,430
что у нас получился модуль
для работы с сессиями.

3
00:00:12,430 --> 00:00:17,890
В этом видео мы рассмотрим, каким образом
можно вынести его в отдельный микросервис.

4
00:00:17,890 --> 00:00:25,510
Очень часто микросервисы основаны на
подходе RPC — Remote Procedure Call.

5
00:00:25,510 --> 00:00:29,317
По-русски это значит
«удалённый вызов процедур».

6
00:00:29,317 --> 00:00:34,391
Этот подход отличается тем,
что код оформляется так, что вы

7
00:00:34,391 --> 00:00:39,767
вызываете какую-то удалённую процедуру
так, словно она какая-то локальная.

8
00:00:39,767 --> 00:00:45,730
То есть есть какая-то обёртка
над вызовом удалённого метода.

9
00:00:45,730 --> 00:00:50,380
То есть если вы просто дёргаете какую-то
апишку и потом руками всё там парсите

10
00:00:50,380 --> 00:00:54,919
каждый раз, это близко, но не совсем то.

11
00:00:54,919 --> 00:00:57,665
RPC — это просто дёргает методы.

12
00:00:57,665 --> 00:01:01,240
В данном примере мы рассмотрим
модуль стандартной библиотеки,

13
00:01:01,240 --> 00:01:03,000
который называется net/rpc.

14
00:01:03,000 --> 00:01:06,458
Он достаточно беден по
функционалу; пожалуй,

15
00:01:06,458 --> 00:01:10,770
я не буду рекомендовать вам
его использовать в продакшене.

16
00:01:10,770 --> 00:01:14,340
Однако для учебных целей
в начале он нам подойдёт.

17
00:01:14,340 --> 00:01:17,600
Рассмотрим этот код.

18
00:01:17,600 --> 00:01:21,730
Мы получаем менеджер сессии,
как в прошлый раз.

19
00:01:21,730 --> 00:01:29,680
Теперь в модуле RPC мы регистрируем
нашу структуру для управления сессиями.

20
00:01:29,680 --> 00:01:35,960
Говорим модулю, что давай,
начинай обрабатывать http,

21
00:01:35,960 --> 00:01:39,294
слушаем порт и всё.

22
00:01:39,294 --> 00:01:43,817
В общем-то, вот почти готов микросервис,

23
00:01:43,817 --> 00:01:46,700
то есть сейчас его можно
запустить и обращаться.

24
00:01:46,700 --> 00:01:50,312
Всё было бы очень замечательно,

25
00:01:50,312 --> 00:01:55,474
но net/rpc требует небольших правок

26
00:01:55,474 --> 00:01:59,730
в организации методов; я расскажу, каких.

27
00:01:59,730 --> 00:02:05,114
Если раньше (вот, например,
метод Create), собственно,

28
00:02:05,114 --> 00:02:10,704
наша основная структура и
получение экземпляра структуры,

29
00:02:10,704 --> 00:02:14,020
они остались как раньше,
там по-прежнему Mutex сессии, всё.

30
00:02:14,020 --> 00:02:16,150
Итак, модуль Create.

31
00:02:16,150 --> 00:02:21,374
Если вы помните,
раньше мы возвращали по-другому;

32
00:02:21,374 --> 00:02:28,360
раньше у нас был один параметр,

33
00:02:28,360 --> 00:02:33,240
и мы возвращали несколько
результатов исходящих.

34
00:02:33,240 --> 00:02:37,256
Вот так это примерно выглядело.

35
00:02:37,256 --> 00:02:42,256
Сейчас нам пришлось изменить наши методы,

36
00:02:42,256 --> 00:02:47,110
потому что модуль net/rpc требует,
чтобы у нас было ровно два параметра.

37
00:02:47,110 --> 00:02:51,470
Первый параметр — с входящими
аргументами функции,

38
00:02:51,470 --> 00:02:58,070
а второй — это адрес,
куда запишется результат.

39
00:02:58,070 --> 00:03:01,690
Поэтому всё-таки немножко
есть отличия в методах.

40
00:03:01,690 --> 00:03:05,764
Но идеологически более-менее всё осталось.

41
00:03:05,764 --> 00:03:07,145
Итак, Create.

42
00:03:07,145 --> 00:03:13,014
То есть я по-прежнему получаю и потом
записываю туда, куда у нас было.

43
00:03:13,014 --> 00:03:18,860
То же самое с Check: тоже потом
записываю результат в эту переменную.

44
00:03:18,860 --> 00:03:23,743
И для out'а я тоже сделал заглушку,
чтобы тоже записывать результат.

45
00:03:23,743 --> 00:03:25,675
Всё.
То есть у нас, в общем-то,

46
00:03:25,675 --> 00:03:29,440
микросервис наш готов буквально
минимальными абсолютно правками.

47
00:03:29,440 --> 00:03:33,960
Теперь каким-то образом нужно его вызвать.

48
00:03:33,960 --> 00:03:41,089
Посмотрим модуль сессии,
который остался в клиентской части.

49
00:03:41,089 --> 00:03:46,090
У нас по-прежнему есть
интерфейс SessionManager'а,

50
00:03:46,090 --> 00:03:49,618
у которого указывают нужные
нам методы: он не менялся.

51
00:03:49,618 --> 00:03:53,230
Однако сама структура теперь
уже претерпела изменения.

52
00:03:53,230 --> 00:03:57,740
Раньше там было уже хранилище сессии,
а теперь — ссылка на rpc.Client.

53
00:03:57,740 --> 00:04:02,772
В функции получения менеджера

54
00:04:02,772 --> 00:04:07,446
мы соединяемся с удалённым сервером,

55
00:04:07,446 --> 00:04:13,070
и уже клиента возвращаем;
то есть клиент поменялся.

56
00:04:13,070 --> 00:04:15,284
Соответственно, поменялись функции,

57
00:04:15,284 --> 00:04:18,200
через которые мы обращаемся
к удалённым процедурам.

58
00:04:18,200 --> 00:04:23,084
Теперь это выглядит вот так; раньше
в этом месте мы шли в мапку и

59
00:04:23,084 --> 00:04:28,251
чего-то там проверяли, теперь нам нужно
сначала создать переменную, в которую

60
00:04:28,251 --> 00:04:33,367
запишется результат, если он будет;
и потом вызвать удалённую процедуру.

61
00:04:33,367 --> 00:04:37,599
То есть SessionManager —
это как раз та структура.

62
00:04:37,599 --> 00:04:40,500
Я вам покажу SessionManager.

63
00:04:40,500 --> 00:04:44,841
Вот SessionManager,
который я зарегистрировал в обработчике,

64
00:04:44,841 --> 00:04:48,700
и метод Create,
который вызовется на той стороне.

65
00:04:48,700 --> 00:04:55,770
Туда я передаю входящие параметры и
указываю, куда записать результат.

66
00:04:55,770 --> 00:05:01,260
То же самое для проверки и для удаления.

67
00:05:01,260 --> 00:05:02,110
Вот.

68
00:05:02,110 --> 00:05:08,240
То есть нам пришлось внести небольшие
изменения в сигнатуры наших методов,

69
00:05:08,240 --> 00:05:13,250
чтобы они поддерживались
библиотекой net/rpc, и пришлось

70
00:05:13,250 --> 00:05:18,380
сделать реализацию для вызова удалённых
процедур в клиентской части библиотеки.

71
00:05:18,380 --> 00:05:24,320
При этом сам клиентский код для работы
с сессиями, он абсолютно не поменялся.

72
00:05:24,320 --> 00:05:25,070
Так.

73
00:05:25,070 --> 00:05:29,120
Для начала мы запустим сервер.

74
00:05:29,120 --> 00:05:33,871
[БЕЗ_ЗВУКА] Теперь мы

75
00:05:33,871 --> 00:05:38,880
запустим клиент и видим, что, в общем-то,
результат особо не изменился.

76
00:05:38,880 --> 00:05:45,007
[БЕЗ_ЗВУКА] Net/rpc

77
00:05:45,007 --> 00:05:50,504
работает на основе формата Go; это
встроенный формат сериализации языка Go.

78
00:05:50,504 --> 00:05:55,450
Он не очень популярен; я не буду
останавливаться на том, как он работает.

79
00:05:55,450 --> 00:06:01,773
Далее я рассмотрю вариацию модуля net/rpc,

80
00:06:01,773 --> 00:06:07,320
которая называется JSON-RPC и
оперирует уже форматом json.