1
00:00:00,000 --> 00:00:07,036
[БЕЗ_ЗВУКА] В начале был монолит.

2
00:00:07,036 --> 00:00:10,310
Потом этот монолит разбили на модули,

3
00:00:10,310 --> 00:00:16,368
которые стали автономными кусками
программы, и после чего пришел XXI век,

4
00:00:16,368 --> 00:00:22,480
появился паттерн микросервисов,
и эти модули вынесли в микросервисы.

5
00:00:22,480 --> 00:00:26,753
И в этом видео мы как
раз об этом поговорим.

6
00:00:26,753 --> 00:00:32,548
Про то, как немножко разбить
старый код на отдельный сервис.

7
00:00:32,548 --> 00:00:34,683
Рассмотрим эту страницу.

8
00:00:34,683 --> 00:00:38,500
В ней мы видим логин и пароль,
поля для их ввода.

9
00:00:38,500 --> 00:00:41,037
Давайте введем.

10
00:00:41,037 --> 00:00:44,590
rvasily и пароль любой.

11
00:00:44,590 --> 00:00:50,636
И вот мне написало, что «здравствуйте,
rvasily», тот username,

12
00:00:50,636 --> 00:00:55,110
который я ввел, и user agent, который
был на момент создания моей сессии.

13
00:00:55,110 --> 00:01:00,276
То есть если я обновлю страницу,
моя сессия тут уже заполнена.

14
00:01:00,276 --> 00:01:02,770
Ну и у меня есть кнопка выхода.

15
00:01:02,770 --> 00:01:04,459
Что это значит?

16
00:01:04,459 --> 00:01:07,716
Это значит, что у нас есть код,

17
00:01:07,716 --> 00:01:12,637
в котором есть три
функции: создать сессию,

18
00:01:12,637 --> 00:01:16,810
проверить сессию и удалить сессию.

19
00:01:16,810 --> 00:01:22,890
Писалось это в стародавние времена, когда
компьютеры были большими и медленными.

20
00:01:22,890 --> 00:01:24,150
Что это значит?

21
00:01:24,150 --> 00:01:29,137
Это значит, что у нас есть какое-то
глобальное хранилище сессий,

22
00:01:29,137 --> 00:01:30,688
какой-то глобальный Mutex,

23
00:01:30,688 --> 00:01:35,408
который находится в глобальном
пространстве вообще, и все плохо.

24
00:01:35,408 --> 00:01:39,230
Ну и рассмотрим функцию.

25
00:01:39,230 --> 00:01:42,623
Вот сессия, для того чтобы создать сессию,
мы там что-то делаем,

26
00:01:42,623 --> 00:01:47,620
лочимся каждый раз на Mutex
и там кладем ее в хранилище.

27
00:01:47,620 --> 00:01:52,039
Пытаемся получить сессию,

28
00:01:52,039 --> 00:01:57,661
мы лочимся на чтение только,
потом получаем ее из хранилища, и все.

29
00:01:57,661 --> 00:02:00,427
Ну и удаление сессии тоже.

30
00:02:00,427 --> 00:02:02,480
Лочимся и удаляем.

31
00:02:02,480 --> 00:02:07,940
Вот это монолит старого стиля.

32
00:02:07,940 --> 00:02:10,470
Такое, махровое legacy.

33
00:02:10,470 --> 00:02:14,553
Теперь, для того чтобы
что-то с этим сделать,

34
00:02:14,553 --> 00:02:18,420
его стоит вынести в отдельный,
хотя бы, модуль.

35
00:02:18,420 --> 00:02:20,427
Хотя бы чтобы он был
как-то взаимозаменяем,

36
00:02:20,427 --> 00:02:22,490
или реализацию можно
было как-то подменить.

37
00:02:22,490 --> 00:02:27,300
Для начала выкинем глобальные переменные.

38
00:02:27,300 --> 00:02:30,465
Начнем.

39
00:02:30,465 --> 00:02:39,874
type Session Manager struct.

40
00:02:39,874 --> 00:02:44,300
У нас будет наша структура.

41
00:02:44,300 --> 00:02:49,475
Mutex, и

42
00:02:49,475 --> 00:02:54,650
session (я это скопирую даже).

43
00:02:54,650 --> 00:02:55,608
Хорошо.

44
00:02:55,608 --> 00:03:02,560
То есть вот в экземпляр этой структуры
мы будем все наше складывать.

45
00:03:02,560 --> 00:03:05,443
Теперь его нужно удобно создавать.

46
00:03:05,443 --> 00:03:08,330
Вынесем просто в отдельный helper.

47
00:03:08,330 --> 00:03:16,010
NewSessManager, return,

48
00:03:16,010 --> 00:03:22,310
[БЕЗ_СЛОВ]

49
00:03:22,310 --> 00:03:30,970
[БЕЗ_СЛОВ] Так,

50
00:03:30,970 --> 00:03:33,778
окей.

51
00:03:33,778 --> 00:03:39,638
Вот так, и вот так вот, запятые.

52
00:03:39,638 --> 00:03:44,080
Хорошо, мы создали структуру
— менеджер сессий.

53
00:03:44,080 --> 00:03:49,030
Полями, которые являются Mutex,
и, собственно, хранилище сессий.

54
00:03:49,030 --> 00:03:54,174
И мы создали функцию — новый
менеджер сессий, который будет нам,

55
00:03:54,174 --> 00:03:58,970
собственно, возвращать
экземпляр структуры.

56
00:03:58,970 --> 00:04:00,230
Отлично.

57
00:04:00,230 --> 00:04:04,094
Теперь вот эти вот функции,
которые тут были,

58
00:04:04,094 --> 00:04:08,490
мы сделаем методами этой структуры.

59
00:04:08,490 --> 00:04:09,610
Create.

60
00:04:09,610 --> 00:04:13,642
Create, что это такое?

61
00:04:13,642 --> 00:04:14,986
Check.

62
00:04:14,986 --> 00:04:18,246
Check и Delete.

63
00:04:18,246 --> 00:04:24,432
Ну и сделаем (sm *SessionManager).

64
00:04:24,432 --> 00:04:28,280
Так, теперь это экземпляры,

65
00:04:28,280 --> 00:04:32,249
теперь это методы этой структуры.

66
00:04:32,249 --> 00:04:33,445
Отлично.

67
00:04:33,445 --> 00:04:37,432
Mutex'а у нас больше нет глобального,
это теперь поле структуры,

68
00:04:37,432 --> 00:04:40,254
поэтому заменяем, обращаемся к полю.

69
00:04:40,254 --> 00:04:46,298
sm — это в данном случае данная структура.

70
00:04:46,298 --> 00:04:50,180
sm там и там.

71
00:04:50,180 --> 00:04:53,420
Отлично.

72
00:04:53,420 --> 00:04:58,380
Теперь у нас есть уже как-то более-менее

73
00:04:58,380 --> 00:05:04,967
изолированный модуль,
который мы можем переиспользовать.

74
00:05:04,967 --> 00:05:11,735
Но модуль — это конечно очень круто,
но вдруг мы захотим какие-то тесты.

75
00:05:11,735 --> 00:05:14,430
Поэтому можем сразу создать интерфейс.

76
00:05:14,430 --> 00:05:18,130
Ну назовем.

77
00:05:18,130 --> 00:05:22,400
[БЕЗ_СЛОВ] У

78
00:05:22,400 --> 00:05:27,330
него будет функция Create,

79
00:05:27,330 --> 00:05:35,250
[БЕЗ_СЛОВ]

80
00:05:35,250 --> 00:05:42,470
Create, Check,

81
00:05:42,470 --> 00:05:46,580
Delete.

82
00:05:46,580 --> 00:05:52,352
[БЕЗ_СЛОВ] Хорошо.

83
00:05:52,352 --> 00:05:55,240
Так, interface.

84
00:05:55,240 --> 00:06:00,068
[БЕЗ_СЛОВ] Ну

85
00:06:00,068 --> 00:06:04,360
и глобальные переменные мы выкинем.

86
00:06:04,360 --> 00:06:05,815
Окей.

87
00:06:05,815 --> 00:06:09,940
У нас есть Manager,

88
00:06:09,940 --> 00:06:16,847
interface какой-то, новая функция для
создания экземпляров — все хорошо.

89
00:06:16,847 --> 00:06:20,580
Теперь нужно отрефакторить код,
который все это вызывает.

90
00:06:20,580 --> 00:06:25,920
Создадим var sm.

91
00:06:25,920 --> 00:06:33,360
Эта переменная будет
иметь тип interface'а.

92
00:06:33,360 --> 00:06:36,462
Ну вот так вот.

93
00:06:36,462 --> 00:06:42,440
Теперь вот так.

94
00:06:42,440 --> 00:06:50,666
Теперь вызовем функцию,
которая нам создает.

95
00:06:50,666 --> 00:06:56,169
Вот, теперь мы получили уже какую-то
обособленную единицу, давайте это

96
00:06:56,169 --> 00:07:00,285
даже вынесем вот так, потому что вдруг мы
захотим это как-то глобально использовать.

97
00:07:00,285 --> 00:07:01,143
Вот.

98
00:07:01,143 --> 00:07:08,916
Теперь переведем это на вызов
методов этой структуры.

99
00:07:08,916 --> 00:07:16,820
Create, Check.

100
00:07:16,820 --> 00:07:21,750
Delete, и еще раз Check.

101
00:07:21,750 --> 00:07:28,150
Вроде бы оно даже должно заработать.

102
00:07:28,150 --> 00:07:30,230
Надо попробовать запустить.

103
00:07:30,230 --> 00:07:36,510
Так.

104
00:07:36,510 --> 00:07:41,010
Нет, все плохо.

105
00:07:41,010 --> 00:07:47,940
[БЕЗ_СЛОВ]

106
00:07:47,940 --> 00:07:53,420
SessionManager.

107
00:07:53,420 --> 00:08:02,733
[БЕЗ_СЛОВ] Mutex

108
00:08:02,733 --> 00:08:08,720
in field value 32.

109
00:08:08,720 --> 00:08:13,280
32.

110
00:08:13,280 --> 00:08:19,645
[БЕЗ_СЛОВ]

111
00:08:19,645 --> 00:08:26,010
Адрес.

112
00:08:26,010 --> 00:08:29,230
Так.

113
00:08:29,230 --> 00:08:33,940
Это не просто Mutex, это — RWMutex.

114
00:08:33,940 --> 00:08:38,809
RWMutex.

115
00:08:38,809 --> 00:08:40,778
И 41, 58.

116
00:08:40,778 --> 00:08:43,040
Ах, ну да, конечно.

117
00:08:43,040 --> 00:08:48,466
Теперь нам еще нужно в
структуру это все положить.

118
00:08:48,466 --> 00:08:51,773
Записали, сделали и сделали.

119
00:08:51,773 --> 00:08:54,480
Хорошо, вроде бы мы...

120
00:08:54,480 --> 00:09:00,948
[БЕЗ_СЛОВ] sessions.

121
00:09:00,948 --> 00:09:05,570
Вроде мы зачинили все ошибки,
и у нас даже все заработало.

122
00:09:05,570 --> 00:09:10,100
Итак, что мы сделали?

123
00:09:10,100 --> 00:09:15,778
Раньше у нас была глобальная переменная,
где мы хранили все,

124
00:09:15,778 --> 00:09:20,010
и были какие-то функции, для того чтобы
работать с этой глобальной переменной.

125
00:09:20,010 --> 00:09:21,358
Функция — это уже неплохо.

126
00:09:21,358 --> 00:09:24,167
Иногда бывает так,
что прямо работает с этой переменной.

127
00:09:24,167 --> 00:09:27,670
За счет того, что у нас были функции,
мы хотя бы смогли это изолировать.

128
00:09:27,670 --> 00:09:32,821
Мы создали структуру,

129
00:09:32,821 --> 00:09:37,175
которая заменила нам эти
глобальные переменные.

130
00:09:37,175 --> 00:09:41,580
И функции, которые раньше были,
мы заменили на методы этой структуры.

131
00:09:41,580 --> 00:09:47,320
Также мы создали Helper, который
возвращает нам экземпляр структуры,

132
00:09:47,320 --> 00:09:52,990
и создали interface,
которому удовлетворяет наша структура.

133
00:09:52,990 --> 00:09:53,673
Все.

134
00:09:53,673 --> 00:10:01,141
Теперь мы заменили вызов глобальных
функций на обращение к методам структур.

135
00:10:01,141 --> 00:10:05,585
Причем переменную менеджера
сессии мы создали как interface.

136
00:10:05,585 --> 00:10:10,380
Значит, что если вдруг мы
хотим подменить теперь

137
00:10:10,380 --> 00:10:16,290
эту структуру,

138
00:10:16,290 --> 00:10:21,120
заменить реализацию,
нам будет гораздо проще это делать.

139
00:10:21,120 --> 00:10:21,794
Хорошо.

140
00:10:21,794 --> 00:10:26,750
Теперь у нас есть вроде как
отдельный небольшой модуль — сессия,

141
00:10:26,750 --> 00:10:31,205
и его уже можно попробовать
изолировать в виде

142
00:10:31,205 --> 00:10:36,340
отдельного сервиса,
чем мы и займемся дальше.