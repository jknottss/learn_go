1
00:00:00,000 --> 00:00:06,495
[БЕЗ_ЗВУКА] В прошлых

2
00:00:06,495 --> 00:00:11,740
видео мы успешно связывали между собой
несколько сервисов по протоколу grpc.

3
00:00:11,740 --> 00:00:19,010
Однако иногда есть желание сделать
http интерфейс к вашему grpc сервису,

4
00:00:19,010 --> 00:00:23,860
потому что для вашего целевого языка
нет генераторов protobuf файлов,

5
00:00:23,860 --> 00:00:28,710
либо же вы не хотите усложнять
и идти дальше простого http.

6
00:00:28,710 --> 00:00:33,927
В этом случае в экосистеме grpc есть
утилита под названием grpc-gateway,

7
00:00:33,927 --> 00:00:38,839
которая позволяет сгенерировать
Reverse Proxy до вашего сервиса,

8
00:00:38,839 --> 00:00:42,870
который будет принимать в
себя json по http обычному,

9
00:00:42,870 --> 00:00:47,895
а в ваш сервис будет доходить уже по grpc
и возвращать соответственно тоже json.

10
00:00:47,895 --> 00:00:51,580
Давайте посмотрим,
каким образом это получается на практике.

11
00:00:51,580 --> 00:00:57,239
Итак, вот есть наш сервис AuthChecker,

12
00:00:57,239 --> 00:01:01,630
уже знакомый вам,
и методы Create, Check, Delete.

13
00:01:01,630 --> 00:01:04,470
И мы расширяем эти методы
при помощи некоторых опций,

14
00:01:04,470 --> 00:01:07,292
в данном случае это google.api.http опция.

15
00:01:07,292 --> 00:01:11,400
И в этой опции мы указываем,
что post и url,

16
00:01:11,400 --> 00:01:16,315
что body мы принимаем прямо целиком,
либо, например,

17
00:01:16,315 --> 00:01:21,230
проверку сессии мы осуществляем через get
и параметры указываем прямо в самом url.

18
00:01:21,230 --> 00:01:27,067
Сам плагин для grpc gateway

19
00:01:27,067 --> 00:01:31,839
умеет обрабатывать эти
опции и создаст вам,

20
00:01:31,839 --> 00:01:35,450
сгенерирует файл, где будет обвязка,

21
00:01:35,450 --> 00:01:40,780
которая будет делать routing и
ходить в ваш уже сервер по grpc.

22
00:01:40,780 --> 00:01:43,444
Рассмотрим генерацию.

23
00:01:43,444 --> 00:01:48,980
Итак, вот генерация самого protobuf файла,
самого grpc сервиса.

24
00:01:48,980 --> 00:01:55,000
Следующим идет генерация уже
http обвязки для вашего сервиса,

25
00:01:55,000 --> 00:02:01,495
и наконец описание для сваггера,
то есть документация.

26
00:02:01,495 --> 00:02:04,030
Итак, попробуем сгенерировать это все.

27
00:02:04,030 --> 00:02:08,502
Так, создали сервис,

28
00:02:08,502 --> 00:02:12,262
создали обвязку и создали
сваггер-описание.

29
00:02:12,262 --> 00:02:16,276
Давайте посмотрим немножко на то,
что нам сгенерировалось в обвязке.

30
00:02:16,276 --> 00:02:21,040
Итак, сгенерировался довольно большой
такой файл, на 300 строк почти.

31
00:02:21,040 --> 00:02:24,637
У него есть свой серверный мультиплексор,

32
00:02:24,637 --> 00:02:27,884
своя валидация и много
своих небольших утилит.

33
00:02:27,884 --> 00:02:29,906
Но вы туда погружаться не будете.

34
00:02:29,906 --> 00:02:34,312
Вот, например, в любом мультиплексоре он

35
00:02:34,312 --> 00:02:39,920
принимает POST — это для метода Create,
принимает валидация, функция,

36
00:02:39,920 --> 00:02:45,760
которой все это вызывается и которая
потом идет уже внутрь вашего сервиса.

37
00:02:45,760 --> 00:02:48,446
Не будем смотреть на
автогенерированный код, посмотрим,

38
00:02:48,446 --> 00:02:50,350
как это использовать дальше на практике.

39
00:02:50,350 --> 00:02:53,001
Теперь посмотрим уже
непосредственно сервис,

40
00:02:53,001 --> 00:02:55,140
который будет использовать этот код.

41
00:02:55,140 --> 00:03:00,570
Итак, вот я подключаю как раз свою сессию,
где у меня все сгенерировано.

42
00:03:00,570 --> 00:03:04,616
И я стартую прямо в одном
сервисе и grpc сервис,

43
00:03:04,616 --> 00:03:08,470
куда будет входить моя proxy,
и саму proxy.

44
00:03:08,470 --> 00:03:15,155
grpc сервис — тут ничего интересного нет,
мы это уже видели.

45
00:03:15,155 --> 00:03:22,551
Я слушаю сокет по TCP и регистрирую
свой SessionManager в обработчиках.

46
00:03:22,551 --> 00:03:29,256
Далее, в HTTPProxy я подключаюсь к grpc,
устанавливаю соединение.

47
00:03:29,256 --> 00:03:33,556
Потом я создаю мультиплексор,
серверный мультиплексор,

48
00:03:33,556 --> 00:03:36,530
для обработки запросов
уже от grpc-gateway.

49
00:03:36,530 --> 00:03:43,106
В нем я регистрирую
свой уже клиент к моему

50
00:03:43,106 --> 00:03:48,700
AuthChecker, то есть я передаю туда
контекст, в котором сейчас ничего нет.

51
00:03:48,700 --> 00:03:52,550
указываю, в какой мультиплексор
зарегистрировать, и какой grpc-коннект.

52
00:03:52,550 --> 00:03:56,571
Далее я объявляю свой собственный
уже мультиплексор, стандартный,

53
00:03:56,571 --> 00:03:57,777
стандартный в http.

54
00:03:57,777 --> 00:04:03,738
И все запросы на /v1/session/
я отправляю уже в grpc.

55
00:04:03,738 --> 00:04:05,586
То есть я могу совмещать.

56
00:04:05,586 --> 00:04:10,299
У вас необязательно должен быть
всего одна proxy на один сервис.

57
00:04:10,299 --> 00:04:13,864
Вы можете сделать в одной
proxy доступ ко множеству

58
00:04:13,864 --> 00:04:17,750
сервисов или непосредственно
уже к вашей бизнес-логике.

59
00:04:17,750 --> 00:04:22,800
И начинаю уже слушать сокет по http.

60
00:04:22,800 --> 00:04:25,860
Итак, давайте это запустим.

61
00:04:25,860 --> 00:04:27,160
Запускаем.

62
00:04:27,160 --> 00:04:27,780
Так.

63
00:04:27,780 --> 00:04:36,441
Отлично, у меня стартовал gRPC сервер на
порту 8081 и HTTP сервер на порту 8080.

64
00:04:36,441 --> 00:04:41,232
Теперь я возьму подготовленные
выражения для доступа к этому сервису.

65
00:04:41,232 --> 00:04:45,524
Обратите внимание: я даже не
запрашиваю их из браузера,

66
00:04:45,524 --> 00:04:48,100
а просто дергаю api через curl.

67
00:04:48,100 --> 00:04:50,138
Скопировали.

68
00:04:50,138 --> 00:04:53,120
Открываем терминал.

69
00:04:53,120 --> 00:04:54,660
Вставляем.

70
00:04:54,660 --> 00:05:01,465
Обратите внимание: я создал свой сервис,
создал себе сессию,

71
00:05:01,465 --> 00:05:06,980
получилась ID, я получил теперь
эту сессию и теперь удалил.

72
00:05:06,980 --> 00:05:09,107
Вот, пожалуйста,

73
00:05:09,107 --> 00:05:15,184
буквально небольшими силами мы
создали HTTPProxy до grpc сервиса.

74
00:05:15,184 --> 00:05:20,066
Теперь все ваши старые клиенты,
которые не хотят тащить за собой какие-то

75
00:05:20,066 --> 00:05:25,000
непонятные библиотеки, могут ходить
в ваш микросервис просто по http.

76
00:05:25,000 --> 00:05:31,828
Еще у нас остался не
разобранным файл для сваггера,

77
00:05:31,828 --> 00:05:36,410
которому мы посвятим следующее видео.