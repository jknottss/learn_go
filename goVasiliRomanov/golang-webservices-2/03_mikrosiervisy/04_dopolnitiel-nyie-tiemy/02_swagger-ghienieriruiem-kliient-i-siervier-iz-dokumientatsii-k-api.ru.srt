1
00:00:00,000 --> 00:00:08,466
[БЕЗ_ЗВУКА] В этом видео
мы поговорим про SWAGGER.

2
00:00:08,466 --> 00:00:13,138
SWAGGER — это набор утилит
для Open API Specification,

3
00:00:13,138 --> 00:00:17,235
которая раньше называлась
SWAGGER Specification.

4
00:00:17,235 --> 00:00:22,566
Это спецификация для описания вашего API,
которая позволяет на основе

5
00:00:22,566 --> 00:00:29,171
этого описания генерировать документацию,
клиентский код, серверный код,

6
00:00:29,171 --> 00:00:33,793
тестирование и проектировать
само API в удобном инструменте.

7
00:00:33,793 --> 00:00:38,243
Давайте посмотрим,
что из себя представляет это формат.

8
00:00:38,243 --> 00:00:42,914
Итак, вот Json с этим форматом SWAGGER,

9
00:00:42,914 --> 00:00:46,678
что версия 2.0, какая-то информация,

10
00:00:46,678 --> 00:00:52,520
в данном случае title был сгенерирован из
session.proto, какой формат он принимает,

11
00:00:52,520 --> 00:00:56,300
какой формат он возвращает,
какие сами API он предоставляет,

12
00:00:56,300 --> 00:01:01,397
в данном случае v1/session/check/{ID},
какие ответы он отдает,

13
00:01:01,397 --> 00:01:05,454
какие параметры он принимает и структура
данных, которую он возвращает.

14
00:01:05,454 --> 00:01:08,954
Конечно, в Json смотреть это не очень
удобно, и скорее всего, вы уже запутались,

15
00:01:08,954 --> 00:01:11,440
поэтому давайте посмотрим,
как выглядит документация.

16
00:01:11,440 --> 00:01:19,392
У SWAGGER есть команда serve
для генерирования документации.

17
00:01:19,392 --> 00:01:24,960
Я указываю формат, файл,
в котором описано мое API,

18
00:01:24,960 --> 00:01:30,936
на 8082 порту, запускаем,
и вот мы видим уже красивую документацию.

19
00:01:30,936 --> 00:01:34,272
Вот мой сервис AuthChecker,
вот его метод Check,

20
00:01:34,272 --> 00:01:39,870
какие у него есть параметры,
какой формат он возвращает,

21
00:01:39,870 --> 00:01:44,334
как можно из него что-то получить,
create и delete.

22
00:01:44,334 --> 00:01:50,061
Соответственно, если у вас
большой набор микросервисов,

23
00:01:50,061 --> 00:01:56,918
очень много методов у них, то иметь
хорошую документацию — это уже благо.

24
00:01:56,918 --> 00:01:59,349
Теперь давайте посмотрим дальше,

25
00:01:59,349 --> 00:02:03,490
каким образом можно сгенерировать клиент
до вашего API, используя этот формат.

26
00:02:03,490 --> 00:02:06,170
Итак, есть следующая команда.

27
00:02:06,170 --> 00:02:10,666
swagger generate, я говорю,
что client, указываю,

28
00:02:10,666 --> 00:02:13,808
из какого файл мне всё это генерировать,

29
00:02:13,808 --> 00:02:18,191
назову это session client и
положу в папку session client.

30
00:02:18,191 --> 00:02:20,444
Запустим, он немножко подумает,

31
00:02:20,444 --> 00:02:23,520
потом сгенерирует нам
огромное количество файлов.

32
00:02:23,520 --> 00:02:27,899
Итак, вот session client,
он мне сюда сгенерировал

33
00:02:27,899 --> 00:02:32,066
непосредственно сам клиент, auth_checker,

34
00:02:32,066 --> 00:02:37,555
это мой сервис уже auth_checker,
и модели для всего этого добра.

35
00:02:37,555 --> 00:02:42,215
Давайте посмотрим, каким образом теперь
при помощи этого сгенерированного

36
00:02:42,215 --> 00:02:44,350
клиента обратиться к моему сервису.

37
00:02:44,350 --> 00:02:51,170
У меня есть код consumer, я подключаю
довольно много разных инклюдов,

38
00:02:51,170 --> 00:02:55,317
создаю транспорт, где указываю,
на какой адрес мне идти,

39
00:02:55,317 --> 00:02:59,424
создаю клиента, создаю мой
непосредственно менеджер сессий,

40
00:02:59,424 --> 00:03:04,541
потому что у меня внутри одного API
может быть несколько подсервисов.

41
00:03:04,541 --> 00:03:09,863
Теперь вызываю session manager.Create,
вызываю NewCreateParams().WithBody.

42
00:03:09,863 --> 00:03:10,940
Почему WithBody?

43
00:03:10,940 --> 00:03:12,648
Откуда это Body взялось?

44
00:03:12,648 --> 00:03:14,745
Потому что это постпараметры.

45
00:03:14,745 --> 00:03:17,306
Указываю, что я хочу CreateSession.

46
00:03:17,306 --> 00:03:18,170
Запускаем.

47
00:03:18,170 --> 00:03:20,451
session ID получили.

48
00:03:20,451 --> 00:03:24,910
Теперь я могу проверить по этой сессии,
что там внутри лежит,

49
00:03:24,910 --> 00:03:26,469
удалить и проверить еще раз.

50
00:03:26,469 --> 00:03:27,540
Давайте запустим.

51
00:03:27,540 --> 00:03:31,155
Итак, запускаем consumer.

52
00:03:31,155 --> 00:03:36,250
Отмечу, что поскольку
мой код сгенерирован на

53
00:03:36,250 --> 00:03:42,153
основе swagger описания, то сейчас он
идет в ту Reverse Proxy в grpc-gateway,

54
00:03:42,153 --> 00:03:44,857
которая потом уже входит в grpc-сервис.

55
00:03:44,857 --> 00:03:48,731
То есть у меня получается
http клиент к http серверу,

56
00:03:48,731 --> 00:03:53,020
который уже является
grpc-клиентом grpc-сервису.

57
00:03:53,020 --> 00:03:56,220
Смотрите, у меня уже
три появилось сервиса.

58
00:03:56,220 --> 00:04:04,110
Конечно, при помощи swagger можно
сгенерировать и серверное описание.

59
00:04:04,110 --> 00:04:05,856
Это будет очень забавно.

60
00:04:05,856 --> 00:04:10,526
Мы сначала сгенерировали grpc-сервис,
потом через несколько

61
00:04:10,526 --> 00:04:15,000
итераций он уже генерируется
опять сервер из swagger.

62
00:04:15,000 --> 00:04:17,376
Swagger — это очень хороший инструмент,

63
00:04:17,376 --> 00:04:22,419
если у вас в работе используется очень
много микросервисов, он позволяет как-то

64
00:04:22,419 --> 00:04:27,610
их стандартизировать и добиться
контроля над форматом их ответов.

65
00:04:27,610 --> 00:04:32,262
Штука это очень мощная
с миллионом параметров,

66
00:04:32,262 --> 00:04:38,270
с миллионом опций, и действительно
стоит более детального изучения.