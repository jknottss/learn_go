1
00:00:00,000 --> 00:00:05,272
[БЕЗ_ЗВУКА] В этом

2
00:00:05,272 --> 00:00:10,119
видео мы поговорим про балансировку
нагрузки и сервис Discovery.

3
00:00:10,119 --> 00:00:13,320
Это два очень актуальных
вопроса в мире микросервисов.

4
00:00:13,320 --> 00:00:18,406
Дело в том, что микросервисы часто
запускаются на большом количестве нод для

5
00:00:18,406 --> 00:00:24,519
обеспечения высокой доступности,
соответственно эти ноды могут удаляться,

6
00:00:24,519 --> 00:00:29,595
добавляться и каким-то образом вашему
софту, вашему основному сервису

7
00:00:29,595 --> 00:00:34,552
нужно узнавать, куда вообще можно
пускать нагрузку, нужно узнавать,

8
00:00:34,552 --> 00:00:39,442
что какой-то сервис ушел,
либо какая-то нода появилась.

9
00:00:39,442 --> 00:00:47,777
В этом видео мы будем рассматривать
оба этих вопроса на примере консула.

10
00:00:47,777 --> 00:00:53,656
Консул — это довольно мощная штука для
организации как раз сервиса Discovery,

11
00:00:53,656 --> 00:00:59,653
health-чеков, балансировки нагрузки,
key-value хранилища, распределенных логов.

12
00:00:59,653 --> 00:01:03,444
Я не буду очень глубоко
углубляться в его работу,

13
00:01:03,444 --> 00:01:07,032
потому что все-таки у
нас курс не по консулу.

14
00:01:07,032 --> 00:01:11,036
Однако я рассмотрю, как с практической
точки зрения можно его использовать.

15
00:01:11,036 --> 00:01:13,379
Кстати, консул тоже написан на Go.

16
00:01:13,379 --> 00:01:18,351
У меня он поднят в доке контейнере,
который, кстати,

17
00:01:18,351 --> 00:01:21,220
тоже написан на Go доке.

18
00:01:21,220 --> 00:01:25,717
Итак, у него есть небольшая админка,
где можно посмотреть какой-то статус нод,

19
00:01:25,717 --> 00:01:29,090
какие они вообще есть,
какие сервисы там зарегистрированы.

20
00:01:29,090 --> 00:01:33,350
Сейчас, как видно, в нем зарегистрирован
только сам консул, то есть ничего нет.

21
00:01:33,350 --> 00:01:37,864
И поэтому начнем мы с того,
что мы зарегистрируем в нем наш

22
00:01:37,864 --> 00:01:41,600
микросервис авторизации, который мы
рассматривали в предыдущих примерах.

23
00:01:41,600 --> 00:01:45,140
Теперь рассмотрим код.

24
00:01:45,140 --> 00:01:50,125
Консул — это внешний пакет,
его нужно поставить через Go get.

25
00:01:50,125 --> 00:01:52,990
Поскольку мне нужно будет
запустить сразу несколько нод его,

26
00:01:52,990 --> 00:01:57,455
все-таки это сервис Discovery,
там нужно, чтобы они уходили, приходили,

27
00:01:57,455 --> 00:02:01,820
я сразу сделаю его конфигурируемым,
используя пакет flag.

28
00:02:01,820 --> 00:02:07,615
У меня есть порт и также сразу
порт консула, он тоже доступен

29
00:02:07,615 --> 00:02:13,180
для конфигурирования, потому что вы можете
захотеть его поднять на другом порту.

30
00:02:13,180 --> 00:02:14,548
Итак.

31
00:02:14,548 --> 00:02:18,956
Начинаем мы нашу программу с того,

32
00:02:18,956 --> 00:02:23,440
что парсим непосредственно флаги,
которые передаются вот так вот.

33
00:02:23,440 --> 00:02:29,380
До этого я могу их просто объявить,
но автоматически они никак не распарсятся.

34
00:02:29,380 --> 00:02:35,480
После этого я привожу к строке,
просто для удобства, итак, я создаю...

35
00:02:35,480 --> 00:02:38,618
TCP здесь нет,

36
00:02:38,618 --> 00:02:44,660
создаю grpc-сервис,
регистрирую там мой сервис.

37
00:02:44,660 --> 00:02:49,120
В целом у меня практически нет отличий,
за исключением двух.

38
00:02:49,120 --> 00:02:53,790
Первое отличие: я добавил
в менеджер сессий порт,

39
00:02:53,790 --> 00:02:58,251
чтобы в логе можно было видеть,
на какой сервис мы пришли,

40
00:02:58,251 --> 00:03:01,520
потому что grpc в штатном режиме
это не позволяет это делать.

41
00:03:01,520 --> 00:03:06,420
И также я добавил заглушку,
потому что у меня не

42
00:03:06,420 --> 00:03:10,591
настоящий сервис авторизации,
а там просто хранится все в мапке.

43
00:03:10,591 --> 00:03:14,497
Соответственно, между собой эти
два сервиса никак не контактируют,

44
00:03:14,497 --> 00:03:16,684
поэтому там просто заглушка сейчас.

45
00:03:16,684 --> 00:03:20,590
Итак, я создаю config для консула,
пытаюсь к нему подключиться,

46
00:03:20,590 --> 00:03:25,470
после этого я задаю сервис ID.

47
00:03:25,470 --> 00:03:29,347
Я использую у себя просто какой-то
префикс, IP-адрес и порт,

48
00:03:29,347 --> 00:03:31,680
ну просто чтобы не идентифицировать.

49
00:03:31,680 --> 00:03:36,430
На самом деле ID там может быть
любой: MD5, UUID, что угодно.

50
00:03:36,430 --> 00:03:40,686
Далее я обращаюсь к консулу и пытаюсь

51
00:03:40,686 --> 00:03:45,600
зарегистрировать там свой сервис,
обращаюсь к агенту,

52
00:03:45,600 --> 00:03:50,680
вызываю функцию зарегистрировать
сервис и передаю туда мою структуру,

53
00:03:50,680 --> 00:03:54,059
в которой все будет зарегистрировано.

54
00:03:54,059 --> 00:03:59,232
Итак, ID — это как раз идентификатор
конкретно этого сервиса.

55
00:03:59,232 --> 00:04:04,322
Name — это то, какой сервис он
предоставляет, то есть ID должен быть

56
00:04:04,322 --> 00:04:09,238
уникальным в рамках разных нод,
а вот Name в

57
00:04:09,238 --> 00:04:14,352
рамках ноды одного кластера одних и тех
же микросервисов должен быть одинаковым.

58
00:04:14,352 --> 00:04:17,590
Указываю порт и указываю адрес,
на котором он доступен.

59
00:04:17,590 --> 00:04:20,938
У меня все это крутится локально,
поэтому 127.0.0.1.

60
00:04:20,938 --> 00:04:25,357
Я не указываю никаких health-чеков, у
меня сервис сразу же становится доступен.

61
00:04:25,357 --> 00:04:28,250
Однако вам, конечно же,
нужно будет их настроить.

62
00:04:28,250 --> 00:04:32,270
Вообще сразу оговорюсь,
что это все-таки не продакшн-пример,

63
00:04:32,270 --> 00:04:34,110
а какая-то отправная точка.

64
00:04:34,110 --> 00:04:39,060
Так, хорошо мы зарегистрировали сервер,
отлично.

65
00:04:39,060 --> 00:04:43,440
Теперь я сразу же через
отложенное выполнение defer

66
00:04:43,440 --> 00:04:48,397
регистрирую функцию, которая этот
сервис у меня выведет из нагрузки,

67
00:04:48,397 --> 00:04:51,480
точнее она сообщит консулу о том,
что сервис ушел.

68
00:04:51,480 --> 00:04:56,220
Таким образом, когда программа
закончится более-менее штатно,

69
00:04:56,220 --> 00:05:01,312
выполнится этот defer,
и он скажет консулу,

70
00:05:01,312 --> 00:05:05,170
что, пожалуйста, на этот сервер
слать нагрузки больше не надо.

71
00:05:05,170 --> 00:05:09,386
Так, теперь я стартую непосредственно

72
00:05:09,386 --> 00:05:14,542
grpc-сервис и уже ну просто жду,
чтобы остановить его.

73
00:05:14,542 --> 00:05:17,240
Итак, запустим первый сервис.

74
00:05:17,240 --> 00:05:23,994
Он зарегистрирован вот под таким ID,
стартуем и теперь ждем остановки.

75
00:05:23,994 --> 00:05:27,127
Так, посмотрим теперь сам консул,
ага, смотрите,

76
00:05:27,127 --> 00:05:29,455
появилось сервис наш session-api.

77
00:05:29,455 --> 00:05:33,160
session-api — это как раз
кластер таких микросервисов,

78
00:05:33,160 --> 00:05:35,431
в нем всего один всего одна нода.

79
00:05:35,431 --> 00:05:40,820
Там практически ничего нет,
если посмотреть, вот она есть: IP и порт.

80
00:05:40,820 --> 00:05:41,515
Вот.

81
00:05:41,515 --> 00:05:45,550
Теперь я добавлю еще один сервис.

82
00:05:45,550 --> 00:05:49,153
Мы его заказывали в отдельном терминале.

83
00:05:49,153 --> 00:05:50,054
Отлично.

84
00:05:50,054 --> 00:05:51,760
Так, стартовало.

85
00:05:51,760 --> 00:05:52,684
Смотрим.

86
00:05:52,684 --> 00:05:57,210
Ага, вот у меня теперь два
сервиса с session-api.

87
00:05:57,210 --> 00:06:04,110
Теперь я могу пускать туда нагрузку
и смотреть, как она распределяется.

88
00:06:04,110 --> 00:06:08,070
Так.

89
00:06:08,070 --> 00:06:16,054
Вот, поскольку мы подняли уже оба клиента,

90
00:06:16,054 --> 00:06:21,700
мы подняли уже оба наших микросервиса,

91
00:06:21,700 --> 00:06:27,046
теперь нам нужно сделать нагрузку
и получение в списке серверов

92
00:06:27,046 --> 00:06:32,090
их онлайн-обновления уже в клиенте,
который будет обращаться к этим серверам.

93
00:06:32,090 --> 00:06:33,838
Итак, что у меня тут есть?

94
00:06:33,838 --> 00:06:40,460
У меня по-прежнему есть консул api,
адрес консула конфигурируемый,

95
00:06:40,460 --> 00:06:44,931
клиент консулу и Resolver
я сделал глобальными,

96
00:06:44,931 --> 00:06:48,875
чтобы обращаться к ним из внешних функций,

97
00:06:48,875 --> 00:06:53,140
однако вы можете их
внедрить в свою структуру.

98
00:06:53,140 --> 00:06:53,843
Так.

99
00:06:53,843 --> 00:06:59,195
Ну по-прежнему мы подключаемся к консулу,

100
00:06:59,195 --> 00:07:05,250
теперь дальше, теперь мы получаем уже,
обращаясь к сервису health-чеков,

101
00:07:05,250 --> 00:07:11,574
мы говорим ему, дай мне,
пожалуйста сервисы session-api

102
00:07:11,574 --> 00:07:16,034
и дальнейшие параметры я не передаю
никакие, однако там можно указать теги,

103
00:07:16,034 --> 00:07:20,843
можно указать сервисы, которые только
прошли проверку, и еще некоторые вещи.

104
00:07:20,843 --> 00:07:24,796
Дело в том, что у меня сервис,
поскольку нет никаких health-чеков,

105
00:07:24,796 --> 00:07:28,160
он у меня сразу стартует живым, сразу
стартует здоровым, доступным для нагрузки.

106
00:07:28,160 --> 00:07:31,387
В продакшне так делать, конечно же,
не надо, все-таки лучше,

107
00:07:31,387 --> 00:07:36,138
чтобы там сначала health-чеки все прошли,
чтобы убедиться, что там все действительно

108
00:07:36,138 --> 00:07:39,430
работает и мы нигде не ошиблись
в ноде и в ее конфигурации,

109
00:07:39,430 --> 00:07:41,897
или какие-нибудь теги или фильтрации.

110
00:07:41,897 --> 00:07:43,310
Но здесь я получаю все.

111
00:07:43,310 --> 00:07:45,453
Что я дальше делаю?

112
00:07:45,453 --> 00:07:52,083
Дальше я по всем этим сервисам итерируюсь
и просто создаю из них слайс адресов.

113
00:07:52,083 --> 00:07:55,646
Дело в том,
что из консула мне возвращается структура,

114
00:07:55,646 --> 00:07:57,924
где есть отдельно IP, отдельно адрес.

115
00:07:57,924 --> 00:07:59,270
Тут я это все совмещаю.

116
00:07:59,270 --> 00:08:04,718
Теперь я создаю структуру
NameResolver и указываю

117
00:08:04,718 --> 00:08:11,450
там только нулевой адрес,
чтобы что-то там было в самом начале.

118
00:08:11,450 --> 00:08:16,530
После этого я уже создаю
подключение к grpc,

119
00:08:16,530 --> 00:08:21,418
я оказываю опцию WithBlock, это значит,

120
00:08:21,418 --> 00:08:25,910
что соединение,

121
00:08:25,910 --> 00:08:30,764
вот эта вот функция, она мне не вернет
результат, не вернет connect grpc,

122
00:08:30,764 --> 00:08:33,930
пока не будет установлено хотя
бы одно соединение с сервисом.

123
00:08:33,930 --> 00:08:37,758
И так же я передаю еще одну опцию,
которая говорит,

124
00:08:37,758 --> 00:08:43,316
что нужно использовать балансер между
разными нодами, то есть нод будет много.

125
00:08:43,316 --> 00:08:46,365
В качестве балансера я
использую RoundRobin.

126
00:08:46,365 --> 00:08:52,530
В grpc политика такая, что вот у вас даже
есть простой балансер типа RoundRobin,

127
00:08:52,530 --> 00:08:58,264
а если вы хотите какой-то более сложно
балансер, например, со взвешенным весами

128
00:08:58,264 --> 00:09:03,580
или что-то еще, то будьте добры реализуйте
это в виде отдельного внешнего сервиса.

129
00:09:03,580 --> 00:09:07,280
Ну в данном примере мы будем
рассматривать RoundRobin.

130
00:09:07,280 --> 00:09:10,985
И туда мы передаем нашу
структуру на NameResolver,

131
00:09:10,985 --> 00:09:14,155
я ее взял из тестового пакета самого grpc.

132
00:09:14,155 --> 00:09:18,250
Это структура будет сообщать
нашему балансеру о том,

133
00:09:18,250 --> 00:09:23,640
что нужно добавить ноду в список серверов,
либо убрать какую-то ноду.

134
00:09:23,640 --> 00:09:29,928
Итак, хорошо, мы вроде как начали,
создаем соединение, все хорошо.

135
00:09:29,928 --> 00:09:32,398
Закрываем его при выходе из программы.

136
00:09:32,398 --> 00:09:38,560
Теперь, если у меня вдруг было больше
одного сервера мне вернулось из консула,

137
00:09:38,560 --> 00:09:43,731
то я буду как раз использовать
NameResolver, я буду их туда добавлять.

138
00:09:43,731 --> 00:09:48,619
Ну тут все просто, я создаю слайс
и итерируюсь по всем сервисам и

139
00:09:48,619 --> 00:09:52,470
добавляю туда определенного
рода структуру.

140
00:09:52,470 --> 00:09:55,543
То есть я добавляю туда структуру update,
которая говорит,

141
00:09:55,543 --> 00:09:57,265
что нужно что-то с этим сделать.

142
00:09:57,265 --> 00:10:02,060
сделать в списке серверов
уже у соединения grpc.

143
00:10:02,060 --> 00:10:03,684
Вот там есть операция Add.

144
00:10:03,684 --> 00:10:07,360
Ну помимо Add, конечно,
я буду использовать Delete потом.

145
00:10:07,360 --> 00:10:12,135
И адрес,
в который нужно провести операцию.

146
00:10:12,135 --> 00:10:16,910
Ну и потом я, собственно,
выполняю свое обновление.

147
00:10:16,910 --> 00:10:22,080
Хорошо, то есть лично мы
создали соединение grpc,

148
00:10:22,080 --> 00:10:27,250
мы добавили туда все адреса, теперь оно
коннектится к разным нашим нодам, к двум.

149
00:10:27,250 --> 00:10:33,555
Дальше, я создаю sessManager
(вы его видели уже),

150
00:10:33,555 --> 00:10:38,392
я запускаю в отдельной
горутине обновление,

151
00:10:38,392 --> 00:10:43,701
то есть я буду опрашивать consul,
на предмет того,

152
00:10:43,701 --> 00:10:47,538
были ли там уже какие-то обновления,

153
00:10:47,538 --> 00:10:51,920
пришли ли какие-то новые сервисы,
нужно ли что-то удалить или добавить.

154
00:10:51,920 --> 00:10:55,421
К этой функции мы вернемся после.

155
00:10:55,421 --> 00:11:00,380
Далее я буду просто пытаться
проверить там какую-то сессию.

156
00:11:00,380 --> 00:11:03,938
Я не буду ее там создавать и проверять,
потому что я напомню,

157
00:11:03,938 --> 00:11:08,619
что у меня сейчас мои микросервисы
друг с другом никак не связаны,

158
00:11:08,619 --> 00:11:12,262
там просто отдельные автономные
map'ки внутри каждого,

159
00:11:12,262 --> 00:11:17,027
поэтому я буду просто запрашивать туда
несуществующий какой-то id-шник сессии,

160
00:11:17,027 --> 00:11:19,945
и на той стороне мне он
будет возвращать заглушку.

161
00:11:19,945 --> 00:11:21,613
Ну и потом я буду спать.

162
00:11:21,613 --> 00:11:25,338
Я делаю это в бесконечном цикле,
просто чтобы показать вам,

163
00:11:25,338 --> 00:11:28,800
что нагрузка идет и что она добавляется
и удаляется с разных сервисов.

164
00:11:28,800 --> 00:11:32,270
Сейчас я это продемонстрирую.

165
00:11:32,270 --> 00:11:36,970
Так, запускаем.

166
00:11:36,970 --> 00:11:37,773
Ага.

167
00:11:37,773 --> 00:11:40,670
Вот пошла нагрузка.

168
00:11:40,670 --> 00:11:48,101
Обратите внимание,
нагрузка у нас идет равномерно.

169
00:11:48,101 --> 00:11:51,861
Сначала идет ports 82, 83, 82, 83.

170
00:11:51,861 --> 00:11:54,969
Ну потому что у меня RoundRobin,
он по кругу идет по всем серверам,

171
00:11:54,969 --> 00:11:56,180
которые у него доступны.

172
00:11:56,180 --> 00:11:57,664
Теперь давайте посмотрим,

173
00:11:57,664 --> 00:12:01,510
каким образом будет происходить
удаление сервисов либо же добавление.

174
00:12:01,510 --> 00:12:04,610
Как раз функция runOnlineServiceDiscovery.

175
00:12:04,610 --> 00:12:08,330
Итак, что я тут делаю?

176
00:12:08,330 --> 00:12:14,574
Для начала я строю map'ку
из текущих адресов.

177
00:12:14,574 --> 00:12:18,270
С map'кой просто удобно работать.

178
00:12:18,270 --> 00:12:19,885
Далее я создаю ticker.

179
00:12:19,885 --> 00:12:24,664
Напомню, что этот ticker не имеет функцию
stop, и если эта функция завершится,

180
00:12:24,664 --> 00:12:26,094
то у меня будет утечка ресурсов.

181
00:12:26,094 --> 00:12:30,387
Однако я не планирую, что она будет
завершаться, и просто пускаю цикл по нему.

182
00:12:30,387 --> 00:12:36,598
Там идет чтение из канала, поэтому раз в
пять секунд у меня будет перечитывание.

183
00:12:36,598 --> 00:12:42,290
Хорошо, далее я фактически
обращаюсь уже к consul'у,

184
00:12:42,290 --> 00:12:45,059
использую уже знакомую
вам функцию Service,

185
00:12:45,059 --> 00:12:50,220
которая получает service-api
и получает текущие адреса.

186
00:12:50,220 --> 00:12:51,610
Хорошо.

187
00:12:51,610 --> 00:12:56,270
Теперь я из этих адресов
также строю map'у.

188
00:12:56,270 --> 00:13:00,310
Ну и дальше я итерируюсь
по обоим map'ам и смотрю,

189
00:13:00,310 --> 00:13:04,800
добавился ли какой-то сервис,
либо же какой-то сервис удалился.

190
00:13:04,800 --> 00:13:08,825
В данном случае тот способ,

191
00:13:08,825 --> 00:13:12,480
которым я опрашиваю consul,
это называется polling.

192
00:13:12,480 --> 00:13:16,990
Я периодически просто обращаюсь
к нему и говорю: есть что-то?

193
00:13:16,990 --> 00:13:21,040
Но там есть и другие варианты,
их мы рассмотрим отдельно.

194
00:13:21,040 --> 00:13:25,620
Итак, то есть раз в пять секунд
я буду обращаться к consul'у,

195
00:13:25,620 --> 00:13:29,710
брать все адреса, которые там есть,
сверять с тем, что есть у меня,

196
00:13:29,710 --> 00:13:34,515
и в зависимости от того,
удалилось ли там что-то,

197
00:13:34,515 --> 00:13:39,320
либо же добавилось там что-то,
я буду совершать разную операцию.

198
00:13:39,320 --> 00:13:41,385
Посмотрим, как это работает.

199
00:13:41,385 --> 00:13:46,467
Опять, запустим наш сервис,
который проверяет сессии.

200
00:13:46,467 --> 00:13:48,186
Теперь я потушу.

201
00:13:48,186 --> 00:13:51,655
Да, обратите внимание: 1, 3, 5.

202
00:13:51,655 --> 00:13:53,556
Вот идут его проверки.

203
00:13:53,556 --> 00:13:55,940
Теперь я потушу этот сервис.

204
00:13:55,940 --> 00:14:02,863
При завершении работы программы,
он отправил в consul информацию о том,

205
00:14:02,863 --> 00:14:08,345
что «я все, мне, пожалуйста,
слать ничего не надо».

206
00:14:08,345 --> 00:14:09,841
И consul это принял.

207
00:14:09,841 --> 00:14:10,756
Посмотрим.

208
00:14:10,756 --> 00:14:13,772
Тут у меня было два сервиса, смотрим.

209
00:14:13,772 --> 00:14:15,909
Теперь остался один.

210
00:14:15,909 --> 00:14:18,579
Вернемся в нашу программу.

211
00:14:18,579 --> 00:14:19,910
Ага, вот он.

212
00:14:19,910 --> 00:14:25,640
remove 127.0.0.1:8082.

213
00:14:25,640 --> 00:14:30,805
То есть наш микросервис был
успешно удален из списка.

214
00:14:30,805 --> 00:14:35,563
И обратите внимание,
теперь идет только на 83-м порту запрос.

215
00:14:35,563 --> 00:14:37,320
Теперь я запущу еще раз.

216
00:14:37,320 --> 00:14:44,280
Ага, теперь на 82-м порту, и я его поднял,
и на него опять пошли запросы.

217
00:14:44,280 --> 00:14:46,409
Смотрим программу.

218
00:14:46,409 --> 00:14:47,000
add.

219
00:14:47,000 --> 00:14:52,253
Пожалуйста, и я вычитал из
consul'а информацию о том,

220
00:14:52,253 --> 00:14:57,503
что там был добавлен какой-то сервис
и добавил его в список серверов,

221
00:14:57,503 --> 00:15:01,620
на который идет нагрузка, и,
соответственно, нагрузка туда пошла.

222
00:15:01,620 --> 00:15:02,801
Вот.

223
00:15:02,801 --> 00:15:06,054
То есть это довольно удобно.

224
00:15:06,054 --> 00:15:10,693
Соответственно, сервис discovery и
балансировка нагрузки — это тема очень

225
00:15:10,693 --> 00:15:16,250
большая, очень широкая, но я надеюсь, что
этот пример послужит вам хорошей отправной

226
00:15:16,250 --> 00:15:21,526
точкой того, каким образом это можно
реализовать: либо со стороны grpc,

227
00:15:21,526 --> 00:15:24,460
либо со стороны самого consul'а.