1
00:00:00,000 --> 00:00:07,404
[БЕЗ_ЗВУКА] В

2
00:00:07,404 --> 00:00:11,391
прошлых видео я продемонстрировал
возможность выноса какого-то кода в

3
00:00:11,391 --> 00:00:16,682
микросервисы, используя стандартную
библиотеку и пакеты net/rpc и json/rpc.

4
00:00:16,682 --> 00:00:22,602
Однако эти пакеты довольно бедные,
там очень мало фич; например,

5
00:00:22,602 --> 00:00:27,004
там сложности с авторизацией,
балансингом и прочим.

6
00:00:27,004 --> 00:00:29,730
В этом видео мы поговорим
про фреймворк GRPC,

7
00:00:29,730 --> 00:00:34,101
который значительно богаче на возможности,

8
00:00:34,101 --> 00:00:39,429
чем предыдущие варианты,
и основан он на формате

9
00:00:39,429 --> 00:00:44,420
protobuf и описании сервисов,
используя также этот формат.

10
00:00:44,420 --> 00:00:49,000
Сначала давайте посмотрим на сервис.

11
00:00:49,000 --> 00:00:49,901
Так.

12
00:00:49,901 --> 00:00:56,760
У нас уже есть знакомый вам protobuf-файл,

13
00:00:56,760 --> 00:01:02,180
где описаны структуры SessionID и session.

14
00:01:02,180 --> 00:01:07,390
Однако добавляется ещё описание сервиса.

15
00:01:07,390 --> 00:01:13,691
Message описывает структуру,
сервис описывает уже GRPC-шный сервис.

16
00:01:13,691 --> 00:01:16,340
Называется он у нас AuthChecker.

17
00:01:16,340 --> 00:01:21,012
И я описываю несколько
методов в нём: Create,

18
00:01:21,012 --> 00:01:25,718
Check и Delete; для Delete'а
я сделал заглушку в

19
00:01:25,718 --> 00:01:30,647
качестве возвращаемого ответа, потому
что GRPC не может не возвращать ответ.

20
00:01:30,647 --> 00:01:34,880
И сделано это для того, чтобы когда
вы будете расширять ваш сервис,

21
00:01:34,880 --> 00:01:38,870
у вас не возникло трудностей с тем,
чтобы добавлять туда что-то.

22
00:01:38,870 --> 00:01:44,370
Итак, для генерации уже

23
00:01:44,370 --> 00:01:49,213
кода самого сервиса нам
необходимо указать плагины,

24
00:01:49,213 --> 00:01:54,342
что мы хотим не только
сгенерировать сам protobuf-файл,

25
00:01:54,342 --> 00:02:00,447
но и сгенерировать GRPC-обвязку
для сервисов, которые там есть.

26
00:02:00,447 --> 00:02:01,320
Хорошо.

27
00:02:01,320 --> 00:02:03,098
После запуска что у нас получается?

28
00:02:03,098 --> 00:02:05,340
Получается у нас вот
такой вот здоровый файл.

29
00:02:05,340 --> 00:02:08,585
Править его,
опять-таки ещё раз повторюсь, не надо,

30
00:02:08,585 --> 00:02:11,770
потому что при следующей
генерации он перезапишется.

31
00:02:11,770 --> 00:02:16,600
Там есть наши структуры,
которые вы в целом уже видели,

32
00:02:16,600 --> 00:02:22,783
а теперь там добавляются
уже следующие сервисы.

33
00:02:22,783 --> 00:02:27,896
Есть интерфейс для клиента,
то есть который

34
00:02:27,896 --> 00:02:33,710
вы будете вызывать и
создавать со стороны клиента,

35
00:02:33,710 --> 00:02:39,860
есть реализация этого сервиса.

36
00:02:39,860 --> 00:02:42,569
То есть вот интерфейс, а вот реализация.

37
00:02:42,569 --> 00:02:46,870
Реализация внутренняя,
она то есть в данном случае не публичная,

38
00:02:46,870 --> 00:02:50,740
за пределы пакета не выходит;
получается она вот из этой функции.

39
00:02:50,740 --> 00:02:54,357
Я покажу, как это использовать.

40
00:02:54,357 --> 00:02:56,476
Ну и вот есть вызов.

41
00:02:56,476 --> 00:03:02,614
Вызов уже сам генерирует,

42
00:03:02,614 --> 00:03:07,675
точнее, этот код уже сгенерирован для
того, чтобы вызвать на той стороне

43
00:03:07,675 --> 00:03:13,030
нужную нам функцию в нужном пакете.

44
00:03:13,030 --> 00:03:15,802
То есть grpc.Invoke, Delete.

45
00:03:15,802 --> 00:03:17,090
И есть сервер.

46
00:03:17,090 --> 00:03:24,010
То есть GRPC-генератор сервиса
сразу генерирует вам интерфейс,

47
00:03:24,010 --> 00:03:29,580
в котором жёстко заданы входящие
параметры и исходящие параметры.

48
00:03:29,580 --> 00:03:32,328
И вам нужно будет только
реализовать структуру,

49
00:03:32,328 --> 00:03:35,150
методы которой удовлетворяют
этому интерфейсу.

50
00:03:35,150 --> 00:03:40,620
Ну и тут регистрация и всё прочее;
в общем, много служебных функций.

51
00:03:40,620 --> 00:03:42,095
Ну и сам protobuf.

52
00:03:42,095 --> 00:03:42,833
Хорошо.

53
00:03:42,833 --> 00:03:46,160
Теперь давайте посмотрим на реализацию.

54
00:03:46,160 --> 00:03:52,038
Реализация мало отличается от того, что

55
00:03:52,038 --> 00:03:57,630
мы видели в самом первом варианте: у нас
есть Mutex, хранилище сессии в виде мапки.

56
00:03:57,630 --> 00:04:02,615
NewSessionManager возвращает

57
00:04:02,615 --> 00:04:07,285
нам указатель на эту структуру.

58
00:04:07,285 --> 00:04:07,999
Методы.

59
00:04:07,999 --> 00:04:12,805
Отличие от самого-самого первого
варианта в методах в том,

60
00:04:12,805 --> 00:04:17,330
что мы теперь принимаем
первым аргументом context.

61
00:04:17,330 --> 00:04:23,616
В нём могут быть какие-то дополнительные
параметры переданные; либо можно

62
00:04:23,616 --> 00:04:27,590
получить какую-то информацию о запросе,
например, вход, с которого он пришёл.

63
00:04:27,590 --> 00:04:33,890
В целом в остальном практически не
отличается от первоначального варианта.

64
00:04:33,890 --> 00:04:35,413
Получаем id'шник.

65
00:04:35,413 --> 00:04:37,110
И мы его кладём в мапку.

66
00:04:37,110 --> 00:04:40,511
В Check'е пытаемся проверить
из мапки; если нет,

67
00:04:40,511 --> 00:04:45,387
в данном случае мы просто вернём
ошибку со статусом «Не найдено».

68
00:04:45,387 --> 00:04:46,620
Удаление тоже.

69
00:04:46,620 --> 00:04:51,540
Теперь как это вызывать,
как создать сервер.

70
00:04:51,540 --> 00:04:53,614
Итак, сервер.

71
00:04:53,614 --> 00:04:58,360
Я создаю Listener на 8081 порту.

72
00:04:58,360 --> 00:05:03,034
Создаю новый сервер GRPC-шный, регистрирую

73
00:05:03,034 --> 00:05:07,940
там мой сервис и — в общем, и всё.

74
00:05:07,940 --> 00:05:12,020
Вот этот вот session — это пакет,

75
00:05:12,020 --> 00:05:16,340
для которого сгенерировался мой код.

76
00:05:16,340 --> 00:05:20,660
RegisterAuthCheckerServer —
это тоже сгенерированный код,

77
00:05:20,660 --> 00:05:26,780
давайте я его даже найду,

78
00:05:26,780 --> 00:05:31,370
который регистрирует в сервисе

79
00:05:31,370 --> 00:05:36,380
экземпляр моей структуры,
который удовлетворяет нужному интерфейсу.

80
00:05:36,380 --> 00:05:42,524
Я туда передаю сервер,
создаю мою структуру и всё.

81
00:05:42,524 --> 00:05:43,337
И поехали.

82
00:05:43,337 --> 00:05:46,680
То есть в базовом варианте
это выглядит вот так.

83
00:05:46,680 --> 00:05:49,578
И буквально всего ничего.

84
00:05:49,578 --> 00:05:52,350
Как теперь это вызывать?

85
00:05:52,350 --> 00:06:00,100
Вот файл, который уже будет
вызывать методы моего микросервиса.

86
00:06:00,100 --> 00:06:05,095
Для начала нам к нему нужно
подключиться; я указываю адрес

87
00:06:05,095 --> 00:06:07,044
и указываю grpc-опцию WithInsecure.

88
00:06:07,044 --> 00:06:10,090
Это значит, что у меня там
никакого шифрования, ничего нет,

89
00:06:10,090 --> 00:06:14,010
голые бинарные данные по TCP гоняем.

90
00:06:14,010 --> 00:06:17,985
Ну если там у меня функция выходит,
я её закрываю.

91
00:06:17,985 --> 00:06:22,630
Теперь я создаю клиента к
своему сервису; опять-таки я

92
00:06:22,630 --> 00:06:27,715
пользуюсь сгенерированным кодом,
в котором уже есть методы все,

93
00:06:27,715 --> 00:06:30,847
нужные мне,
которые идут в правильное место.

94
00:06:30,847 --> 00:06:34,169
То есть я туда просто
передаю соединение и всё.

95
00:06:34,169 --> 00:06:39,262
У меня готов уже connect и
готов клиент к моему менеджеру

96
00:06:39,262 --> 00:06:44,154
сессии на той стороне,
который крутится внутри микросервиса.

97
00:06:44,154 --> 00:06:45,937
Теперь это нужно вызвать.

98
00:06:45,937 --> 00:06:47,176
Как я уже говорил,

99
00:06:47,176 --> 00:06:51,877
у нас добавился context; в данном случае
я просто беру context Background,

100
00:06:51,877 --> 00:06:56,867
однако я могу взять, например, context с
Timeout'ом в данном случае или передать

101
00:06:56,867 --> 00:07:01,850
туда какие-то дополнительные опции,
это мы будем рассматривать отдельно.

102
00:07:01,850 --> 00:07:02,991
Итак.

103
00:07:02,991 --> 00:07:06,040
Вызываем Create.

104
00:07:06,040 --> 00:07:08,348
Опять-таки это очень близко к тому,

105
00:07:08,348 --> 00:07:13,747
что вы видели первоначально; единственное,
что добавилось — context.

106
00:07:13,747 --> 00:07:15,909
Хорошо, мы создали сессию,

107
00:07:15,909 --> 00:07:20,102
проверили сессию: опять всё
то же самое плюс context.

108
00:07:20,102 --> 00:07:25,886
Единственное, что я обращаюсь, конечно,
уже не к структуре в данном пакете,

109
00:07:25,886 --> 00:07:29,150
а к структуре в другом пакете,
то есть добавится префикс к session.

110
00:07:29,150 --> 00:07:31,645
Удаление и проверка.

111
00:07:31,645 --> 00:07:35,460
Попробуем теперь это запустить.

112
00:07:35,460 --> 00:07:43,460
[БЕЗ_ЗВУКА]

113
00:07:43,460 --> 00:07:51,720
[БЕЗ_ЗВУКА] Запустили сервер.

114
00:07:51,720 --> 00:07:54,054
И запустили клиент.

115
00:07:54,054 --> 00:07:55,221
Отлично.

116
00:07:55,221 --> 00:08:01,079
Создалась моя сессия, причём поскольку
protobuf тоже генерит много чего,

117
00:08:01,079 --> 00:08:03,310
он сразу генерит красивый вывод для неё.

118
00:08:03,310 --> 00:08:04,171
Ошибки нет.

119
00:08:04,171 --> 00:08:09,270
Я теперь проверил сессию; login и
username, всё хорошо, ошибки тоже нет.

120
00:08:09,270 --> 00:08:12,769
После удаления я пытаюсь
ещё раз проверить сессию.

121
00:08:12,769 --> 00:08:17,526
Уже сессии нет, и мне вернулась ошибка,
что с кодом не найдено.

122
00:08:17,526 --> 00:08:20,780
И описание то же: session not found.

123
00:08:20,780 --> 00:08:22,028
Вот это GRPC.

124
00:08:22,028 --> 00:08:24,940
Мы используем его в продакшене.

125
00:08:24,940 --> 00:08:29,260
Мы довольны и производительностью,
и набором возможностей,

126
00:08:29,260 --> 00:08:31,420
которые мы рассмотрим дальше.